Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMP
    DUR
    END
    NEWLINE
    START

Grammar

Rule 0     S' -> p_play
Rule 1     p_play -> PLAY TWOPOINTS LBRACKET seqacc RBRACKET
Rule 2     seqacc -> acc
Rule 3     seqacc -> acc COMMA seqacc
Rule 4     acc -> LPAREN seqnotas RPAREN
Rule 5     acc -> nota
Rule 6     seqnotas -> nota
Rule 7     seqnotas -> nota COMMA seqnotas
Rule 8     nota -> INT

Terminals, with rules where they appear

AMP                  : 
COMMA                : 3 7
DUR                  : 
END                  : 
INT                  : 8
LBRACKET             : 1
LPAREN               : 4
NEWLINE              : 
PLAY                 : 1
RBRACKET             : 1
RPAREN               : 4
START                : 
TWOPOINTS            : 1
error                : 

Nonterminals, with rules where they appear

acc                  : 2 3
nota                 : 5 6 7
p_play               : 0
seqacc               : 1 3
seqnotas             : 4 7

Parsing method: LALR

state 0

    (0) S' -> . p_play
    (1) p_play -> . PLAY TWOPOINTS LBRACKET seqacc RBRACKET

    PLAY            shift and go to state 2

    p_play                         shift and go to state 1

state 1

    (0) S' -> p_play .



state 2

    (1) p_play -> PLAY . TWOPOINTS LBRACKET seqacc RBRACKET

    TWOPOINTS       shift and go to state 3


state 3

    (1) p_play -> PLAY TWOPOINTS . LBRACKET seqacc RBRACKET

    LBRACKET        shift and go to state 4


state 4

    (1) p_play -> PLAY TWOPOINTS LBRACKET . seqacc RBRACKET
    (2) seqacc -> . acc
    (3) seqacc -> . acc COMMA seqacc
    (4) acc -> . LPAREN seqnotas RPAREN
    (5) acc -> . nota
    (8) nota -> . INT

    LPAREN          shift and go to state 7
    INT             shift and go to state 9

    seqacc                         shift and go to state 5
    acc                            shift and go to state 6
    nota                           shift and go to state 8

state 5

    (1) p_play -> PLAY TWOPOINTS LBRACKET seqacc . RBRACKET

    RBRACKET        shift and go to state 10


state 6

    (2) seqacc -> acc .
    (3) seqacc -> acc . COMMA seqacc

    RBRACKET        reduce using rule 2 (seqacc -> acc .)
    COMMA           shift and go to state 11


state 7

    (4) acc -> LPAREN . seqnotas RPAREN
    (6) seqnotas -> . nota
    (7) seqnotas -> . nota COMMA seqnotas
    (8) nota -> . INT

    INT             shift and go to state 9

    seqnotas                       shift and go to state 12
    nota                           shift and go to state 13

state 8

    (5) acc -> nota .

    COMMA           reduce using rule 5 (acc -> nota .)
    RBRACKET        reduce using rule 5 (acc -> nota .)


state 9

    (8) nota -> INT .

    COMMA           reduce using rule 8 (nota -> INT .)
    RBRACKET        reduce using rule 8 (nota -> INT .)
    RPAREN          reduce using rule 8 (nota -> INT .)


state 10

    (1) p_play -> PLAY TWOPOINTS LBRACKET seqacc RBRACKET .

    $end            reduce using rule 1 (p_play -> PLAY TWOPOINTS LBRACKET seqacc RBRACKET .)


state 11

    (3) seqacc -> acc COMMA . seqacc
    (2) seqacc -> . acc
    (3) seqacc -> . acc COMMA seqacc
    (4) acc -> . LPAREN seqnotas RPAREN
    (5) acc -> . nota
    (8) nota -> . INT

    LPAREN          shift and go to state 7
    INT             shift and go to state 9

    acc                            shift and go to state 6
    seqacc                         shift and go to state 14
    nota                           shift and go to state 8

state 12

    (4) acc -> LPAREN seqnotas . RPAREN

    RPAREN          shift and go to state 15


state 13

    (6) seqnotas -> nota .
    (7) seqnotas -> nota . COMMA seqnotas

    RPAREN          reduce using rule 6 (seqnotas -> nota .)
    COMMA           shift and go to state 16


state 14

    (3) seqacc -> acc COMMA seqacc .

    RBRACKET        reduce using rule 3 (seqacc -> acc COMMA seqacc .)


state 15

    (4) acc -> LPAREN seqnotas RPAREN .

    COMMA           reduce using rule 4 (acc -> LPAREN seqnotas RPAREN .)
    RBRACKET        reduce using rule 4 (acc -> LPAREN seqnotas RPAREN .)


state 16

    (7) seqnotas -> nota COMMA . seqnotas
    (6) seqnotas -> . nota
    (7) seqnotas -> . nota COMMA seqnotas
    (8) nota -> . INT

    INT             shift and go to state 9

    nota                           shift and go to state 13
    seqnotas                       shift and go to state 17

state 17

    (7) seqnotas -> nota COMMA seqnotas .

    RPAREN          reduce using rule 7 (seqnotas -> nota COMMA seqnotas .)

