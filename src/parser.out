Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program2
Rule 1     program2 -> START NEWLINE program END NEWLINE
Rule 2     program -> statement NEWLINE
Rule 3     program -> statement NEWLINE program
Rule 4     statement -> assignation
Rule 5     assignation -> AMP TWOPOINTS INT
Rule 6     assignation -> DUR TWOPOINTS INT
Rule 7     assignation -> PLAY TWOPOINTS LBRACKET expression RBRACKET
Rule 8     expression -> acc
Rule 9     expression -> acc COMMA expression
Rule 10    acc -> LPAREN seqnotas RPAREN
Rule 11    acc -> nota
Rule 12    seqnotas -> nota
Rule 13    seqnotas -> nota COMMA seqnotas
Rule 14    nota -> INT

Terminals, with rules where they appear

AMP                  : 5
COMMA                : 9 13
DUR                  : 6
END                  : 1
INT                  : 5 6 14
LBRACKET             : 7
LPAREN               : 10
NEWLINE              : 1 1 2 3
PLAY                 : 7
RBRACKET             : 7
RPAREN               : 10
START                : 1
TWOPOINTS            : 5 6 7
error                : 

Nonterminals, with rules where they appear

acc                  : 8 9
assignation          : 4
expression           : 7 9
nota                 : 11 12 13
program              : 1 3
program2             : 0
seqnotas             : 10 13
statement            : 2 3

Parsing method: LALR

state 0

    (0) S' -> . program2
    (1) program2 -> . START NEWLINE program END NEWLINE

    START           shift and go to state 1

    program2                       shift and go to state 2

state 1

    (1) program2 -> START . NEWLINE program END NEWLINE

    NEWLINE         shift and go to state 3


state 2

    (0) S' -> program2 .



state 3

    (1) program2 -> START NEWLINE . program END NEWLINE
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . assignation
    (5) assignation -> . AMP TWOPOINTS INT
    (6) assignation -> . DUR TWOPOINTS INT
    (7) assignation -> . PLAY TWOPOINTS LBRACKET expression RBRACKET

    AMP             shift and go to state 8
    DUR             shift and go to state 9
    PLAY            shift and go to state 4

    program                        shift and go to state 6
    assignation                    shift and go to state 5
    statement                      shift and go to state 7

state 4

    (7) assignation -> PLAY . TWOPOINTS LBRACKET expression RBRACKET

    TWOPOINTS       shift and go to state 10


state 5

    (4) statement -> assignation .

    NEWLINE         reduce using rule 4 (statement -> assignation .)


state 6

    (1) program2 -> START NEWLINE program . END NEWLINE

    END             shift and go to state 11


state 7

    (2) program -> statement . NEWLINE
    (3) program -> statement . NEWLINE program

    NEWLINE         shift and go to state 12


state 8

    (5) assignation -> AMP . TWOPOINTS INT

    TWOPOINTS       shift and go to state 13


state 9

    (6) assignation -> DUR . TWOPOINTS INT

    TWOPOINTS       shift and go to state 14


state 10

    (7) assignation -> PLAY TWOPOINTS . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 15


state 11

    (1) program2 -> START NEWLINE program END . NEWLINE

    NEWLINE         shift and go to state 16


state 12

    (2) program -> statement NEWLINE .
    (3) program -> statement NEWLINE . program
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . assignation
    (5) assignation -> . AMP TWOPOINTS INT
    (6) assignation -> . DUR TWOPOINTS INT
    (7) assignation -> . PLAY TWOPOINTS LBRACKET expression RBRACKET

    END             reduce using rule 2 (program -> statement NEWLINE .)
    AMP             shift and go to state 8
    DUR             shift and go to state 9
    PLAY            shift and go to state 4

    program                        shift and go to state 17
    assignation                    shift and go to state 5
    statement                      shift and go to state 7

state 13

    (5) assignation -> AMP TWOPOINTS . INT

    INT             shift and go to state 18


state 14

    (6) assignation -> DUR TWOPOINTS . INT

    INT             shift and go to state 19


state 15

    (7) assignation -> PLAY TWOPOINTS LBRACKET . expression RBRACKET
    (8) expression -> . acc
    (9) expression -> . acc COMMA expression
    (10) acc -> . LPAREN seqnotas RPAREN
    (11) acc -> . nota
    (14) nota -> . INT

    LPAREN          shift and go to state 21
    INT             shift and go to state 22

    acc                            shift and go to state 20
    nota                           shift and go to state 23
    expression                     shift and go to state 24

state 16

    (1) program2 -> START NEWLINE program END NEWLINE .

    $end            reduce using rule 1 (program2 -> START NEWLINE program END NEWLINE .)


state 17

    (3) program -> statement NEWLINE program .

    END             reduce using rule 3 (program -> statement NEWLINE program .)


state 18

    (5) assignation -> AMP TWOPOINTS INT .

    NEWLINE         reduce using rule 5 (assignation -> AMP TWOPOINTS INT .)


state 19

    (6) assignation -> DUR TWOPOINTS INT .

    NEWLINE         reduce using rule 6 (assignation -> DUR TWOPOINTS INT .)


state 20

    (8) expression -> acc .
    (9) expression -> acc . COMMA expression

    RBRACKET        reduce using rule 8 (expression -> acc .)
    COMMA           shift and go to state 25


state 21

    (10) acc -> LPAREN . seqnotas RPAREN
    (12) seqnotas -> . nota
    (13) seqnotas -> . nota COMMA seqnotas
    (14) nota -> . INT

    INT             shift and go to state 22

    seqnotas                       shift and go to state 26
    nota                           shift and go to state 27

state 22

    (14) nota -> INT .

    COMMA           reduce using rule 14 (nota -> INT .)
    RPAREN          reduce using rule 14 (nota -> INT .)
    RBRACKET        reduce using rule 14 (nota -> INT .)


state 23

    (11) acc -> nota .

    COMMA           reduce using rule 11 (acc -> nota .)
    RBRACKET        reduce using rule 11 (acc -> nota .)


state 24

    (7) assignation -> PLAY TWOPOINTS LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 28


state 25

    (9) expression -> acc COMMA . expression
    (8) expression -> . acc
    (9) expression -> . acc COMMA expression
    (10) acc -> . LPAREN seqnotas RPAREN
    (11) acc -> . nota
    (14) nota -> . INT

    LPAREN          shift and go to state 21
    INT             shift and go to state 22

    acc                            shift and go to state 20
    nota                           shift and go to state 23
    expression                     shift and go to state 29

state 26

    (10) acc -> LPAREN seqnotas . RPAREN

    RPAREN          shift and go to state 30


state 27

    (12) seqnotas -> nota .
    (13) seqnotas -> nota . COMMA seqnotas

    RPAREN          reduce using rule 12 (seqnotas -> nota .)
    COMMA           shift and go to state 31


state 28

    (7) assignation -> PLAY TWOPOINTS LBRACKET expression RBRACKET .

    NEWLINE         reduce using rule 7 (assignation -> PLAY TWOPOINTS LBRACKET expression RBRACKET .)


state 29

    (9) expression -> acc COMMA expression .

    RBRACKET        reduce using rule 9 (expression -> acc COMMA expression .)


state 30

    (10) acc -> LPAREN seqnotas RPAREN .

    COMMA           reduce using rule 10 (acc -> LPAREN seqnotas RPAREN .)
    RBRACKET        reduce using rule 10 (acc -> LPAREN seqnotas RPAREN .)


state 31

    (13) seqnotas -> nota COMMA . seqnotas
    (12) seqnotas -> . nota
    (13) seqnotas -> . nota COMMA seqnotas
    (14) nota -> . INT

    INT             shift and go to state 22

    seqnotas                       shift and go to state 32
    nota                           shift and go to state 27

state 32

    (13) seqnotas -> nota COMMA seqnotas .

    RPAREN          reduce using rule 13 (seqnotas -> nota COMMA seqnotas .)

