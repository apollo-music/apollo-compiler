Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program2
Rule 1     program2 -> START NEWLINE program END
Rule 2     program -> statement NEWLINE
Rule 3     program -> statement NEWLINE program
Rule 4     statement -> command
Rule 5     statement -> param
Rule 6     statement -> assignation
Rule 7     statement -> loop
Rule 8     param -> AMP TWOPOINTS INT
Rule 9     param -> DUR TWOPOINTS INT
Rule 10    param -> INSTR TWOPOINTS INT
Rule 11    command -> command COMMA param
Rule 12    command -> PLAY TWOPOINTS LBRACKET expression RBRACKET
Rule 13    assignation -> VAR ID TWOPOINTS LBRACKET expression RBRACKET
Rule 14    assignation -> VAR ID TWOPOINTS acc
Rule 15    expression -> acc
Rule 16    expression -> acc COMMA expression
Rule 17    acc -> LPAREN seqnotas RPAREN
Rule 18    acc -> nota
Rule 19    seqnotas -> nota
Rule 20    seqnotas -> nota COMMA seqnotas
Rule 21    nota -> nota SUM nota
Rule 22    nota -> nota MINUS nota
Rule 23    nota -> nota MULTIPLY nota
Rule 24    nota -> INT
Rule 25    nota -> ID
Rule 26    loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

Terminals, with rules where they appear

AMP                  : 8
COMMA                : 11 16 20
DUR                  : 9
END                  : 1
ENDREPEAT            : 26
ID                   : 13 14 25
INSTR                : 10
INT                  : 8 9 10 24 26
LBRACKET             : 12 13
LPAREN               : 17
MINUS                : 22
MULTIPLY             : 23
NEWLINE              : 1 2 3 26
PLAY                 : 12
RBRACKET             : 12 13
REPEAT               : 26
RPAREN               : 17
START                : 1
SUM                  : 21
TWOPOINTS            : 8 9 10 12 13 14 26
VAR                  : 13 14
error                : 

Nonterminals, with rules where they appear

acc                  : 14 15 16
assignation          : 6
command              : 4 11
expression           : 12 13 16
loop                 : 7
nota                 : 18 19 20 21 21 22 22 23 23
param                : 5 11
program              : 1 3 26
program2             : 0
seqnotas             : 17 20
statement            : 2 3

Parsing method: LALR

state 0

    (0) S' -> . program2
    (1) program2 -> . START NEWLINE program END

    START           shift and go to state 1

    program2                       shift and go to state 2

state 1

    (1) program2 -> START . NEWLINE program END

    NEWLINE         shift and go to state 3


state 2

    (0) S' -> program2 .



state 3

    (1) program2 -> START NEWLINE . program END
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (11) command -> . command COMMA param
    (12) command -> . PLAY TWOPOINTS LBRACKET expression RBRACKET
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT
    (13) assignation -> . VAR ID TWOPOINTS LBRACKET expression RBRACKET
    (14) assignation -> . VAR ID TWOPOINTS acc
    (26) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

    PLAY            shift and go to state 8
    AMP             shift and go to state 7
    DUR             shift and go to state 11
    INSTR           shift and go to state 13
    VAR             shift and go to state 10
    REPEAT          shift and go to state 9

    assignation                    shift and go to state 12
    param                          shift and go to state 4
    program                        shift and go to state 5
    command                        shift and go to state 14
    statement                      shift and go to state 6
    loop                           shift and go to state 15

state 4

    (5) statement -> param .

    NEWLINE         reduce using rule 5 (statement -> param .)


state 5

    (1) program2 -> START NEWLINE program . END

    END             shift and go to state 16


state 6

    (2) program -> statement . NEWLINE
    (3) program -> statement . NEWLINE program

    NEWLINE         shift and go to state 17


state 7

    (8) param -> AMP . TWOPOINTS INT

    TWOPOINTS       shift and go to state 18


state 8

    (12) command -> PLAY . TWOPOINTS LBRACKET expression RBRACKET

    TWOPOINTS       shift and go to state 19


state 9

    (26) loop -> REPEAT . INT TWOPOINTS NEWLINE program ENDREPEAT

    INT             shift and go to state 20


state 10

    (13) assignation -> VAR . ID TWOPOINTS LBRACKET expression RBRACKET
    (14) assignation -> VAR . ID TWOPOINTS acc

    ID              shift and go to state 21


state 11

    (9) param -> DUR . TWOPOINTS INT

    TWOPOINTS       shift and go to state 22


state 12

    (6) statement -> assignation .

    NEWLINE         reduce using rule 6 (statement -> assignation .)


state 13

    (10) param -> INSTR . TWOPOINTS INT

    TWOPOINTS       shift and go to state 23


state 14

    (4) statement -> command .
    (11) command -> command . COMMA param

    NEWLINE         reduce using rule 4 (statement -> command .)
    COMMA           shift and go to state 24


state 15

    (7) statement -> loop .

    NEWLINE         reduce using rule 7 (statement -> loop .)


state 16

    (1) program2 -> START NEWLINE program END .

    $end            reduce using rule 1 (program2 -> START NEWLINE program END .)


state 17

    (2) program -> statement NEWLINE .
    (3) program -> statement NEWLINE . program
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (11) command -> . command COMMA param
    (12) command -> . PLAY TWOPOINTS LBRACKET expression RBRACKET
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT
    (13) assignation -> . VAR ID TWOPOINTS LBRACKET expression RBRACKET
    (14) assignation -> . VAR ID TWOPOINTS acc
    (26) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

    END             reduce using rule 2 (program -> statement NEWLINE .)
    ENDREPEAT       reduce using rule 2 (program -> statement NEWLINE .)
    PLAY            shift and go to state 8
    AMP             shift and go to state 7
    DUR             shift and go to state 11
    INSTR           shift and go to state 13
    VAR             shift and go to state 10
    REPEAT          shift and go to state 9

    assignation                    shift and go to state 12
    param                          shift and go to state 4
    program                        shift and go to state 25
    command                        shift and go to state 14
    statement                      shift and go to state 6
    loop                           shift and go to state 15

state 18

    (8) param -> AMP TWOPOINTS . INT

    INT             shift and go to state 26


state 19

    (12) command -> PLAY TWOPOINTS . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 27


state 20

    (26) loop -> REPEAT INT . TWOPOINTS NEWLINE program ENDREPEAT

    TWOPOINTS       shift and go to state 28


state 21

    (13) assignation -> VAR ID . TWOPOINTS LBRACKET expression RBRACKET
    (14) assignation -> VAR ID . TWOPOINTS acc

    TWOPOINTS       shift and go to state 29


state 22

    (9) param -> DUR TWOPOINTS . INT

    INT             shift and go to state 30


state 23

    (10) param -> INSTR TWOPOINTS . INT

    INT             shift and go to state 31


state 24

    (11) command -> command COMMA . param
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT

    AMP             shift and go to state 7
    DUR             shift and go to state 11
    INSTR           shift and go to state 13

    param                          shift and go to state 32

state 25

    (3) program -> statement NEWLINE program .

    END             reduce using rule 3 (program -> statement NEWLINE program .)
    ENDREPEAT       reduce using rule 3 (program -> statement NEWLINE program .)


state 26

    (8) param -> AMP TWOPOINTS INT .

    NEWLINE         reduce using rule 8 (param -> AMP TWOPOINTS INT .)
    COMMA           reduce using rule 8 (param -> AMP TWOPOINTS INT .)


state 27

    (12) command -> PLAY TWOPOINTS LBRACKET . expression RBRACKET
    (15) expression -> . acc
    (16) expression -> . acc COMMA expression
    (17) acc -> . LPAREN seqnotas RPAREN
    (18) acc -> . nota
    (21) nota -> . nota SUM nota
    (22) nota -> . nota MINUS nota
    (23) nota -> . nota MULTIPLY nota
    (24) nota -> . INT
    (25) nota -> . ID

    LPAREN          shift and go to state 34
    INT             shift and go to state 36
    ID              shift and go to state 35

    acc                            shift and go to state 33
    nota                           shift and go to state 37
    expression                     shift and go to state 38

state 28

    (26) loop -> REPEAT INT TWOPOINTS . NEWLINE program ENDREPEAT

    NEWLINE         shift and go to state 39


state 29

    (13) assignation -> VAR ID TWOPOINTS . LBRACKET expression RBRACKET
    (14) assignation -> VAR ID TWOPOINTS . acc
    (17) acc -> . LPAREN seqnotas RPAREN
    (18) acc -> . nota
    (21) nota -> . nota SUM nota
    (22) nota -> . nota MINUS nota
    (23) nota -> . nota MULTIPLY nota
    (24) nota -> . INT
    (25) nota -> . ID

    LBRACKET        shift and go to state 41
    LPAREN          shift and go to state 34
    INT             shift and go to state 36
    ID              shift and go to state 35

    acc                            shift and go to state 40
    nota                           shift and go to state 37

state 30

    (9) param -> DUR TWOPOINTS INT .

    NEWLINE         reduce using rule 9 (param -> DUR TWOPOINTS INT .)
    COMMA           reduce using rule 9 (param -> DUR TWOPOINTS INT .)


state 31

    (10) param -> INSTR TWOPOINTS INT .

    NEWLINE         reduce using rule 10 (param -> INSTR TWOPOINTS INT .)
    COMMA           reduce using rule 10 (param -> INSTR TWOPOINTS INT .)


state 32

    (11) command -> command COMMA param .

    COMMA           reduce using rule 11 (command -> command COMMA param .)
    NEWLINE         reduce using rule 11 (command -> command COMMA param .)


state 33

    (15) expression -> acc .
    (16) expression -> acc . COMMA expression

    RBRACKET        reduce using rule 15 (expression -> acc .)
    COMMA           shift and go to state 42


state 34

    (17) acc -> LPAREN . seqnotas RPAREN
    (19) seqnotas -> . nota
    (20) seqnotas -> . nota COMMA seqnotas
    (21) nota -> . nota SUM nota
    (22) nota -> . nota MINUS nota
    (23) nota -> . nota MULTIPLY nota
    (24) nota -> . INT
    (25) nota -> . ID

    INT             shift and go to state 36
    ID              shift and go to state 35

    seqnotas                       shift and go to state 43
    nota                           shift and go to state 44

state 35

    (25) nota -> ID .

    SUM             reduce using rule 25 (nota -> ID .)
    MINUS           reduce using rule 25 (nota -> ID .)
    MULTIPLY        reduce using rule 25 (nota -> ID .)
    COMMA           reduce using rule 25 (nota -> ID .)
    RBRACKET        reduce using rule 25 (nota -> ID .)
    RPAREN          reduce using rule 25 (nota -> ID .)
    NEWLINE         reduce using rule 25 (nota -> ID .)


state 36

    (24) nota -> INT .

    SUM             reduce using rule 24 (nota -> INT .)
    MINUS           reduce using rule 24 (nota -> INT .)
    MULTIPLY        reduce using rule 24 (nota -> INT .)
    COMMA           reduce using rule 24 (nota -> INT .)
    RBRACKET        reduce using rule 24 (nota -> INT .)
    RPAREN          reduce using rule 24 (nota -> INT .)
    NEWLINE         reduce using rule 24 (nota -> INT .)


state 37

    (18) acc -> nota .
    (21) nota -> nota . SUM nota
    (22) nota -> nota . MINUS nota
    (23) nota -> nota . MULTIPLY nota

    COMMA           reduce using rule 18 (acc -> nota .)
    RBRACKET        reduce using rule 18 (acc -> nota .)
    NEWLINE         reduce using rule 18 (acc -> nota .)
    SUM             shift and go to state 46
    MINUS           shift and go to state 47
    MULTIPLY        shift and go to state 45


state 38

    (12) command -> PLAY TWOPOINTS LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 48


state 39

    (26) loop -> REPEAT INT TWOPOINTS NEWLINE . program ENDREPEAT
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (11) command -> . command COMMA param
    (12) command -> . PLAY TWOPOINTS LBRACKET expression RBRACKET
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT
    (13) assignation -> . VAR ID TWOPOINTS LBRACKET expression RBRACKET
    (14) assignation -> . VAR ID TWOPOINTS acc
    (26) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

    PLAY            shift and go to state 8
    AMP             shift and go to state 7
    DUR             shift and go to state 11
    INSTR           shift and go to state 13
    VAR             shift and go to state 10
    REPEAT          shift and go to state 9

    assignation                    shift and go to state 12
    param                          shift and go to state 4
    program                        shift and go to state 49
    command                        shift and go to state 14
    statement                      shift and go to state 6
    loop                           shift and go to state 15

state 40

    (14) assignation -> VAR ID TWOPOINTS acc .

    NEWLINE         reduce using rule 14 (assignation -> VAR ID TWOPOINTS acc .)


state 41

    (13) assignation -> VAR ID TWOPOINTS LBRACKET . expression RBRACKET
    (15) expression -> . acc
    (16) expression -> . acc COMMA expression
    (17) acc -> . LPAREN seqnotas RPAREN
    (18) acc -> . nota
    (21) nota -> . nota SUM nota
    (22) nota -> . nota MINUS nota
    (23) nota -> . nota MULTIPLY nota
    (24) nota -> . INT
    (25) nota -> . ID

    LPAREN          shift and go to state 34
    INT             shift and go to state 36
    ID              shift and go to state 35

    acc                            shift and go to state 33
    nota                           shift and go to state 37
    expression                     shift and go to state 50

state 42

    (16) expression -> acc COMMA . expression
    (15) expression -> . acc
    (16) expression -> . acc COMMA expression
    (17) acc -> . LPAREN seqnotas RPAREN
    (18) acc -> . nota
    (21) nota -> . nota SUM nota
    (22) nota -> . nota MINUS nota
    (23) nota -> . nota MULTIPLY nota
    (24) nota -> . INT
    (25) nota -> . ID

    LPAREN          shift and go to state 34
    INT             shift and go to state 36
    ID              shift and go to state 35

    acc                            shift and go to state 33
    nota                           shift and go to state 37
    expression                     shift and go to state 51

state 43

    (17) acc -> LPAREN seqnotas . RPAREN

    RPAREN          shift and go to state 52


state 44

    (19) seqnotas -> nota .
    (20) seqnotas -> nota . COMMA seqnotas
    (21) nota -> nota . SUM nota
    (22) nota -> nota . MINUS nota
    (23) nota -> nota . MULTIPLY nota

    RPAREN          reduce using rule 19 (seqnotas -> nota .)
    COMMA           shift and go to state 53
    SUM             shift and go to state 46
    MINUS           shift and go to state 47
    MULTIPLY        shift and go to state 45


state 45

    (23) nota -> nota MULTIPLY . nota
    (21) nota -> . nota SUM nota
    (22) nota -> . nota MINUS nota
    (23) nota -> . nota MULTIPLY nota
    (24) nota -> . INT
    (25) nota -> . ID

    INT             shift and go to state 36
    ID              shift and go to state 35

    nota                           shift and go to state 54

state 46

    (21) nota -> nota SUM . nota
    (21) nota -> . nota SUM nota
    (22) nota -> . nota MINUS nota
    (23) nota -> . nota MULTIPLY nota
    (24) nota -> . INT
    (25) nota -> . ID

    INT             shift and go to state 36
    ID              shift and go to state 35

    nota                           shift and go to state 55

state 47

    (22) nota -> nota MINUS . nota
    (21) nota -> . nota SUM nota
    (22) nota -> . nota MINUS nota
    (23) nota -> . nota MULTIPLY nota
    (24) nota -> . INT
    (25) nota -> . ID

    INT             shift and go to state 36
    ID              shift and go to state 35

    nota                           shift and go to state 56

state 48

    (12) command -> PLAY TWOPOINTS LBRACKET expression RBRACKET .

    COMMA           reduce using rule 12 (command -> PLAY TWOPOINTS LBRACKET expression RBRACKET .)
    NEWLINE         reduce using rule 12 (command -> PLAY TWOPOINTS LBRACKET expression RBRACKET .)


state 49

    (26) loop -> REPEAT INT TWOPOINTS NEWLINE program . ENDREPEAT

    ENDREPEAT       shift and go to state 57


state 50

    (13) assignation -> VAR ID TWOPOINTS LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 58


state 51

    (16) expression -> acc COMMA expression .

    RBRACKET        reduce using rule 16 (expression -> acc COMMA expression .)


state 52

    (17) acc -> LPAREN seqnotas RPAREN .

    COMMA           reduce using rule 17 (acc -> LPAREN seqnotas RPAREN .)
    RBRACKET        reduce using rule 17 (acc -> LPAREN seqnotas RPAREN .)
    NEWLINE         reduce using rule 17 (acc -> LPAREN seqnotas RPAREN .)


state 53

    (20) seqnotas -> nota COMMA . seqnotas
    (19) seqnotas -> . nota
    (20) seqnotas -> . nota COMMA seqnotas
    (21) nota -> . nota SUM nota
    (22) nota -> . nota MINUS nota
    (23) nota -> . nota MULTIPLY nota
    (24) nota -> . INT
    (25) nota -> . ID

    INT             shift and go to state 36
    ID              shift and go to state 35

    seqnotas                       shift and go to state 59
    nota                           shift and go to state 44

state 54

    (23) nota -> nota MULTIPLY nota .
    (21) nota -> nota . SUM nota
    (22) nota -> nota . MINUS nota
    (23) nota -> nota . MULTIPLY nota

  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    COMMA           reduce using rule 23 (nota -> nota MULTIPLY nota .)
    RBRACKET        reduce using rule 23 (nota -> nota MULTIPLY nota .)
    RPAREN          reduce using rule 23 (nota -> nota MULTIPLY nota .)
    NEWLINE         reduce using rule 23 (nota -> nota MULTIPLY nota .)
    SUM             shift and go to state 46
    MINUS           shift and go to state 47
    MULTIPLY        shift and go to state 45

  ! SUM             [ reduce using rule 23 (nota -> nota MULTIPLY nota .) ]
  ! MINUS           [ reduce using rule 23 (nota -> nota MULTIPLY nota .) ]
  ! MULTIPLY        [ reduce using rule 23 (nota -> nota MULTIPLY nota .) ]


state 55

    (21) nota -> nota SUM nota .
    (21) nota -> nota . SUM nota
    (22) nota -> nota . MINUS nota
    (23) nota -> nota . MULTIPLY nota

  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    COMMA           reduce using rule 21 (nota -> nota SUM nota .)
    RBRACKET        reduce using rule 21 (nota -> nota SUM nota .)
    RPAREN          reduce using rule 21 (nota -> nota SUM nota .)
    NEWLINE         reduce using rule 21 (nota -> nota SUM nota .)
    SUM             shift and go to state 46
    MINUS           shift and go to state 47
    MULTIPLY        shift and go to state 45

  ! SUM             [ reduce using rule 21 (nota -> nota SUM nota .) ]
  ! MINUS           [ reduce using rule 21 (nota -> nota SUM nota .) ]
  ! MULTIPLY        [ reduce using rule 21 (nota -> nota SUM nota .) ]


state 56

    (22) nota -> nota MINUS nota .
    (21) nota -> nota . SUM nota
    (22) nota -> nota . MINUS nota
    (23) nota -> nota . MULTIPLY nota

  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    COMMA           reduce using rule 22 (nota -> nota MINUS nota .)
    RBRACKET        reduce using rule 22 (nota -> nota MINUS nota .)
    RPAREN          reduce using rule 22 (nota -> nota MINUS nota .)
    NEWLINE         reduce using rule 22 (nota -> nota MINUS nota .)
    SUM             shift and go to state 46
    MINUS           shift and go to state 47
    MULTIPLY        shift and go to state 45

  ! SUM             [ reduce using rule 22 (nota -> nota MINUS nota .) ]
  ! MINUS           [ reduce using rule 22 (nota -> nota MINUS nota .) ]
  ! MULTIPLY        [ reduce using rule 22 (nota -> nota MINUS nota .) ]


state 57

    (26) loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .

    NEWLINE         reduce using rule 26 (loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .)


state 58

    (13) assignation -> VAR ID TWOPOINTS LBRACKET expression RBRACKET .

    NEWLINE         reduce using rule 13 (assignation -> VAR ID TWOPOINTS LBRACKET expression RBRACKET .)


state 59

    (20) seqnotas -> nota COMMA seqnotas .

    RPAREN          reduce using rule 20 (seqnotas -> nota COMMA seqnotas .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SUM in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 54 resolved as shift
WARNING: shift/reduce conflict for SUM in state 55 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 55 resolved as shift
WARNING: shift/reduce conflict for SUM in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 56 resolved as shift
