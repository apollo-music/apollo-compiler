Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CUE
    MULTIPLY
    SYNC

Grammar

Rule 0     S' -> program2
Rule 1     program2 -> START NEWLINE program END
Rule 2     program -> statement NEWLINE
Rule 3     program -> statement NEWLINE program
Rule 4     statement -> command
Rule 5     statement -> param
Rule 6     statement -> assignation
Rule 7     statement -> loop
Rule 8     statement -> sequence
Rule 9     statement -> track
Rule 10    param -> AMP EQUAL exp2
Rule 11    param -> DUR EQUAL exp2
Rule 12    param -> INSTR EQUAL exp2
Rule 13    param -> TONE EQUAL exp2
Rule 14    param -> SLEEP EQUAL exp2
Rule 15    param -> CALL TWOPOINTS ID
Rule 16    command -> command COMMA param
Rule 17    command -> PLAY TWOPOINTS playcontent
Rule 18    playcontent -> LBRACKET seqexp RBRACKET
Rule 19    playcontent -> ID
Rule 20    playcontent -> acc
Rule 21    assignation -> VAR ID EQUAL exp
Rule 22    exp -> LBRACKET seqsound RBRACKET rec_op
Rule 23    exp -> nota rec_op
Rule 24    exp -> acc rec_op
Rule 25    seqexp -> exp COMMA seqexp
Rule 26    seqexp -> exp
Rule 27    rec_op -> <empty>
Rule 28    rec_op -> SUM exp
Rule 29    rec_op -> MINUS exp
Rule 30    rec_op -> AMPERSAND exp
Rule 31    exp2 -> nota rec_op2
Rule 32    rec_op2 -> <empty>
Rule 33    rec_op2 -> SUM exp2
Rule 34    rec_op2 -> MINUS exp2
Rule 35    seqsound -> sound COMMA seqsound
Rule 36    seqsound -> sound
Rule 37    sound -> acc
Rule 38    sound -> nota
Rule 39    acc -> LPAREN seqnotas RPAREN
Rule 40    seqnotas -> nota
Rule 41    seqnotas -> nota COMMA seqnotas
Rule 42    nota -> INT
Rule 43    nota -> ID
Rule 44    loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
Rule 45    sequence -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE
Rule 46    track -> TRACK ID TWOPOINTS NEWLINE program ENDTRACK

Terminals, with rules where they appear

AMP                  : 10
AMPERSAND            : 30
CALL                 : 15
COMMA                : 16 25 35 41
CUE                  : 
DUR                  : 11
END                  : 1
ENDREPEAT            : 44
ENDSEQUENCE          : 45
ENDTRACK             : 46
EQUAL                : 10 11 12 13 14 21
ID                   : 15 19 21 43 45 46
INSTR                : 12
INT                  : 42 44
LBRACKET             : 18 22
LPAREN               : 39
MINUS                : 29 34
MULTIPLY             : 
NEWLINE              : 1 2 3 44 45 46
PLAY                 : 17
RBRACKET             : 18 22
REPEAT               : 44
RPAREN               : 39
SEQUENCE             : 45
SLEEP                : 14
START                : 1
SUM                  : 28 33
SYNC                 : 
TONE                 : 13
TRACK                : 46
TWOPOINTS            : 15 17 44 45 46
VAR                  : 21
error                : 

Nonterminals, with rules where they appear

acc                  : 20 24 37
assignation          : 6
command              : 4 16
exp                  : 21 25 26 28 29 30
exp2                 : 10 11 12 13 14 33 34
loop                 : 7
nota                 : 23 31 38 40 41
param                : 5 16
playcontent          : 17
program              : 1 3 44 45 46
program2             : 0
rec_op               : 22 23 24
rec_op2              : 31
seqexp               : 18 25
seqnotas             : 39 41
seqsound             : 22 35
sequence             : 8
sound                : 35 36
statement            : 2 3
track                : 9

Parsing method: LALR

state 0

    (0) S' -> . program2
    (1) program2 -> . START NEWLINE program END

    START           shift and go to state 2

    program2                       shift and go to state 1

state 1

    (0) S' -> program2 .



state 2

    (1) program2 -> START . NEWLINE program END

    NEWLINE         shift and go to state 3


state 3

    (1) program2 -> START NEWLINE . program END
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . sequence
    (9) statement -> . track
    (16) command -> . command COMMA param
    (17) command -> . PLAY TWOPOINTS playcontent
    (10) param -> . AMP EQUAL exp2
    (11) param -> . DUR EQUAL exp2
    (12) param -> . INSTR EQUAL exp2
    (13) param -> . TONE EQUAL exp2
    (14) param -> . SLEEP EQUAL exp2
    (15) param -> . CALL TWOPOINTS ID
    (21) assignation -> . VAR ID EQUAL exp
    (44) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (45) sequence -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE
    (46) track -> . TRACK ID TWOPOINTS NEWLINE program ENDTRACK

    PLAY            shift and go to state 12
    AMP             shift and go to state 13
    DUR             shift and go to state 14
    INSTR           shift and go to state 15
    TONE            shift and go to state 16
    SLEEP           shift and go to state 17
    CALL            shift and go to state 18
    VAR             shift and go to state 19
    REPEAT          shift and go to state 20
    SEQUENCE        shift and go to state 21
    TRACK           shift and go to state 22

    program                        shift and go to state 4
    statement                      shift and go to state 5
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    sequence                       shift and go to state 10
    track                          shift and go to state 11

state 4

    (1) program2 -> START NEWLINE program . END

    END             shift and go to state 23


state 5

    (2) program -> statement . NEWLINE
    (3) program -> statement . NEWLINE program

    NEWLINE         shift and go to state 24


state 6

    (4) statement -> command .
    (16) command -> command . COMMA param

    NEWLINE         reduce using rule 4 (statement -> command .)
    COMMA           shift and go to state 25


state 7

    (5) statement -> param .

    NEWLINE         reduce using rule 5 (statement -> param .)


state 8

    (6) statement -> assignation .

    NEWLINE         reduce using rule 6 (statement -> assignation .)


state 9

    (7) statement -> loop .

    NEWLINE         reduce using rule 7 (statement -> loop .)


state 10

    (8) statement -> sequence .

    NEWLINE         reduce using rule 8 (statement -> sequence .)


state 11

    (9) statement -> track .

    NEWLINE         reduce using rule 9 (statement -> track .)


state 12

    (17) command -> PLAY . TWOPOINTS playcontent

    TWOPOINTS       shift and go to state 26


state 13

    (10) param -> AMP . EQUAL exp2

    EQUAL           shift and go to state 27


state 14

    (11) param -> DUR . EQUAL exp2

    EQUAL           shift and go to state 28


state 15

    (12) param -> INSTR . EQUAL exp2

    EQUAL           shift and go to state 29


state 16

    (13) param -> TONE . EQUAL exp2

    EQUAL           shift and go to state 30


state 17

    (14) param -> SLEEP . EQUAL exp2

    EQUAL           shift and go to state 31


state 18

    (15) param -> CALL . TWOPOINTS ID

    TWOPOINTS       shift and go to state 32


state 19

    (21) assignation -> VAR . ID EQUAL exp

    ID              shift and go to state 33


state 20

    (44) loop -> REPEAT . INT TWOPOINTS NEWLINE program ENDREPEAT

    INT             shift and go to state 34


state 21

    (45) sequence -> SEQUENCE . ID TWOPOINTS NEWLINE program ENDSEQUENCE

    ID              shift and go to state 35


state 22

    (46) track -> TRACK . ID TWOPOINTS NEWLINE program ENDTRACK

    ID              shift and go to state 36


state 23

    (1) program2 -> START NEWLINE program END .

    $end            reduce using rule 1 (program2 -> START NEWLINE program END .)


state 24

    (2) program -> statement NEWLINE .
    (3) program -> statement NEWLINE . program
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . sequence
    (9) statement -> . track
    (16) command -> . command COMMA param
    (17) command -> . PLAY TWOPOINTS playcontent
    (10) param -> . AMP EQUAL exp2
    (11) param -> . DUR EQUAL exp2
    (12) param -> . INSTR EQUAL exp2
    (13) param -> . TONE EQUAL exp2
    (14) param -> . SLEEP EQUAL exp2
    (15) param -> . CALL TWOPOINTS ID
    (21) assignation -> . VAR ID EQUAL exp
    (44) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (45) sequence -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE
    (46) track -> . TRACK ID TWOPOINTS NEWLINE program ENDTRACK

    END             reduce using rule 2 (program -> statement NEWLINE .)
    ENDREPEAT       reduce using rule 2 (program -> statement NEWLINE .)
    ENDSEQUENCE     reduce using rule 2 (program -> statement NEWLINE .)
    ENDTRACK        reduce using rule 2 (program -> statement NEWLINE .)
    PLAY            shift and go to state 12
    AMP             shift and go to state 13
    DUR             shift and go to state 14
    INSTR           shift and go to state 15
    TONE            shift and go to state 16
    SLEEP           shift and go to state 17
    CALL            shift and go to state 18
    VAR             shift and go to state 19
    REPEAT          shift and go to state 20
    SEQUENCE        shift and go to state 21
    TRACK           shift and go to state 22

    statement                      shift and go to state 5
    program                        shift and go to state 37
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    sequence                       shift and go to state 10
    track                          shift and go to state 11

state 25

    (16) command -> command COMMA . param
    (10) param -> . AMP EQUAL exp2
    (11) param -> . DUR EQUAL exp2
    (12) param -> . INSTR EQUAL exp2
    (13) param -> . TONE EQUAL exp2
    (14) param -> . SLEEP EQUAL exp2
    (15) param -> . CALL TWOPOINTS ID

    AMP             shift and go to state 13
    DUR             shift and go to state 14
    INSTR           shift and go to state 15
    TONE            shift and go to state 16
    SLEEP           shift and go to state 17
    CALL            shift and go to state 18

    param                          shift and go to state 38

state 26

    (17) command -> PLAY TWOPOINTS . playcontent
    (18) playcontent -> . LBRACKET seqexp RBRACKET
    (19) playcontent -> . ID
    (20) playcontent -> . acc
    (39) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 40
    ID              shift and go to state 41
    LPAREN          shift and go to state 43

    playcontent                    shift and go to state 39
    acc                            shift and go to state 42

state 27

    (10) param -> AMP EQUAL . exp2
    (31) exp2 -> . nota rec_op2
    (42) nota -> . INT
    (43) nota -> . ID

    INT             shift and go to state 46
    ID              shift and go to state 47

    exp2                           shift and go to state 44
    nota                           shift and go to state 45

state 28

    (11) param -> DUR EQUAL . exp2
    (31) exp2 -> . nota rec_op2
    (42) nota -> . INT
    (43) nota -> . ID

    INT             shift and go to state 46
    ID              shift and go to state 47

    exp2                           shift and go to state 48
    nota                           shift and go to state 45

state 29

    (12) param -> INSTR EQUAL . exp2
    (31) exp2 -> . nota rec_op2
    (42) nota -> . INT
    (43) nota -> . ID

    INT             shift and go to state 46
    ID              shift and go to state 47

    exp2                           shift and go to state 49
    nota                           shift and go to state 45

state 30

    (13) param -> TONE EQUAL . exp2
    (31) exp2 -> . nota rec_op2
    (42) nota -> . INT
    (43) nota -> . ID

    INT             shift and go to state 46
    ID              shift and go to state 47

    exp2                           shift and go to state 50
    nota                           shift and go to state 45

state 31

    (14) param -> SLEEP EQUAL . exp2
    (31) exp2 -> . nota rec_op2
    (42) nota -> . INT
    (43) nota -> . ID

    INT             shift and go to state 46
    ID              shift and go to state 47

    exp2                           shift and go to state 51
    nota                           shift and go to state 45

state 32

    (15) param -> CALL TWOPOINTS . ID

    ID              shift and go to state 52


state 33

    (21) assignation -> VAR ID . EQUAL exp

    EQUAL           shift and go to state 53


state 34

    (44) loop -> REPEAT INT . TWOPOINTS NEWLINE program ENDREPEAT

    TWOPOINTS       shift and go to state 54


state 35

    (45) sequence -> SEQUENCE ID . TWOPOINTS NEWLINE program ENDSEQUENCE

    TWOPOINTS       shift and go to state 55


state 36

    (46) track -> TRACK ID . TWOPOINTS NEWLINE program ENDTRACK

    TWOPOINTS       shift and go to state 56


state 37

    (3) program -> statement NEWLINE program .

    END             reduce using rule 3 (program -> statement NEWLINE program .)
    ENDREPEAT       reduce using rule 3 (program -> statement NEWLINE program .)
    ENDSEQUENCE     reduce using rule 3 (program -> statement NEWLINE program .)
    ENDTRACK        reduce using rule 3 (program -> statement NEWLINE program .)


state 38

    (16) command -> command COMMA param .

    COMMA           reduce using rule 16 (command -> command COMMA param .)
    NEWLINE         reduce using rule 16 (command -> command COMMA param .)


state 39

    (17) command -> PLAY TWOPOINTS playcontent .

    COMMA           reduce using rule 17 (command -> PLAY TWOPOINTS playcontent .)
    NEWLINE         reduce using rule 17 (command -> PLAY TWOPOINTS playcontent .)


state 40

    (18) playcontent -> LBRACKET . seqexp RBRACKET
    (25) seqexp -> . exp COMMA seqexp
    (26) seqexp -> . exp
    (22) exp -> . LBRACKET seqsound RBRACKET rec_op
    (23) exp -> . nota rec_op
    (24) exp -> . acc rec_op
    (42) nota -> . INT
    (43) nota -> . ID
    (39) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 57
    INT             shift and go to state 46
    ID              shift and go to state 47
    LPAREN          shift and go to state 43

    seqexp                         shift and go to state 58
    exp                            shift and go to state 59
    nota                           shift and go to state 60
    acc                            shift and go to state 61

state 41

    (19) playcontent -> ID .

    COMMA           reduce using rule 19 (playcontent -> ID .)
    NEWLINE         reduce using rule 19 (playcontent -> ID .)


state 42

    (20) playcontent -> acc .

    COMMA           reduce using rule 20 (playcontent -> acc .)
    NEWLINE         reduce using rule 20 (playcontent -> acc .)


state 43

    (39) acc -> LPAREN . seqnotas RPAREN
    (40) seqnotas -> . nota
    (41) seqnotas -> . nota COMMA seqnotas
    (42) nota -> . INT
    (43) nota -> . ID

    INT             shift and go to state 46
    ID              shift and go to state 47

    seqnotas                       shift and go to state 62
    nota                           shift and go to state 63

state 44

    (10) param -> AMP EQUAL exp2 .

    NEWLINE         reduce using rule 10 (param -> AMP EQUAL exp2 .)
    COMMA           reduce using rule 10 (param -> AMP EQUAL exp2 .)


state 45

    (31) exp2 -> nota . rec_op2
    (32) rec_op2 -> .
    (33) rec_op2 -> . SUM exp2
    (34) rec_op2 -> . MINUS exp2

    NEWLINE         reduce using rule 32 (rec_op2 -> .)
    COMMA           reduce using rule 32 (rec_op2 -> .)
    SUM             shift and go to state 65
    MINUS           shift and go to state 66

    rec_op2                        shift and go to state 64

state 46

    (42) nota -> INT .

    SUM             reduce using rule 42 (nota -> INT .)
    MINUS           reduce using rule 42 (nota -> INT .)
    NEWLINE         reduce using rule 42 (nota -> INT .)
    COMMA           reduce using rule 42 (nota -> INT .)
    AMPERSAND       reduce using rule 42 (nota -> INT .)
    RBRACKET        reduce using rule 42 (nota -> INT .)
    RPAREN          reduce using rule 42 (nota -> INT .)


state 47

    (43) nota -> ID .

    SUM             reduce using rule 43 (nota -> ID .)
    MINUS           reduce using rule 43 (nota -> ID .)
    NEWLINE         reduce using rule 43 (nota -> ID .)
    COMMA           reduce using rule 43 (nota -> ID .)
    AMPERSAND       reduce using rule 43 (nota -> ID .)
    RBRACKET        reduce using rule 43 (nota -> ID .)
    RPAREN          reduce using rule 43 (nota -> ID .)


state 48

    (11) param -> DUR EQUAL exp2 .

    NEWLINE         reduce using rule 11 (param -> DUR EQUAL exp2 .)
    COMMA           reduce using rule 11 (param -> DUR EQUAL exp2 .)


state 49

    (12) param -> INSTR EQUAL exp2 .

    NEWLINE         reduce using rule 12 (param -> INSTR EQUAL exp2 .)
    COMMA           reduce using rule 12 (param -> INSTR EQUAL exp2 .)


state 50

    (13) param -> TONE EQUAL exp2 .

    NEWLINE         reduce using rule 13 (param -> TONE EQUAL exp2 .)
    COMMA           reduce using rule 13 (param -> TONE EQUAL exp2 .)


state 51

    (14) param -> SLEEP EQUAL exp2 .

    NEWLINE         reduce using rule 14 (param -> SLEEP EQUAL exp2 .)
    COMMA           reduce using rule 14 (param -> SLEEP EQUAL exp2 .)


state 52

    (15) param -> CALL TWOPOINTS ID .

    NEWLINE         reduce using rule 15 (param -> CALL TWOPOINTS ID .)
    COMMA           reduce using rule 15 (param -> CALL TWOPOINTS ID .)


state 53

    (21) assignation -> VAR ID EQUAL . exp
    (22) exp -> . LBRACKET seqsound RBRACKET rec_op
    (23) exp -> . nota rec_op
    (24) exp -> . acc rec_op
    (42) nota -> . INT
    (43) nota -> . ID
    (39) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 57
    INT             shift and go to state 46
    ID              shift and go to state 47
    LPAREN          shift and go to state 43

    exp                            shift and go to state 67
    nota                           shift and go to state 60
    acc                            shift and go to state 61

state 54

    (44) loop -> REPEAT INT TWOPOINTS . NEWLINE program ENDREPEAT

    NEWLINE         shift and go to state 68


state 55

    (45) sequence -> SEQUENCE ID TWOPOINTS . NEWLINE program ENDSEQUENCE

    NEWLINE         shift and go to state 69


state 56

    (46) track -> TRACK ID TWOPOINTS . NEWLINE program ENDTRACK

    NEWLINE         shift and go to state 70


state 57

    (22) exp -> LBRACKET . seqsound RBRACKET rec_op
    (35) seqsound -> . sound COMMA seqsound
    (36) seqsound -> . sound
    (37) sound -> . acc
    (38) sound -> . nota
    (39) acc -> . LPAREN seqnotas RPAREN
    (42) nota -> . INT
    (43) nota -> . ID

    LPAREN          shift and go to state 43
    INT             shift and go to state 46
    ID              shift and go to state 47

    seqsound                       shift and go to state 71
    sound                          shift and go to state 72
    acc                            shift and go to state 73
    nota                           shift and go to state 74

state 58

    (18) playcontent -> LBRACKET seqexp . RBRACKET

    RBRACKET        shift and go to state 75


state 59

    (25) seqexp -> exp . COMMA seqexp
    (26) seqexp -> exp .

    COMMA           shift and go to state 76
    RBRACKET        reduce using rule 26 (seqexp -> exp .)


state 60

    (23) exp -> nota . rec_op
    (27) rec_op -> .
    (28) rec_op -> . SUM exp
    (29) rec_op -> . MINUS exp
    (30) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 27 (rec_op -> .)
    RBRACKET        reduce using rule 27 (rec_op -> .)
    NEWLINE         reduce using rule 27 (rec_op -> .)
    SUM             shift and go to state 78
    MINUS           shift and go to state 79
    AMPERSAND       shift and go to state 80

    rec_op                         shift and go to state 77

state 61

    (24) exp -> acc . rec_op
    (27) rec_op -> .
    (28) rec_op -> . SUM exp
    (29) rec_op -> . MINUS exp
    (30) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 27 (rec_op -> .)
    RBRACKET        reduce using rule 27 (rec_op -> .)
    NEWLINE         reduce using rule 27 (rec_op -> .)
    SUM             shift and go to state 78
    MINUS           shift and go to state 79
    AMPERSAND       shift and go to state 80

    rec_op                         shift and go to state 81

state 62

    (39) acc -> LPAREN seqnotas . RPAREN

    RPAREN          shift and go to state 82


state 63

    (40) seqnotas -> nota .
    (41) seqnotas -> nota . COMMA seqnotas

    RPAREN          reduce using rule 40 (seqnotas -> nota .)
    COMMA           shift and go to state 83


state 64

    (31) exp2 -> nota rec_op2 .

    NEWLINE         reduce using rule 31 (exp2 -> nota rec_op2 .)
    COMMA           reduce using rule 31 (exp2 -> nota rec_op2 .)


state 65

    (33) rec_op2 -> SUM . exp2
    (31) exp2 -> . nota rec_op2
    (42) nota -> . INT
    (43) nota -> . ID

    INT             shift and go to state 46
    ID              shift and go to state 47

    exp2                           shift and go to state 84
    nota                           shift and go to state 45

state 66

    (34) rec_op2 -> MINUS . exp2
    (31) exp2 -> . nota rec_op2
    (42) nota -> . INT
    (43) nota -> . ID

    INT             shift and go to state 46
    ID              shift and go to state 47

    exp2                           shift and go to state 85
    nota                           shift and go to state 45

state 67

    (21) assignation -> VAR ID EQUAL exp .

    NEWLINE         reduce using rule 21 (assignation -> VAR ID EQUAL exp .)


state 68

    (44) loop -> REPEAT INT TWOPOINTS NEWLINE . program ENDREPEAT
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . sequence
    (9) statement -> . track
    (16) command -> . command COMMA param
    (17) command -> . PLAY TWOPOINTS playcontent
    (10) param -> . AMP EQUAL exp2
    (11) param -> . DUR EQUAL exp2
    (12) param -> . INSTR EQUAL exp2
    (13) param -> . TONE EQUAL exp2
    (14) param -> . SLEEP EQUAL exp2
    (15) param -> . CALL TWOPOINTS ID
    (21) assignation -> . VAR ID EQUAL exp
    (44) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (45) sequence -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE
    (46) track -> . TRACK ID TWOPOINTS NEWLINE program ENDTRACK

    PLAY            shift and go to state 12
    AMP             shift and go to state 13
    DUR             shift and go to state 14
    INSTR           shift and go to state 15
    TONE            shift and go to state 16
    SLEEP           shift and go to state 17
    CALL            shift and go to state 18
    VAR             shift and go to state 19
    REPEAT          shift and go to state 20
    SEQUENCE        shift and go to state 21
    TRACK           shift and go to state 22

    program                        shift and go to state 86
    statement                      shift and go to state 5
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    sequence                       shift and go to state 10
    track                          shift and go to state 11

state 69

    (45) sequence -> SEQUENCE ID TWOPOINTS NEWLINE . program ENDSEQUENCE
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . sequence
    (9) statement -> . track
    (16) command -> . command COMMA param
    (17) command -> . PLAY TWOPOINTS playcontent
    (10) param -> . AMP EQUAL exp2
    (11) param -> . DUR EQUAL exp2
    (12) param -> . INSTR EQUAL exp2
    (13) param -> . TONE EQUAL exp2
    (14) param -> . SLEEP EQUAL exp2
    (15) param -> . CALL TWOPOINTS ID
    (21) assignation -> . VAR ID EQUAL exp
    (44) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (45) sequence -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE
    (46) track -> . TRACK ID TWOPOINTS NEWLINE program ENDTRACK

    PLAY            shift and go to state 12
    AMP             shift and go to state 13
    DUR             shift and go to state 14
    INSTR           shift and go to state 15
    TONE            shift and go to state 16
    SLEEP           shift and go to state 17
    CALL            shift and go to state 18
    VAR             shift and go to state 19
    REPEAT          shift and go to state 20
    SEQUENCE        shift and go to state 21
    TRACK           shift and go to state 22

    program                        shift and go to state 87
    statement                      shift and go to state 5
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    sequence                       shift and go to state 10
    track                          shift and go to state 11

state 70

    (46) track -> TRACK ID TWOPOINTS NEWLINE . program ENDTRACK
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . sequence
    (9) statement -> . track
    (16) command -> . command COMMA param
    (17) command -> . PLAY TWOPOINTS playcontent
    (10) param -> . AMP EQUAL exp2
    (11) param -> . DUR EQUAL exp2
    (12) param -> . INSTR EQUAL exp2
    (13) param -> . TONE EQUAL exp2
    (14) param -> . SLEEP EQUAL exp2
    (15) param -> . CALL TWOPOINTS ID
    (21) assignation -> . VAR ID EQUAL exp
    (44) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (45) sequence -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE
    (46) track -> . TRACK ID TWOPOINTS NEWLINE program ENDTRACK

    PLAY            shift and go to state 12
    AMP             shift and go to state 13
    DUR             shift and go to state 14
    INSTR           shift and go to state 15
    TONE            shift and go to state 16
    SLEEP           shift and go to state 17
    CALL            shift and go to state 18
    VAR             shift and go to state 19
    REPEAT          shift and go to state 20
    SEQUENCE        shift and go to state 21
    TRACK           shift and go to state 22

    program                        shift and go to state 88
    statement                      shift and go to state 5
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    sequence                       shift and go to state 10
    track                          shift and go to state 11

state 71

    (22) exp -> LBRACKET seqsound . RBRACKET rec_op

    RBRACKET        shift and go to state 89


state 72

    (35) seqsound -> sound . COMMA seqsound
    (36) seqsound -> sound .

    COMMA           shift and go to state 90
    RBRACKET        reduce using rule 36 (seqsound -> sound .)


state 73

    (37) sound -> acc .

    COMMA           reduce using rule 37 (sound -> acc .)
    RBRACKET        reduce using rule 37 (sound -> acc .)


state 74

    (38) sound -> nota .

    COMMA           reduce using rule 38 (sound -> nota .)
    RBRACKET        reduce using rule 38 (sound -> nota .)


state 75

    (18) playcontent -> LBRACKET seqexp RBRACKET .

    COMMA           reduce using rule 18 (playcontent -> LBRACKET seqexp RBRACKET .)
    NEWLINE         reduce using rule 18 (playcontent -> LBRACKET seqexp RBRACKET .)


state 76

    (25) seqexp -> exp COMMA . seqexp
    (25) seqexp -> . exp COMMA seqexp
    (26) seqexp -> . exp
    (22) exp -> . LBRACKET seqsound RBRACKET rec_op
    (23) exp -> . nota rec_op
    (24) exp -> . acc rec_op
    (42) nota -> . INT
    (43) nota -> . ID
    (39) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 57
    INT             shift and go to state 46
    ID              shift and go to state 47
    LPAREN          shift and go to state 43

    exp                            shift and go to state 59
    seqexp                         shift and go to state 91
    nota                           shift and go to state 60
    acc                            shift and go to state 61

state 77

    (23) exp -> nota rec_op .

    COMMA           reduce using rule 23 (exp -> nota rec_op .)
    RBRACKET        reduce using rule 23 (exp -> nota rec_op .)
    NEWLINE         reduce using rule 23 (exp -> nota rec_op .)


state 78

    (28) rec_op -> SUM . exp
    (22) exp -> . LBRACKET seqsound RBRACKET rec_op
    (23) exp -> . nota rec_op
    (24) exp -> . acc rec_op
    (42) nota -> . INT
    (43) nota -> . ID
    (39) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 57
    INT             shift and go to state 46
    ID              shift and go to state 47
    LPAREN          shift and go to state 43

    exp                            shift and go to state 92
    nota                           shift and go to state 60
    acc                            shift and go to state 61

state 79

    (29) rec_op -> MINUS . exp
    (22) exp -> . LBRACKET seqsound RBRACKET rec_op
    (23) exp -> . nota rec_op
    (24) exp -> . acc rec_op
    (42) nota -> . INT
    (43) nota -> . ID
    (39) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 57
    INT             shift and go to state 46
    ID              shift and go to state 47
    LPAREN          shift and go to state 43

    exp                            shift and go to state 93
    nota                           shift and go to state 60
    acc                            shift and go to state 61

state 80

    (30) rec_op -> AMPERSAND . exp
    (22) exp -> . LBRACKET seqsound RBRACKET rec_op
    (23) exp -> . nota rec_op
    (24) exp -> . acc rec_op
    (42) nota -> . INT
    (43) nota -> . ID
    (39) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 57
    INT             shift and go to state 46
    ID              shift and go to state 47
    LPAREN          shift and go to state 43

    exp                            shift and go to state 94
    nota                           shift and go to state 60
    acc                            shift and go to state 61

state 81

    (24) exp -> acc rec_op .

    COMMA           reduce using rule 24 (exp -> acc rec_op .)
    RBRACKET        reduce using rule 24 (exp -> acc rec_op .)
    NEWLINE         reduce using rule 24 (exp -> acc rec_op .)


state 82

    (39) acc -> LPAREN seqnotas RPAREN .

    COMMA           reduce using rule 39 (acc -> LPAREN seqnotas RPAREN .)
    NEWLINE         reduce using rule 39 (acc -> LPAREN seqnotas RPAREN .)
    SUM             reduce using rule 39 (acc -> LPAREN seqnotas RPAREN .)
    MINUS           reduce using rule 39 (acc -> LPAREN seqnotas RPAREN .)
    AMPERSAND       reduce using rule 39 (acc -> LPAREN seqnotas RPAREN .)
    RBRACKET        reduce using rule 39 (acc -> LPAREN seqnotas RPAREN .)


state 83

    (41) seqnotas -> nota COMMA . seqnotas
    (40) seqnotas -> . nota
    (41) seqnotas -> . nota COMMA seqnotas
    (42) nota -> . INT
    (43) nota -> . ID

    INT             shift and go to state 46
    ID              shift and go to state 47

    nota                           shift and go to state 63
    seqnotas                       shift and go to state 95

state 84

    (33) rec_op2 -> SUM exp2 .

    NEWLINE         reduce using rule 33 (rec_op2 -> SUM exp2 .)
    COMMA           reduce using rule 33 (rec_op2 -> SUM exp2 .)


state 85

    (34) rec_op2 -> MINUS exp2 .

    NEWLINE         reduce using rule 34 (rec_op2 -> MINUS exp2 .)
    COMMA           reduce using rule 34 (rec_op2 -> MINUS exp2 .)


state 86

    (44) loop -> REPEAT INT TWOPOINTS NEWLINE program . ENDREPEAT

    ENDREPEAT       shift and go to state 96


state 87

    (45) sequence -> SEQUENCE ID TWOPOINTS NEWLINE program . ENDSEQUENCE

    ENDSEQUENCE     shift and go to state 97


state 88

    (46) track -> TRACK ID TWOPOINTS NEWLINE program . ENDTRACK

    ENDTRACK        shift and go to state 98


state 89

    (22) exp -> LBRACKET seqsound RBRACKET . rec_op
    (27) rec_op -> .
    (28) rec_op -> . SUM exp
    (29) rec_op -> . MINUS exp
    (30) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 27 (rec_op -> .)
    RBRACKET        reduce using rule 27 (rec_op -> .)
    NEWLINE         reduce using rule 27 (rec_op -> .)
    SUM             shift and go to state 78
    MINUS           shift and go to state 79
    AMPERSAND       shift and go to state 80

    rec_op                         shift and go to state 99

state 90

    (35) seqsound -> sound COMMA . seqsound
    (35) seqsound -> . sound COMMA seqsound
    (36) seqsound -> . sound
    (37) sound -> . acc
    (38) sound -> . nota
    (39) acc -> . LPAREN seqnotas RPAREN
    (42) nota -> . INT
    (43) nota -> . ID

    LPAREN          shift and go to state 43
    INT             shift and go to state 46
    ID              shift and go to state 47

    sound                          shift and go to state 72
    seqsound                       shift and go to state 100
    acc                            shift and go to state 73
    nota                           shift and go to state 74

state 91

    (25) seqexp -> exp COMMA seqexp .

    RBRACKET        reduce using rule 25 (seqexp -> exp COMMA seqexp .)


state 92

    (28) rec_op -> SUM exp .

    COMMA           reduce using rule 28 (rec_op -> SUM exp .)
    RBRACKET        reduce using rule 28 (rec_op -> SUM exp .)
    NEWLINE         reduce using rule 28 (rec_op -> SUM exp .)


state 93

    (29) rec_op -> MINUS exp .

    COMMA           reduce using rule 29 (rec_op -> MINUS exp .)
    RBRACKET        reduce using rule 29 (rec_op -> MINUS exp .)
    NEWLINE         reduce using rule 29 (rec_op -> MINUS exp .)


state 94

    (30) rec_op -> AMPERSAND exp .

    COMMA           reduce using rule 30 (rec_op -> AMPERSAND exp .)
    RBRACKET        reduce using rule 30 (rec_op -> AMPERSAND exp .)
    NEWLINE         reduce using rule 30 (rec_op -> AMPERSAND exp .)


state 95

    (41) seqnotas -> nota COMMA seqnotas .

    RPAREN          reduce using rule 41 (seqnotas -> nota COMMA seqnotas .)


state 96

    (44) loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .

    NEWLINE         reduce using rule 44 (loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .)


state 97

    (45) sequence -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE .

    NEWLINE         reduce using rule 45 (sequence -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE .)


state 98

    (46) track -> TRACK ID TWOPOINTS NEWLINE program ENDTRACK .

    NEWLINE         reduce using rule 46 (track -> TRACK ID TWOPOINTS NEWLINE program ENDTRACK .)


state 99

    (22) exp -> LBRACKET seqsound RBRACKET rec_op .

    COMMA           reduce using rule 22 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    RBRACKET        reduce using rule 22 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    NEWLINE         reduce using rule 22 (exp -> LBRACKET seqsound RBRACKET rec_op .)


state 100

    (35) seqsound -> sound COMMA seqsound .

    RBRACKET        reduce using rule 35 (seqsound -> sound COMMA seqsound .)

