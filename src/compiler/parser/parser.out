Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MULTIPLY

Grammar

Rule 0     S' -> program2
Rule 1     program2 -> START NEWLINE program END
Rule 2     program -> statement NEWLINE
Rule 3     program -> statement NEWLINE program
Rule 4     statement -> command
Rule 5     statement -> param
Rule 6     statement -> assignation
Rule 7     statement -> loop
Rule 8     param -> AMP TWOPOINTS INT
Rule 9     param -> DUR TWOPOINTS INT
Rule 10    param -> INSTR TWOPOINTS INT
Rule 11    command -> command COMMA param
Rule 12    command -> PLAY TWOPOINTS LBRACKET seqexp RBRACKET
Rule 13    assignation -> VAR ID TWOPOINTS exp
Rule 14    exp -> LBRACKET seqsound RBRACKET rec_op
Rule 15    exp -> nota rec_op
Rule 16    exp -> acc rec_op
Rule 17    seqexp -> exp COMMA seqexp
Rule 18    seqexp -> exp
Rule 19    rec_op -> <empty>
Rule 20    rec_op -> SUM exp
Rule 21    rec_op -> MINUS exp
Rule 22    seqsound -> sound COMMA seqsound
Rule 23    seqsound -> sound
Rule 24    sound -> acc
Rule 25    sound -> nota
Rule 26    acc -> LPAREN seqnotas RPAREN
Rule 27    seqnotas -> nota
Rule 28    seqnotas -> nota COMMA seqnotas
Rule 29    nota -> INT
Rule 30    nota -> ID
Rule 31    loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

Terminals, with rules where they appear

AMP                  : 8
COMMA                : 11 17 22 28
DUR                  : 9
END                  : 1
ENDREPEAT            : 31
ID                   : 13 30
INSTR                : 10
INT                  : 8 9 10 29 31
LBRACKET             : 12 14
LPAREN               : 26
MINUS                : 21
MULTIPLY             : 
NEWLINE              : 1 2 3 31
PLAY                 : 12
RBRACKET             : 12 14
REPEAT               : 31
RPAREN               : 26
START                : 1
SUM                  : 20
TWOPOINTS            : 8 9 10 12 13 31
VAR                  : 13
error                : 

Nonterminals, with rules where they appear

acc                  : 16 24
assignation          : 6
command              : 4 11
exp                  : 13 17 18 20 21
loop                 : 7
nota                 : 15 25 27 28
param                : 5 11
program              : 1 3 31
program2             : 0
rec_op               : 14 15 16
seqexp               : 12 17
seqnotas             : 26 28
seqsound             : 14 22
sound                : 22 23
statement            : 2 3

Parsing method: LALR

state 0

    (0) S' -> . program2
    (1) program2 -> . START NEWLINE program END

    START           shift and go to state 2

    program2                       shift and go to state 1

state 1

    (0) S' -> program2 .



state 2

    (1) program2 -> START . NEWLINE program END

    NEWLINE         shift and go to state 3


state 3

    (1) program2 -> START NEWLINE . program END
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (11) command -> . command COMMA param
    (12) command -> . PLAY TWOPOINTS LBRACKET seqexp RBRACKET
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT
    (13) assignation -> . VAR ID TWOPOINTS exp
    (31) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

    PLAY            shift and go to state 11
    AMP             shift and go to state 6
    DUR             shift and go to state 12
    INSTR           shift and go to state 15
    VAR             shift and go to state 9
    REPEAT          shift and go to state 13

    param                          shift and go to state 4
    program                        shift and go to state 5
    assignation                    shift and go to state 10
    statement                      shift and go to state 8
    loop                           shift and go to state 7
    command                        shift and go to state 14

state 4

    (5) statement -> param .

    NEWLINE         reduce using rule 5 (statement -> param .)


state 5

    (1) program2 -> START NEWLINE program . END

    END             shift and go to state 16


state 6

    (8) param -> AMP . TWOPOINTS INT

    TWOPOINTS       shift and go to state 17


state 7

    (7) statement -> loop .

    NEWLINE         reduce using rule 7 (statement -> loop .)


state 8

    (2) program -> statement . NEWLINE
    (3) program -> statement . NEWLINE program

    NEWLINE         shift and go to state 18


state 9

    (13) assignation -> VAR . ID TWOPOINTS exp

    ID              shift and go to state 19


state 10

    (6) statement -> assignation .

    NEWLINE         reduce using rule 6 (statement -> assignation .)


state 11

    (12) command -> PLAY . TWOPOINTS LBRACKET seqexp RBRACKET

    TWOPOINTS       shift and go to state 20


state 12

    (9) param -> DUR . TWOPOINTS INT

    TWOPOINTS       shift and go to state 21


state 13

    (31) loop -> REPEAT . INT TWOPOINTS NEWLINE program ENDREPEAT

    INT             shift and go to state 22


state 14

    (4) statement -> command .
    (11) command -> command . COMMA param

    NEWLINE         reduce using rule 4 (statement -> command .)
    COMMA           shift and go to state 23


state 15

    (10) param -> INSTR . TWOPOINTS INT

    TWOPOINTS       shift and go to state 24


state 16

    (1) program2 -> START NEWLINE program END .

    $end            reduce using rule 1 (program2 -> START NEWLINE program END .)


state 17

    (8) param -> AMP TWOPOINTS . INT

    INT             shift and go to state 25


state 18

    (2) program -> statement NEWLINE .
    (3) program -> statement NEWLINE . program
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (11) command -> . command COMMA param
    (12) command -> . PLAY TWOPOINTS LBRACKET seqexp RBRACKET
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT
    (13) assignation -> . VAR ID TWOPOINTS exp
    (31) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

    END             reduce using rule 2 (program -> statement NEWLINE .)
    ENDREPEAT       reduce using rule 2 (program -> statement NEWLINE .)
    PLAY            shift and go to state 11
    AMP             shift and go to state 6
    DUR             shift and go to state 12
    INSTR           shift and go to state 15
    VAR             shift and go to state 9
    REPEAT          shift and go to state 13

    param                          shift and go to state 4
    program                        shift and go to state 26
    assignation                    shift and go to state 10
    statement                      shift and go to state 8
    loop                           shift and go to state 7
    command                        shift and go to state 14

state 19

    (13) assignation -> VAR ID . TWOPOINTS exp

    TWOPOINTS       shift and go to state 27


state 20

    (12) command -> PLAY TWOPOINTS . LBRACKET seqexp RBRACKET

    LBRACKET        shift and go to state 28


state 21

    (9) param -> DUR TWOPOINTS . INT

    INT             shift and go to state 29


state 22

    (31) loop -> REPEAT INT . TWOPOINTS NEWLINE program ENDREPEAT

    TWOPOINTS       shift and go to state 30


state 23

    (11) command -> command COMMA . param
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT

    AMP             shift and go to state 6
    DUR             shift and go to state 12
    INSTR           shift and go to state 15

    param                          shift and go to state 31

state 24

    (10) param -> INSTR TWOPOINTS . INT

    INT             shift and go to state 32


state 25

    (8) param -> AMP TWOPOINTS INT .

    COMMA           reduce using rule 8 (param -> AMP TWOPOINTS INT .)
    NEWLINE         reduce using rule 8 (param -> AMP TWOPOINTS INT .)


state 26

    (3) program -> statement NEWLINE program .

    END             reduce using rule 3 (program -> statement NEWLINE program .)
    ENDREPEAT       reduce using rule 3 (program -> statement NEWLINE program .)


state 27

    (13) assignation -> VAR ID TWOPOINTS . exp
    (14) exp -> . LBRACKET seqsound RBRACKET rec_op
    (15) exp -> . nota rec_op
    (16) exp -> . acc rec_op
    (29) nota -> . INT
    (30) nota -> . ID
    (26) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 38
    INT             shift and go to state 33
    ID              shift and go to state 34
    LPAREN          shift and go to state 35

    exp                            shift and go to state 36
    nota                           shift and go to state 39
    acc                            shift and go to state 37

state 28

    (12) command -> PLAY TWOPOINTS LBRACKET . seqexp RBRACKET
    (17) seqexp -> . exp COMMA seqexp
    (18) seqexp -> . exp
    (14) exp -> . LBRACKET seqsound RBRACKET rec_op
    (15) exp -> . nota rec_op
    (16) exp -> . acc rec_op
    (29) nota -> . INT
    (30) nota -> . ID
    (26) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 38
    INT             shift and go to state 33
    ID              shift and go to state 34
    LPAREN          shift and go to state 35

    exp                            shift and go to state 40
    nota                           shift and go to state 39
    seqexp                         shift and go to state 41
    acc                            shift and go to state 37

state 29

    (9) param -> DUR TWOPOINTS INT .

    COMMA           reduce using rule 9 (param -> DUR TWOPOINTS INT .)
    NEWLINE         reduce using rule 9 (param -> DUR TWOPOINTS INT .)


state 30

    (31) loop -> REPEAT INT TWOPOINTS . NEWLINE program ENDREPEAT

    NEWLINE         shift and go to state 42


state 31

    (11) command -> command COMMA param .

    COMMA           reduce using rule 11 (command -> command COMMA param .)
    NEWLINE         reduce using rule 11 (command -> command COMMA param .)


state 32

    (10) param -> INSTR TWOPOINTS INT .

    COMMA           reduce using rule 10 (param -> INSTR TWOPOINTS INT .)
    NEWLINE         reduce using rule 10 (param -> INSTR TWOPOINTS INT .)


state 33

    (29) nota -> INT .

    SUM             reduce using rule 29 (nota -> INT .)
    MINUS           reduce using rule 29 (nota -> INT .)
    NEWLINE         reduce using rule 29 (nota -> INT .)
    COMMA           reduce using rule 29 (nota -> INT .)
    RBRACKET        reduce using rule 29 (nota -> INT .)
    RPAREN          reduce using rule 29 (nota -> INT .)


state 34

    (30) nota -> ID .

    SUM             reduce using rule 30 (nota -> ID .)
    MINUS           reduce using rule 30 (nota -> ID .)
    NEWLINE         reduce using rule 30 (nota -> ID .)
    COMMA           reduce using rule 30 (nota -> ID .)
    RBRACKET        reduce using rule 30 (nota -> ID .)
    RPAREN          reduce using rule 30 (nota -> ID .)


state 35

    (26) acc -> LPAREN . seqnotas RPAREN
    (27) seqnotas -> . nota
    (28) seqnotas -> . nota COMMA seqnotas
    (29) nota -> . INT
    (30) nota -> . ID

    INT             shift and go to state 33
    ID              shift and go to state 34

    nota                           shift and go to state 44
    seqnotas                       shift and go to state 43

state 36

    (13) assignation -> VAR ID TWOPOINTS exp .

    NEWLINE         reduce using rule 13 (assignation -> VAR ID TWOPOINTS exp .)


state 37

    (16) exp -> acc . rec_op
    (19) rec_op -> .
    (20) rec_op -> . SUM exp
    (21) rec_op -> . MINUS exp

    NEWLINE         reduce using rule 19 (rec_op -> .)
    COMMA           reduce using rule 19 (rec_op -> .)
    RBRACKET        reduce using rule 19 (rec_op -> .)
    SUM             shift and go to state 46
    MINUS           shift and go to state 45

    rec_op                         shift and go to state 47

state 38

    (14) exp -> LBRACKET . seqsound RBRACKET rec_op
    (22) seqsound -> . sound COMMA seqsound
    (23) seqsound -> . sound
    (24) sound -> . acc
    (25) sound -> . nota
    (26) acc -> . LPAREN seqnotas RPAREN
    (29) nota -> . INT
    (30) nota -> . ID

    LPAREN          shift and go to state 35
    INT             shift and go to state 33
    ID              shift and go to state 34

    nota                           shift and go to state 50
    seqsound                       shift and go to state 49
    sound                          shift and go to state 48
    acc                            shift and go to state 51

state 39

    (15) exp -> nota . rec_op
    (19) rec_op -> .
    (20) rec_op -> . SUM exp
    (21) rec_op -> . MINUS exp

    NEWLINE         reduce using rule 19 (rec_op -> .)
    COMMA           reduce using rule 19 (rec_op -> .)
    RBRACKET        reduce using rule 19 (rec_op -> .)
    SUM             shift and go to state 46
    MINUS           shift and go to state 45

    rec_op                         shift and go to state 52

state 40

    (17) seqexp -> exp . COMMA seqexp
    (18) seqexp -> exp .

    COMMA           shift and go to state 53
    RBRACKET        reduce using rule 18 (seqexp -> exp .)


state 41

    (12) command -> PLAY TWOPOINTS LBRACKET seqexp . RBRACKET

    RBRACKET        shift and go to state 54


state 42

    (31) loop -> REPEAT INT TWOPOINTS NEWLINE . program ENDREPEAT
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (11) command -> . command COMMA param
    (12) command -> . PLAY TWOPOINTS LBRACKET seqexp RBRACKET
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT
    (13) assignation -> . VAR ID TWOPOINTS exp
    (31) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

    PLAY            shift and go to state 11
    AMP             shift and go to state 6
    DUR             shift and go to state 12
    INSTR           shift and go to state 15
    VAR             shift and go to state 9
    REPEAT          shift and go to state 13

    param                          shift and go to state 4
    program                        shift and go to state 55
    assignation                    shift and go to state 10
    statement                      shift and go to state 8
    loop                           shift and go to state 7
    command                        shift and go to state 14

state 43

    (26) acc -> LPAREN seqnotas . RPAREN

    RPAREN          shift and go to state 56


state 44

    (27) seqnotas -> nota .
    (28) seqnotas -> nota . COMMA seqnotas

    RPAREN          reduce using rule 27 (seqnotas -> nota .)
    COMMA           shift and go to state 57


state 45

    (21) rec_op -> MINUS . exp
    (14) exp -> . LBRACKET seqsound RBRACKET rec_op
    (15) exp -> . nota rec_op
    (16) exp -> . acc rec_op
    (29) nota -> . INT
    (30) nota -> . ID
    (26) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 38
    INT             shift and go to state 33
    ID              shift and go to state 34
    LPAREN          shift and go to state 35

    exp                            shift and go to state 58
    nota                           shift and go to state 39
    acc                            shift and go to state 37

state 46

    (20) rec_op -> SUM . exp
    (14) exp -> . LBRACKET seqsound RBRACKET rec_op
    (15) exp -> . nota rec_op
    (16) exp -> . acc rec_op
    (29) nota -> . INT
    (30) nota -> . ID
    (26) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 38
    INT             shift and go to state 33
    ID              shift and go to state 34
    LPAREN          shift and go to state 35

    exp                            shift and go to state 59
    nota                           shift and go to state 39
    acc                            shift and go to state 37

state 47

    (16) exp -> acc rec_op .

    NEWLINE         reduce using rule 16 (exp -> acc rec_op .)
    COMMA           reduce using rule 16 (exp -> acc rec_op .)
    RBRACKET        reduce using rule 16 (exp -> acc rec_op .)


state 48

    (22) seqsound -> sound . COMMA seqsound
    (23) seqsound -> sound .

    COMMA           shift and go to state 60
    RBRACKET        reduce using rule 23 (seqsound -> sound .)


state 49

    (14) exp -> LBRACKET seqsound . RBRACKET rec_op

    RBRACKET        shift and go to state 61


state 50

    (25) sound -> nota .

    COMMA           reduce using rule 25 (sound -> nota .)
    RBRACKET        reduce using rule 25 (sound -> nota .)


state 51

    (24) sound -> acc .

    COMMA           reduce using rule 24 (sound -> acc .)
    RBRACKET        reduce using rule 24 (sound -> acc .)


state 52

    (15) exp -> nota rec_op .

    NEWLINE         reduce using rule 15 (exp -> nota rec_op .)
    COMMA           reduce using rule 15 (exp -> nota rec_op .)
    RBRACKET        reduce using rule 15 (exp -> nota rec_op .)


state 53

    (17) seqexp -> exp COMMA . seqexp
    (17) seqexp -> . exp COMMA seqexp
    (18) seqexp -> . exp
    (14) exp -> . LBRACKET seqsound RBRACKET rec_op
    (15) exp -> . nota rec_op
    (16) exp -> . acc rec_op
    (29) nota -> . INT
    (30) nota -> . ID
    (26) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 38
    INT             shift and go to state 33
    ID              shift and go to state 34
    LPAREN          shift and go to state 35

    exp                            shift and go to state 40
    nota                           shift and go to state 39
    seqexp                         shift and go to state 62
    acc                            shift and go to state 37

state 54

    (12) command -> PLAY TWOPOINTS LBRACKET seqexp RBRACKET .

    COMMA           reduce using rule 12 (command -> PLAY TWOPOINTS LBRACKET seqexp RBRACKET .)
    NEWLINE         reduce using rule 12 (command -> PLAY TWOPOINTS LBRACKET seqexp RBRACKET .)


state 55

    (31) loop -> REPEAT INT TWOPOINTS NEWLINE program . ENDREPEAT

    ENDREPEAT       shift and go to state 63


state 56

    (26) acc -> LPAREN seqnotas RPAREN .

    SUM             reduce using rule 26 (acc -> LPAREN seqnotas RPAREN .)
    MINUS           reduce using rule 26 (acc -> LPAREN seqnotas RPAREN .)
    COMMA           reduce using rule 26 (acc -> LPAREN seqnotas RPAREN .)
    RBRACKET        reduce using rule 26 (acc -> LPAREN seqnotas RPAREN .)
    NEWLINE         reduce using rule 26 (acc -> LPAREN seqnotas RPAREN .)


state 57

    (28) seqnotas -> nota COMMA . seqnotas
    (27) seqnotas -> . nota
    (28) seqnotas -> . nota COMMA seqnotas
    (29) nota -> . INT
    (30) nota -> . ID

    INT             shift and go to state 33
    ID              shift and go to state 34

    nota                           shift and go to state 44
    seqnotas                       shift and go to state 64

state 58

    (21) rec_op -> MINUS exp .

    NEWLINE         reduce using rule 21 (rec_op -> MINUS exp .)
    COMMA           reduce using rule 21 (rec_op -> MINUS exp .)
    RBRACKET        reduce using rule 21 (rec_op -> MINUS exp .)


state 59

    (20) rec_op -> SUM exp .

    NEWLINE         reduce using rule 20 (rec_op -> SUM exp .)
    COMMA           reduce using rule 20 (rec_op -> SUM exp .)
    RBRACKET        reduce using rule 20 (rec_op -> SUM exp .)


state 60

    (22) seqsound -> sound COMMA . seqsound
    (22) seqsound -> . sound COMMA seqsound
    (23) seqsound -> . sound
    (24) sound -> . acc
    (25) sound -> . nota
    (26) acc -> . LPAREN seqnotas RPAREN
    (29) nota -> . INT
    (30) nota -> . ID

    LPAREN          shift and go to state 35
    INT             shift and go to state 33
    ID              shift and go to state 34

    sound                          shift and go to state 48
    seqsound                       shift and go to state 65
    acc                            shift and go to state 51
    nota                           shift and go to state 50

state 61

    (14) exp -> LBRACKET seqsound RBRACKET . rec_op
    (19) rec_op -> .
    (20) rec_op -> . SUM exp
    (21) rec_op -> . MINUS exp

    NEWLINE         reduce using rule 19 (rec_op -> .)
    COMMA           reduce using rule 19 (rec_op -> .)
    RBRACKET        reduce using rule 19 (rec_op -> .)
    SUM             shift and go to state 46
    MINUS           shift and go to state 45

    rec_op                         shift and go to state 66

state 62

    (17) seqexp -> exp COMMA seqexp .

    RBRACKET        reduce using rule 17 (seqexp -> exp COMMA seqexp .)


state 63

    (31) loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .

    NEWLINE         reduce using rule 31 (loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .)


state 64

    (28) seqnotas -> nota COMMA seqnotas .

    RPAREN          reduce using rule 28 (seqnotas -> nota COMMA seqnotas .)


state 65

    (22) seqsound -> sound COMMA seqsound .

    RBRACKET        reduce using rule 22 (seqsound -> sound COMMA seqsound .)


state 66

    (14) exp -> LBRACKET seqsound RBRACKET rec_op .

    NEWLINE         reduce using rule 14 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    COMMA           reduce using rule 14 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    RBRACKET        reduce using rule 14 (exp -> LBRACKET seqsound RBRACKET rec_op .)

