Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MULTIPLY

Grammar

Rule 0     S' -> program2
Rule 1     program2 -> START NEWLINE program END
Rule 2     program -> statement NEWLINE
Rule 3     program -> statement NEWLINE program
Rule 4     statement -> command
Rule 5     statement -> param
Rule 6     statement -> assignation
Rule 7     statement -> loop
Rule 8     statement -> sequence
Rule 9     statement -> track
Rule 10    param -> AMP EQUAL exp2
Rule 11    param -> DUR EQUAL exp2
Rule 12    param -> INSTR EQUAL exp2
Rule 13    param -> TONE EQUAL exp2
Rule 14    param -> SLEEP EQUAL exp2
Rule 15    param -> CALL TWOPOINTS ID
Rule 16    param -> SYNC
Rule 17    param -> CUE TWOPOINTS ID
Rule 18    command -> command COMMA param
Rule 19    command -> PLAY TWOPOINTS playcontent
Rule 20    playcontent -> LBRACKET seqexp RBRACKET
Rule 21    playcontent -> ID
Rule 22    playcontent -> acc
Rule 23    assignation -> VAR ID EQUAL exp
Rule 24    exp -> LBRACKET seqsound RBRACKET rec_op
Rule 25    exp -> nota rec_op
Rule 26    exp -> acc rec_op
Rule 27    seqexp -> exp COMMA seqexp
Rule 28    seqexp -> exp
Rule 29    rec_op -> <empty>
Rule 30    rec_op -> SUM exp
Rule 31    rec_op -> MINUS exp
Rule 32    rec_op -> AMPERSAND exp
Rule 33    exp2 -> nota rec_op2
Rule 34    rec_op2 -> <empty>
Rule 35    rec_op2 -> SUM exp2
Rule 36    rec_op2 -> MINUS exp2
Rule 37    seqsound -> sound COMMA seqsound
Rule 38    seqsound -> sound
Rule 39    sound -> acc
Rule 40    sound -> nota
Rule 41    acc -> LPAREN seqnotas RPAREN
Rule 42    seqnotas -> nota
Rule 43    seqnotas -> nota COMMA seqnotas
Rule 44    nota -> INT
Rule 45    nota -> ID
Rule 46    loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
Rule 47    sequence -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE
Rule 48    track -> TRACK ID TWOPOINTS NEWLINE program ENDTRACK

Terminals, with rules where they appear

AMP                  : 10
AMPERSAND            : 32
CALL                 : 15
COMMA                : 18 27 37 43
CUE                  : 17
DUR                  : 11
END                  : 1
ENDREPEAT            : 46
ENDSEQUENCE          : 47
ENDTRACK             : 48
EQUAL                : 10 11 12 13 14 23
ID                   : 15 17 21 23 45 47 48
INSTR                : 12
INT                  : 44 46
LBRACKET             : 20 24
LPAREN               : 41
MINUS                : 31 36
MULTIPLY             : 
NEWLINE              : 1 2 3 46 47 48
PLAY                 : 19
RBRACKET             : 20 24
REPEAT               : 46
RPAREN               : 41
SEQUENCE             : 47
SLEEP                : 14
START                : 1
SUM                  : 30 35
SYNC                 : 16
TONE                 : 13
TRACK                : 48
TWOPOINTS            : 15 17 19 46 47 48
VAR                  : 23
error                : 

Nonterminals, with rules where they appear

acc                  : 22 26 39
assignation          : 6
command              : 4 18
exp                  : 23 27 28 30 31 32
exp2                 : 10 11 12 13 14 35 36
loop                 : 7
nota                 : 25 33 40 42 43
param                : 5 18
playcontent          : 19
program              : 1 3 46 47 48
program2             : 0
rec_op               : 24 25 26
rec_op2              : 33
seqexp               : 20 27
seqnotas             : 41 43
seqsound             : 24 37
sequence             : 8
sound                : 37 38
statement            : 2 3
track                : 9

Parsing method: LALR

state 0

    (0) S' -> . program2
    (1) program2 -> . START NEWLINE program END

    START           shift and go to state 2

    program2                       shift and go to state 1

state 1

    (0) S' -> program2 .



state 2

    (1) program2 -> START . NEWLINE program END

    NEWLINE         shift and go to state 3


state 3

    (1) program2 -> START NEWLINE . program END
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . sequence
    (9) statement -> . track
    (18) command -> . command COMMA param
    (19) command -> . PLAY TWOPOINTS playcontent
    (10) param -> . AMP EQUAL exp2
    (11) param -> . DUR EQUAL exp2
    (12) param -> . INSTR EQUAL exp2
    (13) param -> . TONE EQUAL exp2
    (14) param -> . SLEEP EQUAL exp2
    (15) param -> . CALL TWOPOINTS ID
    (16) param -> . SYNC
    (17) param -> . CUE TWOPOINTS ID
    (23) assignation -> . VAR ID EQUAL exp
    (46) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (47) sequence -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE
    (48) track -> . TRACK ID TWOPOINTS NEWLINE program ENDTRACK

    PLAY            shift and go to state 12
    AMP             shift and go to state 13
    DUR             shift and go to state 14
    INSTR           shift and go to state 15
    TONE            shift and go to state 16
    SLEEP           shift and go to state 17
    CALL            shift and go to state 18
    SYNC            shift and go to state 19
    CUE             shift and go to state 20
    VAR             shift and go to state 21
    REPEAT          shift and go to state 22
    SEQUENCE        shift and go to state 23
    TRACK           shift and go to state 24

    program                        shift and go to state 4
    statement                      shift and go to state 5
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    sequence                       shift and go to state 10
    track                          shift and go to state 11

state 4

    (1) program2 -> START NEWLINE program . END

    END             shift and go to state 25


state 5

    (2) program -> statement . NEWLINE
    (3) program -> statement . NEWLINE program

    NEWLINE         shift and go to state 26


state 6

    (4) statement -> command .
    (18) command -> command . COMMA param

    NEWLINE         reduce using rule 4 (statement -> command .)
    COMMA           shift and go to state 27


state 7

    (5) statement -> param .

    NEWLINE         reduce using rule 5 (statement -> param .)


state 8

    (6) statement -> assignation .

    NEWLINE         reduce using rule 6 (statement -> assignation .)


state 9

    (7) statement -> loop .

    NEWLINE         reduce using rule 7 (statement -> loop .)


state 10

    (8) statement -> sequence .

    NEWLINE         reduce using rule 8 (statement -> sequence .)


state 11

    (9) statement -> track .

    NEWLINE         reduce using rule 9 (statement -> track .)


state 12

    (19) command -> PLAY . TWOPOINTS playcontent

    TWOPOINTS       shift and go to state 28


state 13

    (10) param -> AMP . EQUAL exp2

    EQUAL           shift and go to state 29


state 14

    (11) param -> DUR . EQUAL exp2

    EQUAL           shift and go to state 30


state 15

    (12) param -> INSTR . EQUAL exp2

    EQUAL           shift and go to state 31


state 16

    (13) param -> TONE . EQUAL exp2

    EQUAL           shift and go to state 32


state 17

    (14) param -> SLEEP . EQUAL exp2

    EQUAL           shift and go to state 33


state 18

    (15) param -> CALL . TWOPOINTS ID

    TWOPOINTS       shift and go to state 34


state 19

    (16) param -> SYNC .

    NEWLINE         reduce using rule 16 (param -> SYNC .)
    COMMA           reduce using rule 16 (param -> SYNC .)


state 20

    (17) param -> CUE . TWOPOINTS ID

    TWOPOINTS       shift and go to state 35


state 21

    (23) assignation -> VAR . ID EQUAL exp

    ID              shift and go to state 36


state 22

    (46) loop -> REPEAT . INT TWOPOINTS NEWLINE program ENDREPEAT

    INT             shift and go to state 37


state 23

    (47) sequence -> SEQUENCE . ID TWOPOINTS NEWLINE program ENDSEQUENCE

    ID              shift and go to state 38


state 24

    (48) track -> TRACK . ID TWOPOINTS NEWLINE program ENDTRACK

    ID              shift and go to state 39


state 25

    (1) program2 -> START NEWLINE program END .

    $end            reduce using rule 1 (program2 -> START NEWLINE program END .)


state 26

    (2) program -> statement NEWLINE .
    (3) program -> statement NEWLINE . program
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . sequence
    (9) statement -> . track
    (18) command -> . command COMMA param
    (19) command -> . PLAY TWOPOINTS playcontent
    (10) param -> . AMP EQUAL exp2
    (11) param -> . DUR EQUAL exp2
    (12) param -> . INSTR EQUAL exp2
    (13) param -> . TONE EQUAL exp2
    (14) param -> . SLEEP EQUAL exp2
    (15) param -> . CALL TWOPOINTS ID
    (16) param -> . SYNC
    (17) param -> . CUE TWOPOINTS ID
    (23) assignation -> . VAR ID EQUAL exp
    (46) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (47) sequence -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE
    (48) track -> . TRACK ID TWOPOINTS NEWLINE program ENDTRACK

    END             reduce using rule 2 (program -> statement NEWLINE .)
    ENDREPEAT       reduce using rule 2 (program -> statement NEWLINE .)
    ENDSEQUENCE     reduce using rule 2 (program -> statement NEWLINE .)
    ENDTRACK        reduce using rule 2 (program -> statement NEWLINE .)
    PLAY            shift and go to state 12
    AMP             shift and go to state 13
    DUR             shift and go to state 14
    INSTR           shift and go to state 15
    TONE            shift and go to state 16
    SLEEP           shift and go to state 17
    CALL            shift and go to state 18
    SYNC            shift and go to state 19
    CUE             shift and go to state 20
    VAR             shift and go to state 21
    REPEAT          shift and go to state 22
    SEQUENCE        shift and go to state 23
    TRACK           shift and go to state 24

    statement                      shift and go to state 5
    program                        shift and go to state 40
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    sequence                       shift and go to state 10
    track                          shift and go to state 11

state 27

    (18) command -> command COMMA . param
    (10) param -> . AMP EQUAL exp2
    (11) param -> . DUR EQUAL exp2
    (12) param -> . INSTR EQUAL exp2
    (13) param -> . TONE EQUAL exp2
    (14) param -> . SLEEP EQUAL exp2
    (15) param -> . CALL TWOPOINTS ID
    (16) param -> . SYNC
    (17) param -> . CUE TWOPOINTS ID

    AMP             shift and go to state 13
    DUR             shift and go to state 14
    INSTR           shift and go to state 15
    TONE            shift and go to state 16
    SLEEP           shift and go to state 17
    CALL            shift and go to state 18
    SYNC            shift and go to state 19
    CUE             shift and go to state 20

    param                          shift and go to state 41

state 28

    (19) command -> PLAY TWOPOINTS . playcontent
    (20) playcontent -> . LBRACKET seqexp RBRACKET
    (21) playcontent -> . ID
    (22) playcontent -> . acc
    (41) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 43
    ID              shift and go to state 44
    LPAREN          shift and go to state 46

    playcontent                    shift and go to state 42
    acc                            shift and go to state 45

state 29

    (10) param -> AMP EQUAL . exp2
    (33) exp2 -> . nota rec_op2
    (44) nota -> . INT
    (45) nota -> . ID

    INT             shift and go to state 49
    ID              shift and go to state 50

    exp2                           shift and go to state 47
    nota                           shift and go to state 48

state 30

    (11) param -> DUR EQUAL . exp2
    (33) exp2 -> . nota rec_op2
    (44) nota -> . INT
    (45) nota -> . ID

    INT             shift and go to state 49
    ID              shift and go to state 50

    exp2                           shift and go to state 51
    nota                           shift and go to state 48

state 31

    (12) param -> INSTR EQUAL . exp2
    (33) exp2 -> . nota rec_op2
    (44) nota -> . INT
    (45) nota -> . ID

    INT             shift and go to state 49
    ID              shift and go to state 50

    exp2                           shift and go to state 52
    nota                           shift and go to state 48

state 32

    (13) param -> TONE EQUAL . exp2
    (33) exp2 -> . nota rec_op2
    (44) nota -> . INT
    (45) nota -> . ID

    INT             shift and go to state 49
    ID              shift and go to state 50

    exp2                           shift and go to state 53
    nota                           shift and go to state 48

state 33

    (14) param -> SLEEP EQUAL . exp2
    (33) exp2 -> . nota rec_op2
    (44) nota -> . INT
    (45) nota -> . ID

    INT             shift and go to state 49
    ID              shift and go to state 50

    exp2                           shift and go to state 54
    nota                           shift and go to state 48

state 34

    (15) param -> CALL TWOPOINTS . ID

    ID              shift and go to state 55


state 35

    (17) param -> CUE TWOPOINTS . ID

    ID              shift and go to state 56


state 36

    (23) assignation -> VAR ID . EQUAL exp

    EQUAL           shift and go to state 57


state 37

    (46) loop -> REPEAT INT . TWOPOINTS NEWLINE program ENDREPEAT

    TWOPOINTS       shift and go to state 58


state 38

    (47) sequence -> SEQUENCE ID . TWOPOINTS NEWLINE program ENDSEQUENCE

    TWOPOINTS       shift and go to state 59


state 39

    (48) track -> TRACK ID . TWOPOINTS NEWLINE program ENDTRACK

    TWOPOINTS       shift and go to state 60


state 40

    (3) program -> statement NEWLINE program .

    END             reduce using rule 3 (program -> statement NEWLINE program .)
    ENDREPEAT       reduce using rule 3 (program -> statement NEWLINE program .)
    ENDSEQUENCE     reduce using rule 3 (program -> statement NEWLINE program .)
    ENDTRACK        reduce using rule 3 (program -> statement NEWLINE program .)


state 41

    (18) command -> command COMMA param .

    COMMA           reduce using rule 18 (command -> command COMMA param .)
    NEWLINE         reduce using rule 18 (command -> command COMMA param .)


state 42

    (19) command -> PLAY TWOPOINTS playcontent .

    COMMA           reduce using rule 19 (command -> PLAY TWOPOINTS playcontent .)
    NEWLINE         reduce using rule 19 (command -> PLAY TWOPOINTS playcontent .)


state 43

    (20) playcontent -> LBRACKET . seqexp RBRACKET
    (27) seqexp -> . exp COMMA seqexp
    (28) seqexp -> . exp
    (24) exp -> . LBRACKET seqsound RBRACKET rec_op
    (25) exp -> . nota rec_op
    (26) exp -> . acc rec_op
    (44) nota -> . INT
    (45) nota -> . ID
    (41) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 61
    INT             shift and go to state 49
    ID              shift and go to state 50
    LPAREN          shift and go to state 46

    seqexp                         shift and go to state 62
    exp                            shift and go to state 63
    nota                           shift and go to state 64
    acc                            shift and go to state 65

state 44

    (21) playcontent -> ID .

    COMMA           reduce using rule 21 (playcontent -> ID .)
    NEWLINE         reduce using rule 21 (playcontent -> ID .)


state 45

    (22) playcontent -> acc .

    COMMA           reduce using rule 22 (playcontent -> acc .)
    NEWLINE         reduce using rule 22 (playcontent -> acc .)


state 46

    (41) acc -> LPAREN . seqnotas RPAREN
    (42) seqnotas -> . nota
    (43) seqnotas -> . nota COMMA seqnotas
    (44) nota -> . INT
    (45) nota -> . ID

    INT             shift and go to state 49
    ID              shift and go to state 50

    seqnotas                       shift and go to state 66
    nota                           shift and go to state 67

state 47

    (10) param -> AMP EQUAL exp2 .

    NEWLINE         reduce using rule 10 (param -> AMP EQUAL exp2 .)
    COMMA           reduce using rule 10 (param -> AMP EQUAL exp2 .)


state 48

    (33) exp2 -> nota . rec_op2
    (34) rec_op2 -> .
    (35) rec_op2 -> . SUM exp2
    (36) rec_op2 -> . MINUS exp2

    NEWLINE         reduce using rule 34 (rec_op2 -> .)
    COMMA           reduce using rule 34 (rec_op2 -> .)
    SUM             shift and go to state 69
    MINUS           shift and go to state 70

    rec_op2                        shift and go to state 68

state 49

    (44) nota -> INT .

    SUM             reduce using rule 44 (nota -> INT .)
    MINUS           reduce using rule 44 (nota -> INT .)
    NEWLINE         reduce using rule 44 (nota -> INT .)
    COMMA           reduce using rule 44 (nota -> INT .)
    AMPERSAND       reduce using rule 44 (nota -> INT .)
    RBRACKET        reduce using rule 44 (nota -> INT .)
    RPAREN          reduce using rule 44 (nota -> INT .)


state 50

    (45) nota -> ID .

    SUM             reduce using rule 45 (nota -> ID .)
    MINUS           reduce using rule 45 (nota -> ID .)
    NEWLINE         reduce using rule 45 (nota -> ID .)
    COMMA           reduce using rule 45 (nota -> ID .)
    AMPERSAND       reduce using rule 45 (nota -> ID .)
    RBRACKET        reduce using rule 45 (nota -> ID .)
    RPAREN          reduce using rule 45 (nota -> ID .)


state 51

    (11) param -> DUR EQUAL exp2 .

    NEWLINE         reduce using rule 11 (param -> DUR EQUAL exp2 .)
    COMMA           reduce using rule 11 (param -> DUR EQUAL exp2 .)


state 52

    (12) param -> INSTR EQUAL exp2 .

    NEWLINE         reduce using rule 12 (param -> INSTR EQUAL exp2 .)
    COMMA           reduce using rule 12 (param -> INSTR EQUAL exp2 .)


state 53

    (13) param -> TONE EQUAL exp2 .

    NEWLINE         reduce using rule 13 (param -> TONE EQUAL exp2 .)
    COMMA           reduce using rule 13 (param -> TONE EQUAL exp2 .)


state 54

    (14) param -> SLEEP EQUAL exp2 .

    NEWLINE         reduce using rule 14 (param -> SLEEP EQUAL exp2 .)
    COMMA           reduce using rule 14 (param -> SLEEP EQUAL exp2 .)


state 55

    (15) param -> CALL TWOPOINTS ID .

    NEWLINE         reduce using rule 15 (param -> CALL TWOPOINTS ID .)
    COMMA           reduce using rule 15 (param -> CALL TWOPOINTS ID .)


state 56

    (17) param -> CUE TWOPOINTS ID .

    NEWLINE         reduce using rule 17 (param -> CUE TWOPOINTS ID .)
    COMMA           reduce using rule 17 (param -> CUE TWOPOINTS ID .)


state 57

    (23) assignation -> VAR ID EQUAL . exp
    (24) exp -> . LBRACKET seqsound RBRACKET rec_op
    (25) exp -> . nota rec_op
    (26) exp -> . acc rec_op
    (44) nota -> . INT
    (45) nota -> . ID
    (41) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 61
    INT             shift and go to state 49
    ID              shift and go to state 50
    LPAREN          shift and go to state 46

    exp                            shift and go to state 71
    nota                           shift and go to state 64
    acc                            shift and go to state 65

state 58

    (46) loop -> REPEAT INT TWOPOINTS . NEWLINE program ENDREPEAT

    NEWLINE         shift and go to state 72


state 59

    (47) sequence -> SEQUENCE ID TWOPOINTS . NEWLINE program ENDSEQUENCE

    NEWLINE         shift and go to state 73


state 60

    (48) track -> TRACK ID TWOPOINTS . NEWLINE program ENDTRACK

    NEWLINE         shift and go to state 74


state 61

    (24) exp -> LBRACKET . seqsound RBRACKET rec_op
    (37) seqsound -> . sound COMMA seqsound
    (38) seqsound -> . sound
    (39) sound -> . acc
    (40) sound -> . nota
    (41) acc -> . LPAREN seqnotas RPAREN
    (44) nota -> . INT
    (45) nota -> . ID

    LPAREN          shift and go to state 46
    INT             shift and go to state 49
    ID              shift and go to state 50

    seqsound                       shift and go to state 75
    sound                          shift and go to state 76
    acc                            shift and go to state 77
    nota                           shift and go to state 78

state 62

    (20) playcontent -> LBRACKET seqexp . RBRACKET

    RBRACKET        shift and go to state 79


state 63

    (27) seqexp -> exp . COMMA seqexp
    (28) seqexp -> exp .

    COMMA           shift and go to state 80
    RBRACKET        reduce using rule 28 (seqexp -> exp .)


state 64

    (25) exp -> nota . rec_op
    (29) rec_op -> .
    (30) rec_op -> . SUM exp
    (31) rec_op -> . MINUS exp
    (32) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 29 (rec_op -> .)
    RBRACKET        reduce using rule 29 (rec_op -> .)
    NEWLINE         reduce using rule 29 (rec_op -> .)
    SUM             shift and go to state 82
    MINUS           shift and go to state 83
    AMPERSAND       shift and go to state 84

    rec_op                         shift and go to state 81

state 65

    (26) exp -> acc . rec_op
    (29) rec_op -> .
    (30) rec_op -> . SUM exp
    (31) rec_op -> . MINUS exp
    (32) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 29 (rec_op -> .)
    RBRACKET        reduce using rule 29 (rec_op -> .)
    NEWLINE         reduce using rule 29 (rec_op -> .)
    SUM             shift and go to state 82
    MINUS           shift and go to state 83
    AMPERSAND       shift and go to state 84

    rec_op                         shift and go to state 85

state 66

    (41) acc -> LPAREN seqnotas . RPAREN

    RPAREN          shift and go to state 86


state 67

    (42) seqnotas -> nota .
    (43) seqnotas -> nota . COMMA seqnotas

    RPAREN          reduce using rule 42 (seqnotas -> nota .)
    COMMA           shift and go to state 87


state 68

    (33) exp2 -> nota rec_op2 .

    NEWLINE         reduce using rule 33 (exp2 -> nota rec_op2 .)
    COMMA           reduce using rule 33 (exp2 -> nota rec_op2 .)


state 69

    (35) rec_op2 -> SUM . exp2
    (33) exp2 -> . nota rec_op2
    (44) nota -> . INT
    (45) nota -> . ID

    INT             shift and go to state 49
    ID              shift and go to state 50

    exp2                           shift and go to state 88
    nota                           shift and go to state 48

state 70

    (36) rec_op2 -> MINUS . exp2
    (33) exp2 -> . nota rec_op2
    (44) nota -> . INT
    (45) nota -> . ID

    INT             shift and go to state 49
    ID              shift and go to state 50

    exp2                           shift and go to state 89
    nota                           shift and go to state 48

state 71

    (23) assignation -> VAR ID EQUAL exp .

    NEWLINE         reduce using rule 23 (assignation -> VAR ID EQUAL exp .)


state 72

    (46) loop -> REPEAT INT TWOPOINTS NEWLINE . program ENDREPEAT
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . sequence
    (9) statement -> . track
    (18) command -> . command COMMA param
    (19) command -> . PLAY TWOPOINTS playcontent
    (10) param -> . AMP EQUAL exp2
    (11) param -> . DUR EQUAL exp2
    (12) param -> . INSTR EQUAL exp2
    (13) param -> . TONE EQUAL exp2
    (14) param -> . SLEEP EQUAL exp2
    (15) param -> . CALL TWOPOINTS ID
    (16) param -> . SYNC
    (17) param -> . CUE TWOPOINTS ID
    (23) assignation -> . VAR ID EQUAL exp
    (46) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (47) sequence -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE
    (48) track -> . TRACK ID TWOPOINTS NEWLINE program ENDTRACK

    PLAY            shift and go to state 12
    AMP             shift and go to state 13
    DUR             shift and go to state 14
    INSTR           shift and go to state 15
    TONE            shift and go to state 16
    SLEEP           shift and go to state 17
    CALL            shift and go to state 18
    SYNC            shift and go to state 19
    CUE             shift and go to state 20
    VAR             shift and go to state 21
    REPEAT          shift and go to state 22
    SEQUENCE        shift and go to state 23
    TRACK           shift and go to state 24

    program                        shift and go to state 90
    statement                      shift and go to state 5
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    sequence                       shift and go to state 10
    track                          shift and go to state 11

state 73

    (47) sequence -> SEQUENCE ID TWOPOINTS NEWLINE . program ENDSEQUENCE
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . sequence
    (9) statement -> . track
    (18) command -> . command COMMA param
    (19) command -> . PLAY TWOPOINTS playcontent
    (10) param -> . AMP EQUAL exp2
    (11) param -> . DUR EQUAL exp2
    (12) param -> . INSTR EQUAL exp2
    (13) param -> . TONE EQUAL exp2
    (14) param -> . SLEEP EQUAL exp2
    (15) param -> . CALL TWOPOINTS ID
    (16) param -> . SYNC
    (17) param -> . CUE TWOPOINTS ID
    (23) assignation -> . VAR ID EQUAL exp
    (46) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (47) sequence -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE
    (48) track -> . TRACK ID TWOPOINTS NEWLINE program ENDTRACK

    PLAY            shift and go to state 12
    AMP             shift and go to state 13
    DUR             shift and go to state 14
    INSTR           shift and go to state 15
    TONE            shift and go to state 16
    SLEEP           shift and go to state 17
    CALL            shift and go to state 18
    SYNC            shift and go to state 19
    CUE             shift and go to state 20
    VAR             shift and go to state 21
    REPEAT          shift and go to state 22
    SEQUENCE        shift and go to state 23
    TRACK           shift and go to state 24

    program                        shift and go to state 91
    statement                      shift and go to state 5
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    sequence                       shift and go to state 10
    track                          shift and go to state 11

state 74

    (48) track -> TRACK ID TWOPOINTS NEWLINE . program ENDTRACK
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . sequence
    (9) statement -> . track
    (18) command -> . command COMMA param
    (19) command -> . PLAY TWOPOINTS playcontent
    (10) param -> . AMP EQUAL exp2
    (11) param -> . DUR EQUAL exp2
    (12) param -> . INSTR EQUAL exp2
    (13) param -> . TONE EQUAL exp2
    (14) param -> . SLEEP EQUAL exp2
    (15) param -> . CALL TWOPOINTS ID
    (16) param -> . SYNC
    (17) param -> . CUE TWOPOINTS ID
    (23) assignation -> . VAR ID EQUAL exp
    (46) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (47) sequence -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE
    (48) track -> . TRACK ID TWOPOINTS NEWLINE program ENDTRACK

    PLAY            shift and go to state 12
    AMP             shift and go to state 13
    DUR             shift and go to state 14
    INSTR           shift and go to state 15
    TONE            shift and go to state 16
    SLEEP           shift and go to state 17
    CALL            shift and go to state 18
    SYNC            shift and go to state 19
    CUE             shift and go to state 20
    VAR             shift and go to state 21
    REPEAT          shift and go to state 22
    SEQUENCE        shift and go to state 23
    TRACK           shift and go to state 24

    program                        shift and go to state 92
    statement                      shift and go to state 5
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    sequence                       shift and go to state 10
    track                          shift and go to state 11

state 75

    (24) exp -> LBRACKET seqsound . RBRACKET rec_op

    RBRACKET        shift and go to state 93


state 76

    (37) seqsound -> sound . COMMA seqsound
    (38) seqsound -> sound .

    COMMA           shift and go to state 94
    RBRACKET        reduce using rule 38 (seqsound -> sound .)


state 77

    (39) sound -> acc .

    COMMA           reduce using rule 39 (sound -> acc .)
    RBRACKET        reduce using rule 39 (sound -> acc .)


state 78

    (40) sound -> nota .

    COMMA           reduce using rule 40 (sound -> nota .)
    RBRACKET        reduce using rule 40 (sound -> nota .)


state 79

    (20) playcontent -> LBRACKET seqexp RBRACKET .

    COMMA           reduce using rule 20 (playcontent -> LBRACKET seqexp RBRACKET .)
    NEWLINE         reduce using rule 20 (playcontent -> LBRACKET seqexp RBRACKET .)


state 80

    (27) seqexp -> exp COMMA . seqexp
    (27) seqexp -> . exp COMMA seqexp
    (28) seqexp -> . exp
    (24) exp -> . LBRACKET seqsound RBRACKET rec_op
    (25) exp -> . nota rec_op
    (26) exp -> . acc rec_op
    (44) nota -> . INT
    (45) nota -> . ID
    (41) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 61
    INT             shift and go to state 49
    ID              shift and go to state 50
    LPAREN          shift and go to state 46

    exp                            shift and go to state 63
    seqexp                         shift and go to state 95
    nota                           shift and go to state 64
    acc                            shift and go to state 65

state 81

    (25) exp -> nota rec_op .

    COMMA           reduce using rule 25 (exp -> nota rec_op .)
    RBRACKET        reduce using rule 25 (exp -> nota rec_op .)
    NEWLINE         reduce using rule 25 (exp -> nota rec_op .)


state 82

    (30) rec_op -> SUM . exp
    (24) exp -> . LBRACKET seqsound RBRACKET rec_op
    (25) exp -> . nota rec_op
    (26) exp -> . acc rec_op
    (44) nota -> . INT
    (45) nota -> . ID
    (41) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 61
    INT             shift and go to state 49
    ID              shift and go to state 50
    LPAREN          shift and go to state 46

    exp                            shift and go to state 96
    nota                           shift and go to state 64
    acc                            shift and go to state 65

state 83

    (31) rec_op -> MINUS . exp
    (24) exp -> . LBRACKET seqsound RBRACKET rec_op
    (25) exp -> . nota rec_op
    (26) exp -> . acc rec_op
    (44) nota -> . INT
    (45) nota -> . ID
    (41) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 61
    INT             shift and go to state 49
    ID              shift and go to state 50
    LPAREN          shift and go to state 46

    exp                            shift and go to state 97
    nota                           shift and go to state 64
    acc                            shift and go to state 65

state 84

    (32) rec_op -> AMPERSAND . exp
    (24) exp -> . LBRACKET seqsound RBRACKET rec_op
    (25) exp -> . nota rec_op
    (26) exp -> . acc rec_op
    (44) nota -> . INT
    (45) nota -> . ID
    (41) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 61
    INT             shift and go to state 49
    ID              shift and go to state 50
    LPAREN          shift and go to state 46

    exp                            shift and go to state 98
    nota                           shift and go to state 64
    acc                            shift and go to state 65

state 85

    (26) exp -> acc rec_op .

    COMMA           reduce using rule 26 (exp -> acc rec_op .)
    RBRACKET        reduce using rule 26 (exp -> acc rec_op .)
    NEWLINE         reduce using rule 26 (exp -> acc rec_op .)


state 86

    (41) acc -> LPAREN seqnotas RPAREN .

    COMMA           reduce using rule 41 (acc -> LPAREN seqnotas RPAREN .)
    NEWLINE         reduce using rule 41 (acc -> LPAREN seqnotas RPAREN .)
    SUM             reduce using rule 41 (acc -> LPAREN seqnotas RPAREN .)
    MINUS           reduce using rule 41 (acc -> LPAREN seqnotas RPAREN .)
    AMPERSAND       reduce using rule 41 (acc -> LPAREN seqnotas RPAREN .)
    RBRACKET        reduce using rule 41 (acc -> LPAREN seqnotas RPAREN .)


state 87

    (43) seqnotas -> nota COMMA . seqnotas
    (42) seqnotas -> . nota
    (43) seqnotas -> . nota COMMA seqnotas
    (44) nota -> . INT
    (45) nota -> . ID

    INT             shift and go to state 49
    ID              shift and go to state 50

    nota                           shift and go to state 67
    seqnotas                       shift and go to state 99

state 88

    (35) rec_op2 -> SUM exp2 .

    NEWLINE         reduce using rule 35 (rec_op2 -> SUM exp2 .)
    COMMA           reduce using rule 35 (rec_op2 -> SUM exp2 .)


state 89

    (36) rec_op2 -> MINUS exp2 .

    NEWLINE         reduce using rule 36 (rec_op2 -> MINUS exp2 .)
    COMMA           reduce using rule 36 (rec_op2 -> MINUS exp2 .)


state 90

    (46) loop -> REPEAT INT TWOPOINTS NEWLINE program . ENDREPEAT

    ENDREPEAT       shift and go to state 100


state 91

    (47) sequence -> SEQUENCE ID TWOPOINTS NEWLINE program . ENDSEQUENCE

    ENDSEQUENCE     shift and go to state 101


state 92

    (48) track -> TRACK ID TWOPOINTS NEWLINE program . ENDTRACK

    ENDTRACK        shift and go to state 102


state 93

    (24) exp -> LBRACKET seqsound RBRACKET . rec_op
    (29) rec_op -> .
    (30) rec_op -> . SUM exp
    (31) rec_op -> . MINUS exp
    (32) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 29 (rec_op -> .)
    RBRACKET        reduce using rule 29 (rec_op -> .)
    NEWLINE         reduce using rule 29 (rec_op -> .)
    SUM             shift and go to state 82
    MINUS           shift and go to state 83
    AMPERSAND       shift and go to state 84

    rec_op                         shift and go to state 103

state 94

    (37) seqsound -> sound COMMA . seqsound
    (37) seqsound -> . sound COMMA seqsound
    (38) seqsound -> . sound
    (39) sound -> . acc
    (40) sound -> . nota
    (41) acc -> . LPAREN seqnotas RPAREN
    (44) nota -> . INT
    (45) nota -> . ID

    LPAREN          shift and go to state 46
    INT             shift and go to state 49
    ID              shift and go to state 50

    sound                          shift and go to state 76
    seqsound                       shift and go to state 104
    acc                            shift and go to state 77
    nota                           shift and go to state 78

state 95

    (27) seqexp -> exp COMMA seqexp .

    RBRACKET        reduce using rule 27 (seqexp -> exp COMMA seqexp .)


state 96

    (30) rec_op -> SUM exp .

    COMMA           reduce using rule 30 (rec_op -> SUM exp .)
    RBRACKET        reduce using rule 30 (rec_op -> SUM exp .)
    NEWLINE         reduce using rule 30 (rec_op -> SUM exp .)


state 97

    (31) rec_op -> MINUS exp .

    COMMA           reduce using rule 31 (rec_op -> MINUS exp .)
    RBRACKET        reduce using rule 31 (rec_op -> MINUS exp .)
    NEWLINE         reduce using rule 31 (rec_op -> MINUS exp .)


state 98

    (32) rec_op -> AMPERSAND exp .

    COMMA           reduce using rule 32 (rec_op -> AMPERSAND exp .)
    RBRACKET        reduce using rule 32 (rec_op -> AMPERSAND exp .)
    NEWLINE         reduce using rule 32 (rec_op -> AMPERSAND exp .)


state 99

    (43) seqnotas -> nota COMMA seqnotas .

    RPAREN          reduce using rule 43 (seqnotas -> nota COMMA seqnotas .)


state 100

    (46) loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .

    NEWLINE         reduce using rule 46 (loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .)


state 101

    (47) sequence -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE .

    NEWLINE         reduce using rule 47 (sequence -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE .)


state 102

    (48) track -> TRACK ID TWOPOINTS NEWLINE program ENDTRACK .

    NEWLINE         reduce using rule 48 (track -> TRACK ID TWOPOINTS NEWLINE program ENDTRACK .)


state 103

    (24) exp -> LBRACKET seqsound RBRACKET rec_op .

    COMMA           reduce using rule 24 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    RBRACKET        reduce using rule 24 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    NEWLINE         reduce using rule 24 (exp -> LBRACKET seqsound RBRACKET rec_op .)


state 104

    (37) seqsound -> sound COMMA seqsound .

    RBRACKET        reduce using rule 37 (seqsound -> sound COMMA seqsound .)

