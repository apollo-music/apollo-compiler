Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MULTIPLY

Grammar

Rule 0     S' -> program2
Rule 1     program2 -> START NEWLINE program END
Rule 2     program -> statement NEWLINE
Rule 3     program -> statement NEWLINE program
Rule 4     statement -> command
Rule 5     statement -> param
Rule 6     statement -> assignation
Rule 7     statement -> loop
Rule 8     statement -> label
Rule 9     param -> AMP TWOPOINTS INT
Rule 10    param -> DUR TWOPOINTS INT
Rule 11    param -> INSTR TWOPOINTS INT
Rule 12    param -> TONE TWOPOINTS INT
Rule 13    param -> CALL TWOPOINTS ID
Rule 14    command -> command COMMA param
Rule 15    command -> PLAY TWOPOINTS playcontent
Rule 16    playcontent -> LBRACKET seqexp RBRACKET
Rule 17    playcontent -> ID
Rule 18    playcontent -> acc
Rule 19    assignation -> VAR ID TWOPOINTS exp
Rule 20    exp -> LBRACKET seqsound RBRACKET rec_op
Rule 21    exp -> nota rec_op
Rule 22    exp -> acc rec_op
Rule 23    seqexp -> exp COMMA seqexp
Rule 24    seqexp -> exp
Rule 25    rec_op -> <empty>
Rule 26    rec_op -> SUM exp
Rule 27    rec_op -> MINUS exp
Rule 28    rec_op -> AMPERSAND exp
Rule 29    seqsound -> sound COMMA seqsound
Rule 30    seqsound -> sound
Rule 31    sound -> acc
Rule 32    sound -> nota
Rule 33    acc -> LPAREN seqnotas RPAREN
Rule 34    seqnotas -> nota
Rule 35    seqnotas -> nota COMMA seqnotas
Rule 36    nota -> INT
Rule 37    nota -> ID
Rule 38    loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
Rule 39    label -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

Terminals, with rules where they appear

AMP                  : 9
AMPERSAND            : 28
CALL                 : 13
COMMA                : 14 23 29 35
DUR                  : 10
END                  : 1
ENDREPEAT            : 38
ENDSEQUENCE          : 39
ID                   : 13 17 19 37 39
INSTR                : 11
INT                  : 9 10 11 12 36 38
LBRACKET             : 16 20
LPAREN               : 33
MINUS                : 27
MULTIPLY             : 
NEWLINE              : 1 2 3 38 39
PLAY                 : 15
RBRACKET             : 16 20
REPEAT               : 38
RPAREN               : 33
SEQUENCE             : 39
START                : 1
SUM                  : 26
TONE                 : 12
TWOPOINTS            : 9 10 11 12 13 15 19 38 39
VAR                  : 19
error                : 

Nonterminals, with rules where they appear

acc                  : 18 22 31
assignation          : 6
command              : 4 14
exp                  : 19 23 24 26 27 28
label                : 8
loop                 : 7
nota                 : 21 32 34 35
param                : 5 14
playcontent          : 15
program              : 1 3 38 39
program2             : 0
rec_op               : 20 21 22
seqexp               : 16 23
seqnotas             : 33 35
seqsound             : 20 29
sound                : 29 30
statement            : 2 3

Parsing method: LALR

state 0

    (0) S' -> . program2
    (1) program2 -> . START NEWLINE program END

    START           shift and go to state 2

    program2                       shift and go to state 1

state 1

    (0) S' -> program2 .



state 2

    (1) program2 -> START . NEWLINE program END

    NEWLINE         shift and go to state 3


state 3

    (1) program2 -> START NEWLINE . program END
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . label
    (14) command -> . command COMMA param
    (15) command -> . PLAY TWOPOINTS playcontent
    (9) param -> . AMP TWOPOINTS INT
    (10) param -> . DUR TWOPOINTS INT
    (11) param -> . INSTR TWOPOINTS INT
    (12) param -> . TONE TWOPOINTS INT
    (13) param -> . CALL TWOPOINTS ID
    (19) assignation -> . VAR ID TWOPOINTS exp
    (38) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (39) label -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

    PLAY            shift and go to state 9
    AMP             shift and go to state 7
    DUR             shift and go to state 11
    INSTR           shift and go to state 13
    TONE            shift and go to state 12
    CALL            shift and go to state 10
    VAR             shift and go to state 16
    REPEAT          shift and go to state 4
    SEQUENCE        shift and go to state 18

    label                          shift and go to state 15
    assignation                    shift and go to state 17
    loop                           shift and go to state 14
    program                        shift and go to state 5
    param                          shift and go to state 6
    statement                      shift and go to state 8
    command                        shift and go to state 19

state 4

    (38) loop -> REPEAT . INT TWOPOINTS NEWLINE program ENDREPEAT

    INT             shift and go to state 20


state 5

    (1) program2 -> START NEWLINE program . END

    END             shift and go to state 21


state 6

    (5) statement -> param .

    NEWLINE         reduce using rule 5 (statement -> param .)


state 7

    (9) param -> AMP . TWOPOINTS INT

    TWOPOINTS       shift and go to state 22


state 8

    (2) program -> statement . NEWLINE
    (3) program -> statement . NEWLINE program

    NEWLINE         shift and go to state 23


state 9

    (15) command -> PLAY . TWOPOINTS playcontent

    TWOPOINTS       shift and go to state 24


state 10

    (13) param -> CALL . TWOPOINTS ID

    TWOPOINTS       shift and go to state 25


state 11

    (10) param -> DUR . TWOPOINTS INT

    TWOPOINTS       shift and go to state 26


state 12

    (12) param -> TONE . TWOPOINTS INT

    TWOPOINTS       shift and go to state 27


state 13

    (11) param -> INSTR . TWOPOINTS INT

    TWOPOINTS       shift and go to state 28


state 14

    (7) statement -> loop .

    NEWLINE         reduce using rule 7 (statement -> loop .)


state 15

    (8) statement -> label .

    NEWLINE         reduce using rule 8 (statement -> label .)


state 16

    (19) assignation -> VAR . ID TWOPOINTS exp

    ID              shift and go to state 29


state 17

    (6) statement -> assignation .

    NEWLINE         reduce using rule 6 (statement -> assignation .)


state 18

    (39) label -> SEQUENCE . ID TWOPOINTS NEWLINE program ENDSEQUENCE

    ID              shift and go to state 30


state 19

    (4) statement -> command .
    (14) command -> command . COMMA param

    NEWLINE         reduce using rule 4 (statement -> command .)
    COMMA           shift and go to state 31


state 20

    (38) loop -> REPEAT INT . TWOPOINTS NEWLINE program ENDREPEAT

    TWOPOINTS       shift and go to state 32


state 21

    (1) program2 -> START NEWLINE program END .

    $end            reduce using rule 1 (program2 -> START NEWLINE program END .)


state 22

    (9) param -> AMP TWOPOINTS . INT

    INT             shift and go to state 33


state 23

    (2) program -> statement NEWLINE .
    (3) program -> statement NEWLINE . program
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . label
    (14) command -> . command COMMA param
    (15) command -> . PLAY TWOPOINTS playcontent
    (9) param -> . AMP TWOPOINTS INT
    (10) param -> . DUR TWOPOINTS INT
    (11) param -> . INSTR TWOPOINTS INT
    (12) param -> . TONE TWOPOINTS INT
    (13) param -> . CALL TWOPOINTS ID
    (19) assignation -> . VAR ID TWOPOINTS exp
    (38) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (39) label -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

    END             reduce using rule 2 (program -> statement NEWLINE .)
    ENDREPEAT       reduce using rule 2 (program -> statement NEWLINE .)
    ENDSEQUENCE     reduce using rule 2 (program -> statement NEWLINE .)
    PLAY            shift and go to state 9
    AMP             shift and go to state 7
    DUR             shift and go to state 11
    INSTR           shift and go to state 13
    TONE            shift and go to state 12
    CALL            shift and go to state 10
    VAR             shift and go to state 16
    REPEAT          shift and go to state 4
    SEQUENCE        shift and go to state 18

    label                          shift and go to state 15
    assignation                    shift and go to state 17
    loop                           shift and go to state 14
    program                        shift and go to state 34
    param                          shift and go to state 6
    statement                      shift and go to state 8
    command                        shift and go to state 19

state 24

    (15) command -> PLAY TWOPOINTS . playcontent
    (16) playcontent -> . LBRACKET seqexp RBRACKET
    (17) playcontent -> . ID
    (18) playcontent -> . acc
    (33) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 35
    ID              shift and go to state 37
    LPAREN          shift and go to state 36

    playcontent                    shift and go to state 39
    acc                            shift and go to state 38

state 25

    (13) param -> CALL TWOPOINTS . ID

    ID              shift and go to state 40


state 26

    (10) param -> DUR TWOPOINTS . INT

    INT             shift and go to state 41


state 27

    (12) param -> TONE TWOPOINTS . INT

    INT             shift and go to state 42


state 28

    (11) param -> INSTR TWOPOINTS . INT

    INT             shift and go to state 43


state 29

    (19) assignation -> VAR ID . TWOPOINTS exp

    TWOPOINTS       shift and go to state 44


state 30

    (39) label -> SEQUENCE ID . TWOPOINTS NEWLINE program ENDSEQUENCE

    TWOPOINTS       shift and go to state 45


state 31

    (14) command -> command COMMA . param
    (9) param -> . AMP TWOPOINTS INT
    (10) param -> . DUR TWOPOINTS INT
    (11) param -> . INSTR TWOPOINTS INT
    (12) param -> . TONE TWOPOINTS INT
    (13) param -> . CALL TWOPOINTS ID

    AMP             shift and go to state 7
    DUR             shift and go to state 11
    INSTR           shift and go to state 13
    TONE            shift and go to state 12
    CALL            shift and go to state 10

    param                          shift and go to state 46

state 32

    (38) loop -> REPEAT INT TWOPOINTS . NEWLINE program ENDREPEAT

    NEWLINE         shift and go to state 47


state 33

    (9) param -> AMP TWOPOINTS INT .

    COMMA           reduce using rule 9 (param -> AMP TWOPOINTS INT .)
    NEWLINE         reduce using rule 9 (param -> AMP TWOPOINTS INT .)


state 34

    (3) program -> statement NEWLINE program .

    END             reduce using rule 3 (program -> statement NEWLINE program .)
    ENDREPEAT       reduce using rule 3 (program -> statement NEWLINE program .)
    ENDSEQUENCE     reduce using rule 3 (program -> statement NEWLINE program .)


state 35

    (16) playcontent -> LBRACKET . seqexp RBRACKET
    (23) seqexp -> . exp COMMA seqexp
    (24) seqexp -> . exp
    (20) exp -> . LBRACKET seqsound RBRACKET rec_op
    (21) exp -> . nota rec_op
    (22) exp -> . acc rec_op
    (36) nota -> . INT
    (37) nota -> . ID
    (33) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 49
    INT             shift and go to state 52
    ID              shift and go to state 53
    LPAREN          shift and go to state 36

    exp                            shift and go to state 50
    nota                           shift and go to state 51
    acc                            shift and go to state 48
    seqexp                         shift and go to state 54

state 36

    (33) acc -> LPAREN . seqnotas RPAREN
    (34) seqnotas -> . nota
    (35) seqnotas -> . nota COMMA seqnotas
    (36) nota -> . INT
    (37) nota -> . ID

    INT             shift and go to state 52
    ID              shift and go to state 53

    seqnotas                       shift and go to state 55
    nota                           shift and go to state 56

state 37

    (17) playcontent -> ID .

    COMMA           reduce using rule 17 (playcontent -> ID .)
    NEWLINE         reduce using rule 17 (playcontent -> ID .)


state 38

    (18) playcontent -> acc .

    COMMA           reduce using rule 18 (playcontent -> acc .)
    NEWLINE         reduce using rule 18 (playcontent -> acc .)


state 39

    (15) command -> PLAY TWOPOINTS playcontent .

    COMMA           reduce using rule 15 (command -> PLAY TWOPOINTS playcontent .)
    NEWLINE         reduce using rule 15 (command -> PLAY TWOPOINTS playcontent .)


state 40

    (13) param -> CALL TWOPOINTS ID .

    COMMA           reduce using rule 13 (param -> CALL TWOPOINTS ID .)
    NEWLINE         reduce using rule 13 (param -> CALL TWOPOINTS ID .)


state 41

    (10) param -> DUR TWOPOINTS INT .

    COMMA           reduce using rule 10 (param -> DUR TWOPOINTS INT .)
    NEWLINE         reduce using rule 10 (param -> DUR TWOPOINTS INT .)


state 42

    (12) param -> TONE TWOPOINTS INT .

    COMMA           reduce using rule 12 (param -> TONE TWOPOINTS INT .)
    NEWLINE         reduce using rule 12 (param -> TONE TWOPOINTS INT .)


state 43

    (11) param -> INSTR TWOPOINTS INT .

    COMMA           reduce using rule 11 (param -> INSTR TWOPOINTS INT .)
    NEWLINE         reduce using rule 11 (param -> INSTR TWOPOINTS INT .)


state 44

    (19) assignation -> VAR ID TWOPOINTS . exp
    (20) exp -> . LBRACKET seqsound RBRACKET rec_op
    (21) exp -> . nota rec_op
    (22) exp -> . acc rec_op
    (36) nota -> . INT
    (37) nota -> . ID
    (33) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 49
    INT             shift and go to state 52
    ID              shift and go to state 53
    LPAREN          shift and go to state 36

    exp                            shift and go to state 57
    nota                           shift and go to state 51
    acc                            shift and go to state 48

state 45

    (39) label -> SEQUENCE ID TWOPOINTS . NEWLINE program ENDSEQUENCE

    NEWLINE         shift and go to state 58


state 46

    (14) command -> command COMMA param .

    COMMA           reduce using rule 14 (command -> command COMMA param .)
    NEWLINE         reduce using rule 14 (command -> command COMMA param .)


state 47

    (38) loop -> REPEAT INT TWOPOINTS NEWLINE . program ENDREPEAT
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . label
    (14) command -> . command COMMA param
    (15) command -> . PLAY TWOPOINTS playcontent
    (9) param -> . AMP TWOPOINTS INT
    (10) param -> . DUR TWOPOINTS INT
    (11) param -> . INSTR TWOPOINTS INT
    (12) param -> . TONE TWOPOINTS INT
    (13) param -> . CALL TWOPOINTS ID
    (19) assignation -> . VAR ID TWOPOINTS exp
    (38) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (39) label -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

    PLAY            shift and go to state 9
    AMP             shift and go to state 7
    DUR             shift and go to state 11
    INSTR           shift and go to state 13
    TONE            shift and go to state 12
    CALL            shift and go to state 10
    VAR             shift and go to state 16
    REPEAT          shift and go to state 4
    SEQUENCE        shift and go to state 18

    label                          shift and go to state 15
    assignation                    shift and go to state 17
    loop                           shift and go to state 14
    program                        shift and go to state 59
    param                          shift and go to state 6
    statement                      shift and go to state 8
    command                        shift and go to state 19

state 48

    (22) exp -> acc . rec_op
    (25) rec_op -> .
    (26) rec_op -> . SUM exp
    (27) rec_op -> . MINUS exp
    (28) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 25 (rec_op -> .)
    RBRACKET        reduce using rule 25 (rec_op -> .)
    NEWLINE         reduce using rule 25 (rec_op -> .)
    SUM             shift and go to state 62
    MINUS           shift and go to state 61
    AMPERSAND       shift and go to state 60

    rec_op                         shift and go to state 63

state 49

    (20) exp -> LBRACKET . seqsound RBRACKET rec_op
    (29) seqsound -> . sound COMMA seqsound
    (30) seqsound -> . sound
    (31) sound -> . acc
    (32) sound -> . nota
    (33) acc -> . LPAREN seqnotas RPAREN
    (36) nota -> . INT
    (37) nota -> . ID

    LPAREN          shift and go to state 36
    INT             shift and go to state 52
    ID              shift and go to state 53

    nota                           shift and go to state 67
    acc                            shift and go to state 64
    seqsound                       shift and go to state 65
    sound                          shift and go to state 66

state 50

    (23) seqexp -> exp . COMMA seqexp
    (24) seqexp -> exp .

    COMMA           shift and go to state 68
    RBRACKET        reduce using rule 24 (seqexp -> exp .)


state 51

    (21) exp -> nota . rec_op
    (25) rec_op -> .
    (26) rec_op -> . SUM exp
    (27) rec_op -> . MINUS exp
    (28) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 25 (rec_op -> .)
    RBRACKET        reduce using rule 25 (rec_op -> .)
    NEWLINE         reduce using rule 25 (rec_op -> .)
    SUM             shift and go to state 62
    MINUS           shift and go to state 61
    AMPERSAND       shift and go to state 60

    rec_op                         shift and go to state 69

state 52

    (36) nota -> INT .

    SUM             reduce using rule 36 (nota -> INT .)
    MINUS           reduce using rule 36 (nota -> INT .)
    AMPERSAND       reduce using rule 36 (nota -> INT .)
    COMMA           reduce using rule 36 (nota -> INT .)
    RBRACKET        reduce using rule 36 (nota -> INT .)
    NEWLINE         reduce using rule 36 (nota -> INT .)
    RPAREN          reduce using rule 36 (nota -> INT .)


state 53

    (37) nota -> ID .

    SUM             reduce using rule 37 (nota -> ID .)
    MINUS           reduce using rule 37 (nota -> ID .)
    AMPERSAND       reduce using rule 37 (nota -> ID .)
    COMMA           reduce using rule 37 (nota -> ID .)
    RBRACKET        reduce using rule 37 (nota -> ID .)
    NEWLINE         reduce using rule 37 (nota -> ID .)
    RPAREN          reduce using rule 37 (nota -> ID .)


state 54

    (16) playcontent -> LBRACKET seqexp . RBRACKET

    RBRACKET        shift and go to state 70


state 55

    (33) acc -> LPAREN seqnotas . RPAREN

    RPAREN          shift and go to state 71


state 56

    (34) seqnotas -> nota .
    (35) seqnotas -> nota . COMMA seqnotas

    RPAREN          reduce using rule 34 (seqnotas -> nota .)
    COMMA           shift and go to state 72


state 57

    (19) assignation -> VAR ID TWOPOINTS exp .

    NEWLINE         reduce using rule 19 (assignation -> VAR ID TWOPOINTS exp .)


state 58

    (39) label -> SEQUENCE ID TWOPOINTS NEWLINE . program ENDSEQUENCE
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . label
    (14) command -> . command COMMA param
    (15) command -> . PLAY TWOPOINTS playcontent
    (9) param -> . AMP TWOPOINTS INT
    (10) param -> . DUR TWOPOINTS INT
    (11) param -> . INSTR TWOPOINTS INT
    (12) param -> . TONE TWOPOINTS INT
    (13) param -> . CALL TWOPOINTS ID
    (19) assignation -> . VAR ID TWOPOINTS exp
    (38) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (39) label -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

    PLAY            shift and go to state 9
    AMP             shift and go to state 7
    DUR             shift and go to state 11
    INSTR           shift and go to state 13
    TONE            shift and go to state 12
    CALL            shift and go to state 10
    VAR             shift and go to state 16
    REPEAT          shift and go to state 4
    SEQUENCE        shift and go to state 18

    label                          shift and go to state 15
    assignation                    shift and go to state 17
    loop                           shift and go to state 14
    program                        shift and go to state 73
    param                          shift and go to state 6
    statement                      shift and go to state 8
    command                        shift and go to state 19

state 59

    (38) loop -> REPEAT INT TWOPOINTS NEWLINE program . ENDREPEAT

    ENDREPEAT       shift and go to state 74


state 60

    (28) rec_op -> AMPERSAND . exp
    (20) exp -> . LBRACKET seqsound RBRACKET rec_op
    (21) exp -> . nota rec_op
    (22) exp -> . acc rec_op
    (36) nota -> . INT
    (37) nota -> . ID
    (33) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 49
    INT             shift and go to state 52
    ID              shift and go to state 53
    LPAREN          shift and go to state 36

    exp                            shift and go to state 75
    nota                           shift and go to state 51
    acc                            shift and go to state 48

state 61

    (27) rec_op -> MINUS . exp
    (20) exp -> . LBRACKET seqsound RBRACKET rec_op
    (21) exp -> . nota rec_op
    (22) exp -> . acc rec_op
    (36) nota -> . INT
    (37) nota -> . ID
    (33) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 49
    INT             shift and go to state 52
    ID              shift and go to state 53
    LPAREN          shift and go to state 36

    exp                            shift and go to state 76
    nota                           shift and go to state 51
    acc                            shift and go to state 48

state 62

    (26) rec_op -> SUM . exp
    (20) exp -> . LBRACKET seqsound RBRACKET rec_op
    (21) exp -> . nota rec_op
    (22) exp -> . acc rec_op
    (36) nota -> . INT
    (37) nota -> . ID
    (33) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 49
    INT             shift and go to state 52
    ID              shift and go to state 53
    LPAREN          shift and go to state 36

    exp                            shift and go to state 77
    nota                           shift and go to state 51
    acc                            shift and go to state 48

state 63

    (22) exp -> acc rec_op .

    NEWLINE         reduce using rule 22 (exp -> acc rec_op .)
    COMMA           reduce using rule 22 (exp -> acc rec_op .)
    RBRACKET        reduce using rule 22 (exp -> acc rec_op .)


state 64

    (31) sound -> acc .

    COMMA           reduce using rule 31 (sound -> acc .)
    RBRACKET        reduce using rule 31 (sound -> acc .)


state 65

    (20) exp -> LBRACKET seqsound . RBRACKET rec_op

    RBRACKET        shift and go to state 78


state 66

    (29) seqsound -> sound . COMMA seqsound
    (30) seqsound -> sound .

    COMMA           shift and go to state 79
    RBRACKET        reduce using rule 30 (seqsound -> sound .)


state 67

    (32) sound -> nota .

    COMMA           reduce using rule 32 (sound -> nota .)
    RBRACKET        reduce using rule 32 (sound -> nota .)


state 68

    (23) seqexp -> exp COMMA . seqexp
    (23) seqexp -> . exp COMMA seqexp
    (24) seqexp -> . exp
    (20) exp -> . LBRACKET seqsound RBRACKET rec_op
    (21) exp -> . nota rec_op
    (22) exp -> . acc rec_op
    (36) nota -> . INT
    (37) nota -> . ID
    (33) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 49
    INT             shift and go to state 52
    ID              shift and go to state 53
    LPAREN          shift and go to state 36

    exp                            shift and go to state 50
    nota                           shift and go to state 51
    acc                            shift and go to state 48
    seqexp                         shift and go to state 80

state 69

    (21) exp -> nota rec_op .

    NEWLINE         reduce using rule 21 (exp -> nota rec_op .)
    COMMA           reduce using rule 21 (exp -> nota rec_op .)
    RBRACKET        reduce using rule 21 (exp -> nota rec_op .)


state 70

    (16) playcontent -> LBRACKET seqexp RBRACKET .

    COMMA           reduce using rule 16 (playcontent -> LBRACKET seqexp RBRACKET .)
    NEWLINE         reduce using rule 16 (playcontent -> LBRACKET seqexp RBRACKET .)


state 71

    (33) acc -> LPAREN seqnotas RPAREN .

    COMMA           reduce using rule 33 (acc -> LPAREN seqnotas RPAREN .)
    RBRACKET        reduce using rule 33 (acc -> LPAREN seqnotas RPAREN .)
    SUM             reduce using rule 33 (acc -> LPAREN seqnotas RPAREN .)
    MINUS           reduce using rule 33 (acc -> LPAREN seqnotas RPAREN .)
    AMPERSAND       reduce using rule 33 (acc -> LPAREN seqnotas RPAREN .)
    NEWLINE         reduce using rule 33 (acc -> LPAREN seqnotas RPAREN .)


state 72

    (35) seqnotas -> nota COMMA . seqnotas
    (34) seqnotas -> . nota
    (35) seqnotas -> . nota COMMA seqnotas
    (36) nota -> . INT
    (37) nota -> . ID

    INT             shift and go to state 52
    ID              shift and go to state 53

    nota                           shift and go to state 56
    seqnotas                       shift and go to state 81

state 73

    (39) label -> SEQUENCE ID TWOPOINTS NEWLINE program . ENDSEQUENCE

    ENDSEQUENCE     shift and go to state 82


state 74

    (38) loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .

    NEWLINE         reduce using rule 38 (loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .)


state 75

    (28) rec_op -> AMPERSAND exp .

    COMMA           reduce using rule 28 (rec_op -> AMPERSAND exp .)
    RBRACKET        reduce using rule 28 (rec_op -> AMPERSAND exp .)
    NEWLINE         reduce using rule 28 (rec_op -> AMPERSAND exp .)


state 76

    (27) rec_op -> MINUS exp .

    COMMA           reduce using rule 27 (rec_op -> MINUS exp .)
    RBRACKET        reduce using rule 27 (rec_op -> MINUS exp .)
    NEWLINE         reduce using rule 27 (rec_op -> MINUS exp .)


state 77

    (26) rec_op -> SUM exp .

    COMMA           reduce using rule 26 (rec_op -> SUM exp .)
    RBRACKET        reduce using rule 26 (rec_op -> SUM exp .)
    NEWLINE         reduce using rule 26 (rec_op -> SUM exp .)


state 78

    (20) exp -> LBRACKET seqsound RBRACKET . rec_op
    (25) rec_op -> .
    (26) rec_op -> . SUM exp
    (27) rec_op -> . MINUS exp
    (28) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 25 (rec_op -> .)
    RBRACKET        reduce using rule 25 (rec_op -> .)
    NEWLINE         reduce using rule 25 (rec_op -> .)
    SUM             shift and go to state 62
    MINUS           shift and go to state 61
    AMPERSAND       shift and go to state 60

    rec_op                         shift and go to state 83

state 79

    (29) seqsound -> sound COMMA . seqsound
    (29) seqsound -> . sound COMMA seqsound
    (30) seqsound -> . sound
    (31) sound -> . acc
    (32) sound -> . nota
    (33) acc -> . LPAREN seqnotas RPAREN
    (36) nota -> . INT
    (37) nota -> . ID

    LPAREN          shift and go to state 36
    INT             shift and go to state 52
    ID              shift and go to state 53

    nota                           shift and go to state 67
    acc                            shift and go to state 64
    seqsound                       shift and go to state 84
    sound                          shift and go to state 66

state 80

    (23) seqexp -> exp COMMA seqexp .

    RBRACKET        reduce using rule 23 (seqexp -> exp COMMA seqexp .)


state 81

    (35) seqnotas -> nota COMMA seqnotas .

    RPAREN          reduce using rule 35 (seqnotas -> nota COMMA seqnotas .)


state 82

    (39) label -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE .

    NEWLINE         reduce using rule 39 (label -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE .)


state 83

    (20) exp -> LBRACKET seqsound RBRACKET rec_op .

    NEWLINE         reduce using rule 20 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    COMMA           reduce using rule 20 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    RBRACKET        reduce using rule 20 (exp -> LBRACKET seqsound RBRACKET rec_op .)


state 84

    (29) seqsound -> sound COMMA seqsound .

    RBRACKET        reduce using rule 29 (seqsound -> sound COMMA seqsound .)

