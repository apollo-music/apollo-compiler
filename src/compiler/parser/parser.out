Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MULTIPLY

Grammar

Rule 0     S' -> program2
Rule 1     program2 -> START NEWLINE program END
Rule 2     program -> statement NEWLINE
Rule 3     program -> statement NEWLINE program
Rule 4     statement -> command
Rule 5     statement -> param
Rule 6     statement -> assignation
Rule 7     statement -> loop
Rule 8     statement -> label
Rule 9     param -> AMP TWOPOINTS INT
Rule 10    param -> DUR TWOPOINTS INT
Rule 11    param -> INSTR TWOPOINTS INT
Rule 12    param -> TONE TWOPOINTS INT
Rule 13    command -> command COMMA param
Rule 14    command -> PLAY TWOPOINTS playcontent
Rule 15    playcontent -> LBRACKET seqexp RBRACKET
Rule 16    playcontent -> ID
Rule 17    playcontent -> acc
Rule 18    assignation -> VAR ID TWOPOINTS exp
Rule 19    exp -> LBRACKET seqsound RBRACKET rec_op
Rule 20    exp -> nota rec_op
Rule 21    exp -> acc rec_op
Rule 22    seqexp -> exp COMMA seqexp
Rule 23    seqexp -> exp
Rule 24    rec_op -> <empty>
Rule 25    rec_op -> SUM exp
Rule 26    rec_op -> MINUS exp
Rule 27    rec_op -> AMPERSAND exp
Rule 28    seqsound -> sound COMMA seqsound
Rule 29    seqsound -> sound
Rule 30    sound -> acc
Rule 31    sound -> nota
Rule 32    acc -> LPAREN seqnotas RPAREN
Rule 33    seqnotas -> nota
Rule 34    seqnotas -> nota COMMA seqnotas
Rule 35    nota -> INT
Rule 36    nota -> ID
Rule 37    loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
Rule 38    label -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

Terminals, with rules where they appear

AMP                  : 9
AMPERSAND            : 27
COMMA                : 13 22 28 34
DUR                  : 10
END                  : 1
ENDREPEAT            : 37
ENDSEQUENCE          : 38
ID                   : 16 18 36 38
INSTR                : 11
INT                  : 9 10 11 12 35 37
LBRACKET             : 15 19
LPAREN               : 32
MINUS                : 26
MULTIPLY             : 
NEWLINE              : 1 2 3 37 38
PLAY                 : 14
RBRACKET             : 15 19
REPEAT               : 37
RPAREN               : 32
SEQUENCE             : 38
START                : 1
SUM                  : 25
TONE                 : 12
TWOPOINTS            : 9 10 11 12 14 18 37 38
VAR                  : 18
error                : 

Nonterminals, with rules where they appear

acc                  : 17 21 30
assignation          : 6
command              : 4 13
exp                  : 18 22 23 25 26 27
label                : 8
loop                 : 7
nota                 : 20 31 33 34
param                : 5 13
playcontent          : 14
program              : 1 3 37 38
program2             : 0
rec_op               : 19 20 21
seqexp               : 15 22
seqnotas             : 32 34
seqsound             : 19 28
sound                : 28 29
statement            : 2 3

Parsing method: LALR

state 0

    (0) S' -> . program2
    (1) program2 -> . START NEWLINE program END

    START           shift and go to state 2

    program2                       shift and go to state 1

state 1

    (0) S' -> program2 .



state 2

    (1) program2 -> START . NEWLINE program END

    NEWLINE         shift and go to state 3


state 3

    (1) program2 -> START NEWLINE . program END
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . label
    (13) command -> . command COMMA param
    (14) command -> . PLAY TWOPOINTS playcontent
    (9) param -> . AMP TWOPOINTS INT
    (10) param -> . DUR TWOPOINTS INT
    (11) param -> . INSTR TWOPOINTS INT
    (12) param -> . TONE TWOPOINTS INT
    (18) assignation -> . VAR ID TWOPOINTS exp
    (37) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (38) label -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

    PLAY            shift and go to state 8
    AMP             shift and go to state 15
    DUR             shift and go to state 4
    INSTR           shift and go to state 13
    TONE            shift and go to state 17
    VAR             shift and go to state 18
    REPEAT          shift and go to state 10
    SEQUENCE        shift and go to state 14

    loop                           shift and go to state 5
    label                          shift and go to state 9
    param                          shift and go to state 16
    assignation                    shift and go to state 11
    command                        shift and go to state 12
    program                        shift and go to state 6
    statement                      shift and go to state 7

state 4

    (10) param -> DUR . TWOPOINTS INT

    TWOPOINTS       shift and go to state 19


state 5

    (7) statement -> loop .

    NEWLINE         reduce using rule 7 (statement -> loop .)


state 6

    (1) program2 -> START NEWLINE program . END

    END             shift and go to state 20


state 7

    (2) program -> statement . NEWLINE
    (3) program -> statement . NEWLINE program

    NEWLINE         shift and go to state 21


state 8

    (14) command -> PLAY . TWOPOINTS playcontent

    TWOPOINTS       shift and go to state 22


state 9

    (8) statement -> label .

    NEWLINE         reduce using rule 8 (statement -> label .)


state 10

    (37) loop -> REPEAT . INT TWOPOINTS NEWLINE program ENDREPEAT

    INT             shift and go to state 23


state 11

    (6) statement -> assignation .

    NEWLINE         reduce using rule 6 (statement -> assignation .)


state 12

    (4) statement -> command .
    (13) command -> command . COMMA param

    NEWLINE         reduce using rule 4 (statement -> command .)
    COMMA           shift and go to state 24


state 13

    (11) param -> INSTR . TWOPOINTS INT

    TWOPOINTS       shift and go to state 25


state 14

    (38) label -> SEQUENCE . ID TWOPOINTS NEWLINE program ENDSEQUENCE

    ID              shift and go to state 26


state 15

    (9) param -> AMP . TWOPOINTS INT

    TWOPOINTS       shift and go to state 27


state 16

    (5) statement -> param .

    NEWLINE         reduce using rule 5 (statement -> param .)


state 17

    (12) param -> TONE . TWOPOINTS INT

    TWOPOINTS       shift and go to state 28


state 18

    (18) assignation -> VAR . ID TWOPOINTS exp

    ID              shift and go to state 29


state 19

    (10) param -> DUR TWOPOINTS . INT

    INT             shift and go to state 30


state 20

    (1) program2 -> START NEWLINE program END .

    $end            reduce using rule 1 (program2 -> START NEWLINE program END .)


state 21

    (2) program -> statement NEWLINE .
    (3) program -> statement NEWLINE . program
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . label
    (13) command -> . command COMMA param
    (14) command -> . PLAY TWOPOINTS playcontent
    (9) param -> . AMP TWOPOINTS INT
    (10) param -> . DUR TWOPOINTS INT
    (11) param -> . INSTR TWOPOINTS INT
    (12) param -> . TONE TWOPOINTS INT
    (18) assignation -> . VAR ID TWOPOINTS exp
    (37) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (38) label -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

    ENDSEQUENCE     reduce using rule 2 (program -> statement NEWLINE .)
    ENDREPEAT       reduce using rule 2 (program -> statement NEWLINE .)
    END             reduce using rule 2 (program -> statement NEWLINE .)
    PLAY            shift and go to state 8
    AMP             shift and go to state 15
    DUR             shift and go to state 4
    INSTR           shift and go to state 13
    TONE            shift and go to state 17
    VAR             shift and go to state 18
    REPEAT          shift and go to state 10
    SEQUENCE        shift and go to state 14

    loop                           shift and go to state 5
    label                          shift and go to state 9
    param                          shift and go to state 16
    assignation                    shift and go to state 11
    command                        shift and go to state 12
    program                        shift and go to state 31
    statement                      shift and go to state 7

state 22

    (14) command -> PLAY TWOPOINTS . playcontent
    (15) playcontent -> . LBRACKET seqexp RBRACKET
    (16) playcontent -> . ID
    (17) playcontent -> . acc
    (32) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 36
    ID              shift and go to state 32
    LPAREN          shift and go to state 35

    acc                            shift and go to state 34
    playcontent                    shift and go to state 33

state 23

    (37) loop -> REPEAT INT . TWOPOINTS NEWLINE program ENDREPEAT

    TWOPOINTS       shift and go to state 37


state 24

    (13) command -> command COMMA . param
    (9) param -> . AMP TWOPOINTS INT
    (10) param -> . DUR TWOPOINTS INT
    (11) param -> . INSTR TWOPOINTS INT
    (12) param -> . TONE TWOPOINTS INT

    AMP             shift and go to state 15
    DUR             shift and go to state 4
    INSTR           shift and go to state 13
    TONE            shift and go to state 17

    param                          shift and go to state 38

state 25

    (11) param -> INSTR TWOPOINTS . INT

    INT             shift and go to state 39


state 26

    (38) label -> SEQUENCE ID . TWOPOINTS NEWLINE program ENDSEQUENCE

    TWOPOINTS       shift and go to state 40


state 27

    (9) param -> AMP TWOPOINTS . INT

    INT             shift and go to state 41


state 28

    (12) param -> TONE TWOPOINTS . INT

    INT             shift and go to state 42


state 29

    (18) assignation -> VAR ID . TWOPOINTS exp

    TWOPOINTS       shift and go to state 43


state 30

    (10) param -> DUR TWOPOINTS INT .

    NEWLINE         reduce using rule 10 (param -> DUR TWOPOINTS INT .)
    COMMA           reduce using rule 10 (param -> DUR TWOPOINTS INT .)


state 31

    (3) program -> statement NEWLINE program .

    ENDSEQUENCE     reduce using rule 3 (program -> statement NEWLINE program .)
    ENDREPEAT       reduce using rule 3 (program -> statement NEWLINE program .)
    END             reduce using rule 3 (program -> statement NEWLINE program .)


state 32

    (16) playcontent -> ID .

    COMMA           reduce using rule 16 (playcontent -> ID .)
    NEWLINE         reduce using rule 16 (playcontent -> ID .)


state 33

    (14) command -> PLAY TWOPOINTS playcontent .

    COMMA           reduce using rule 14 (command -> PLAY TWOPOINTS playcontent .)
    NEWLINE         reduce using rule 14 (command -> PLAY TWOPOINTS playcontent .)


state 34

    (17) playcontent -> acc .

    COMMA           reduce using rule 17 (playcontent -> acc .)
    NEWLINE         reduce using rule 17 (playcontent -> acc .)


state 35

    (32) acc -> LPAREN . seqnotas RPAREN
    (33) seqnotas -> . nota
    (34) seqnotas -> . nota COMMA seqnotas
    (35) nota -> . INT
    (36) nota -> . ID

    INT             shift and go to state 46
    ID              shift and go to state 44

    nota                           shift and go to state 45
    seqnotas                       shift and go to state 47

state 36

    (15) playcontent -> LBRACKET . seqexp RBRACKET
    (22) seqexp -> . exp COMMA seqexp
    (23) seqexp -> . exp
    (19) exp -> . LBRACKET seqsound RBRACKET rec_op
    (20) exp -> . nota rec_op
    (21) exp -> . acc rec_op
    (35) nota -> . INT
    (36) nota -> . ID
    (32) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 52
    INT             shift and go to state 46
    ID              shift and go to state 44
    LPAREN          shift and go to state 35

    nota                           shift and go to state 48
    exp                            shift and go to state 50
    seqexp                         shift and go to state 49
    acc                            shift and go to state 51

state 37

    (37) loop -> REPEAT INT TWOPOINTS . NEWLINE program ENDREPEAT

    NEWLINE         shift and go to state 53


state 38

    (13) command -> command COMMA param .

    COMMA           reduce using rule 13 (command -> command COMMA param .)
    NEWLINE         reduce using rule 13 (command -> command COMMA param .)


state 39

    (11) param -> INSTR TWOPOINTS INT .

    NEWLINE         reduce using rule 11 (param -> INSTR TWOPOINTS INT .)
    COMMA           reduce using rule 11 (param -> INSTR TWOPOINTS INT .)


state 40

    (38) label -> SEQUENCE ID TWOPOINTS . NEWLINE program ENDSEQUENCE

    NEWLINE         shift and go to state 54


state 41

    (9) param -> AMP TWOPOINTS INT .

    NEWLINE         reduce using rule 9 (param -> AMP TWOPOINTS INT .)
    COMMA           reduce using rule 9 (param -> AMP TWOPOINTS INT .)


state 42

    (12) param -> TONE TWOPOINTS INT .

    NEWLINE         reduce using rule 12 (param -> TONE TWOPOINTS INT .)
    COMMA           reduce using rule 12 (param -> TONE TWOPOINTS INT .)


state 43

    (18) assignation -> VAR ID TWOPOINTS . exp
    (19) exp -> . LBRACKET seqsound RBRACKET rec_op
    (20) exp -> . nota rec_op
    (21) exp -> . acc rec_op
    (35) nota -> . INT
    (36) nota -> . ID
    (32) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 52
    INT             shift and go to state 46
    ID              shift and go to state 44
    LPAREN          shift and go to state 35

    nota                           shift and go to state 48
    acc                            shift and go to state 51
    exp                            shift and go to state 55

state 44

    (36) nota -> ID .

    COMMA           reduce using rule 36 (nota -> ID .)
    RBRACKET        reduce using rule 36 (nota -> ID .)
    SUM             reduce using rule 36 (nota -> ID .)
    MINUS           reduce using rule 36 (nota -> ID .)
    AMPERSAND       reduce using rule 36 (nota -> ID .)
    NEWLINE         reduce using rule 36 (nota -> ID .)
    RPAREN          reduce using rule 36 (nota -> ID .)


state 45

    (33) seqnotas -> nota .
    (34) seqnotas -> nota . COMMA seqnotas

    RPAREN          reduce using rule 33 (seqnotas -> nota .)
    COMMA           shift and go to state 56


state 46

    (35) nota -> INT .

    COMMA           reduce using rule 35 (nota -> INT .)
    RBRACKET        reduce using rule 35 (nota -> INT .)
    SUM             reduce using rule 35 (nota -> INT .)
    MINUS           reduce using rule 35 (nota -> INT .)
    AMPERSAND       reduce using rule 35 (nota -> INT .)
    NEWLINE         reduce using rule 35 (nota -> INT .)
    RPAREN          reduce using rule 35 (nota -> INT .)


state 47

    (32) acc -> LPAREN seqnotas . RPAREN

    RPAREN          shift and go to state 57


state 48

    (20) exp -> nota . rec_op
    (24) rec_op -> .
    (25) rec_op -> . SUM exp
    (26) rec_op -> . MINUS exp
    (27) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 24 (rec_op -> .)
    RBRACKET        reduce using rule 24 (rec_op -> .)
    NEWLINE         reduce using rule 24 (rec_op -> .)
    SUM             shift and go to state 60
    MINUS           shift and go to state 61
    AMPERSAND       shift and go to state 58

    rec_op                         shift and go to state 59

state 49

    (15) playcontent -> LBRACKET seqexp . RBRACKET

    RBRACKET        shift and go to state 62


state 50

    (22) seqexp -> exp . COMMA seqexp
    (23) seqexp -> exp .

    COMMA           shift and go to state 63
    RBRACKET        reduce using rule 23 (seqexp -> exp .)


state 51

    (21) exp -> acc . rec_op
    (24) rec_op -> .
    (25) rec_op -> . SUM exp
    (26) rec_op -> . MINUS exp
    (27) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 24 (rec_op -> .)
    RBRACKET        reduce using rule 24 (rec_op -> .)
    NEWLINE         reduce using rule 24 (rec_op -> .)
    SUM             shift and go to state 60
    MINUS           shift and go to state 61
    AMPERSAND       shift and go to state 58

    rec_op                         shift and go to state 64

state 52

    (19) exp -> LBRACKET . seqsound RBRACKET rec_op
    (28) seqsound -> . sound COMMA seqsound
    (29) seqsound -> . sound
    (30) sound -> . acc
    (31) sound -> . nota
    (32) acc -> . LPAREN seqnotas RPAREN
    (35) nota -> . INT
    (36) nota -> . ID

    LPAREN          shift and go to state 35
    INT             shift and go to state 46
    ID              shift and go to state 44

    sound                          shift and go to state 65
    nota                           shift and go to state 66
    seqsound                       shift and go to state 67
    acc                            shift and go to state 68

state 53

    (37) loop -> REPEAT INT TWOPOINTS NEWLINE . program ENDREPEAT
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . label
    (13) command -> . command COMMA param
    (14) command -> . PLAY TWOPOINTS playcontent
    (9) param -> . AMP TWOPOINTS INT
    (10) param -> . DUR TWOPOINTS INT
    (11) param -> . INSTR TWOPOINTS INT
    (12) param -> . TONE TWOPOINTS INT
    (18) assignation -> . VAR ID TWOPOINTS exp
    (37) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (38) label -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

    PLAY            shift and go to state 8
    AMP             shift and go to state 15
    DUR             shift and go to state 4
    INSTR           shift and go to state 13
    TONE            shift and go to state 17
    VAR             shift and go to state 18
    REPEAT          shift and go to state 10
    SEQUENCE        shift and go to state 14

    loop                           shift and go to state 5
    label                          shift and go to state 9
    param                          shift and go to state 16
    assignation                    shift and go to state 11
    command                        shift and go to state 12
    program                        shift and go to state 69
    statement                      shift and go to state 7

state 54

    (38) label -> SEQUENCE ID TWOPOINTS NEWLINE . program ENDSEQUENCE
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . label
    (13) command -> . command COMMA param
    (14) command -> . PLAY TWOPOINTS playcontent
    (9) param -> . AMP TWOPOINTS INT
    (10) param -> . DUR TWOPOINTS INT
    (11) param -> . INSTR TWOPOINTS INT
    (12) param -> . TONE TWOPOINTS INT
    (18) assignation -> . VAR ID TWOPOINTS exp
    (37) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (38) label -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

    PLAY            shift and go to state 8
    AMP             shift and go to state 15
    DUR             shift and go to state 4
    INSTR           shift and go to state 13
    TONE            shift and go to state 17
    VAR             shift and go to state 18
    REPEAT          shift and go to state 10
    SEQUENCE        shift and go to state 14

    loop                           shift and go to state 5
    label                          shift and go to state 9
    param                          shift and go to state 16
    assignation                    shift and go to state 11
    command                        shift and go to state 12
    program                        shift and go to state 70
    statement                      shift and go to state 7

state 55

    (18) assignation -> VAR ID TWOPOINTS exp .

    NEWLINE         reduce using rule 18 (assignation -> VAR ID TWOPOINTS exp .)


state 56

    (34) seqnotas -> nota COMMA . seqnotas
    (33) seqnotas -> . nota
    (34) seqnotas -> . nota COMMA seqnotas
    (35) nota -> . INT
    (36) nota -> . ID

    INT             shift and go to state 46
    ID              shift and go to state 44

    nota                           shift and go to state 45
    seqnotas                       shift and go to state 71

state 57

    (32) acc -> LPAREN seqnotas RPAREN .

    SUM             reduce using rule 32 (acc -> LPAREN seqnotas RPAREN .)
    MINUS           reduce using rule 32 (acc -> LPAREN seqnotas RPAREN .)
    AMPERSAND       reduce using rule 32 (acc -> LPAREN seqnotas RPAREN .)
    COMMA           reduce using rule 32 (acc -> LPAREN seqnotas RPAREN .)
    RBRACKET        reduce using rule 32 (acc -> LPAREN seqnotas RPAREN .)
    NEWLINE         reduce using rule 32 (acc -> LPAREN seqnotas RPAREN .)


state 58

    (27) rec_op -> AMPERSAND . exp
    (19) exp -> . LBRACKET seqsound RBRACKET rec_op
    (20) exp -> . nota rec_op
    (21) exp -> . acc rec_op
    (35) nota -> . INT
    (36) nota -> . ID
    (32) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 52
    INT             shift and go to state 46
    ID              shift and go to state 44
    LPAREN          shift and go to state 35

    nota                           shift and go to state 48
    acc                            shift and go to state 51
    exp                            shift and go to state 72

state 59

    (20) exp -> nota rec_op .

    COMMA           reduce using rule 20 (exp -> nota rec_op .)
    RBRACKET        reduce using rule 20 (exp -> nota rec_op .)
    NEWLINE         reduce using rule 20 (exp -> nota rec_op .)


state 60

    (25) rec_op -> SUM . exp
    (19) exp -> . LBRACKET seqsound RBRACKET rec_op
    (20) exp -> . nota rec_op
    (21) exp -> . acc rec_op
    (35) nota -> . INT
    (36) nota -> . ID
    (32) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 52
    INT             shift and go to state 46
    ID              shift and go to state 44
    LPAREN          shift and go to state 35

    nota                           shift and go to state 48
    acc                            shift and go to state 51
    exp                            shift and go to state 73

state 61

    (26) rec_op -> MINUS . exp
    (19) exp -> . LBRACKET seqsound RBRACKET rec_op
    (20) exp -> . nota rec_op
    (21) exp -> . acc rec_op
    (35) nota -> . INT
    (36) nota -> . ID
    (32) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 52
    INT             shift and go to state 46
    ID              shift and go to state 44
    LPAREN          shift and go to state 35

    nota                           shift and go to state 48
    acc                            shift and go to state 51
    exp                            shift and go to state 74

state 62

    (15) playcontent -> LBRACKET seqexp RBRACKET .

    COMMA           reduce using rule 15 (playcontent -> LBRACKET seqexp RBRACKET .)
    NEWLINE         reduce using rule 15 (playcontent -> LBRACKET seqexp RBRACKET .)


state 63

    (22) seqexp -> exp COMMA . seqexp
    (22) seqexp -> . exp COMMA seqexp
    (23) seqexp -> . exp
    (19) exp -> . LBRACKET seqsound RBRACKET rec_op
    (20) exp -> . nota rec_op
    (21) exp -> . acc rec_op
    (35) nota -> . INT
    (36) nota -> . ID
    (32) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 52
    INT             shift and go to state 46
    ID              shift and go to state 44
    LPAREN          shift and go to state 35

    nota                           shift and go to state 48
    seqexp                         shift and go to state 75
    exp                            shift and go to state 50
    acc                            shift and go to state 51

state 64

    (21) exp -> acc rec_op .

    COMMA           reduce using rule 21 (exp -> acc rec_op .)
    RBRACKET        reduce using rule 21 (exp -> acc rec_op .)
    NEWLINE         reduce using rule 21 (exp -> acc rec_op .)


state 65

    (28) seqsound -> sound . COMMA seqsound
    (29) seqsound -> sound .

    COMMA           shift and go to state 76
    RBRACKET        reduce using rule 29 (seqsound -> sound .)


state 66

    (31) sound -> nota .

    COMMA           reduce using rule 31 (sound -> nota .)
    RBRACKET        reduce using rule 31 (sound -> nota .)


state 67

    (19) exp -> LBRACKET seqsound . RBRACKET rec_op

    RBRACKET        shift and go to state 77


state 68

    (30) sound -> acc .

    COMMA           reduce using rule 30 (sound -> acc .)
    RBRACKET        reduce using rule 30 (sound -> acc .)


state 69

    (37) loop -> REPEAT INT TWOPOINTS NEWLINE program . ENDREPEAT

    ENDREPEAT       shift and go to state 78


state 70

    (38) label -> SEQUENCE ID TWOPOINTS NEWLINE program . ENDSEQUENCE

    ENDSEQUENCE     shift and go to state 79


state 71

    (34) seqnotas -> nota COMMA seqnotas .

    RPAREN          reduce using rule 34 (seqnotas -> nota COMMA seqnotas .)


state 72

    (27) rec_op -> AMPERSAND exp .

    COMMA           reduce using rule 27 (rec_op -> AMPERSAND exp .)
    RBRACKET        reduce using rule 27 (rec_op -> AMPERSAND exp .)
    NEWLINE         reduce using rule 27 (rec_op -> AMPERSAND exp .)


state 73

    (25) rec_op -> SUM exp .

    COMMA           reduce using rule 25 (rec_op -> SUM exp .)
    RBRACKET        reduce using rule 25 (rec_op -> SUM exp .)
    NEWLINE         reduce using rule 25 (rec_op -> SUM exp .)


state 74

    (26) rec_op -> MINUS exp .

    COMMA           reduce using rule 26 (rec_op -> MINUS exp .)
    RBRACKET        reduce using rule 26 (rec_op -> MINUS exp .)
    NEWLINE         reduce using rule 26 (rec_op -> MINUS exp .)


state 75

    (22) seqexp -> exp COMMA seqexp .

    RBRACKET        reduce using rule 22 (seqexp -> exp COMMA seqexp .)


state 76

    (28) seqsound -> sound COMMA . seqsound
    (28) seqsound -> . sound COMMA seqsound
    (29) seqsound -> . sound
    (30) sound -> . acc
    (31) sound -> . nota
    (32) acc -> . LPAREN seqnotas RPAREN
    (35) nota -> . INT
    (36) nota -> . ID

    LPAREN          shift and go to state 35
    INT             shift and go to state 46
    ID              shift and go to state 44

    sound                          shift and go to state 65
    acc                            shift and go to state 68
    seqsound                       shift and go to state 80
    nota                           shift and go to state 66

state 77

    (19) exp -> LBRACKET seqsound RBRACKET . rec_op
    (24) rec_op -> .
    (25) rec_op -> . SUM exp
    (26) rec_op -> . MINUS exp
    (27) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 24 (rec_op -> .)
    RBRACKET        reduce using rule 24 (rec_op -> .)
    NEWLINE         reduce using rule 24 (rec_op -> .)
    SUM             shift and go to state 60
    MINUS           shift and go to state 61
    AMPERSAND       shift and go to state 58

    rec_op                         shift and go to state 81

state 78

    (37) loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .

    NEWLINE         reduce using rule 37 (loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .)


state 79

    (38) label -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE .

    NEWLINE         reduce using rule 38 (label -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE .)


state 80

    (28) seqsound -> sound COMMA seqsound .

    RBRACKET        reduce using rule 28 (seqsound -> sound COMMA seqsound .)


state 81

    (19) exp -> LBRACKET seqsound RBRACKET rec_op .

    COMMA           reduce using rule 19 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    RBRACKET        reduce using rule 19 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    NEWLINE         reduce using rule 19 (exp -> LBRACKET seqsound RBRACKET rec_op .)

