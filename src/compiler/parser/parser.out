Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MULTIPLY

Grammar

Rule 0     S' -> program2
Rule 1     program2 -> START NEWLINE program END
Rule 2     program -> statement NEWLINE
Rule 3     program -> statement NEWLINE program
Rule 4     statement -> command
Rule 5     statement -> param
Rule 6     statement -> assignation
Rule 7     statement -> loop
Rule 8     param -> AMP TWOPOINTS INT
Rule 9     param -> DUR TWOPOINTS INT
Rule 10    param -> INSTR TWOPOINTS INT
Rule 11    param -> TONE TWOPOINTS INT
Rule 12    command -> command COMMA param
Rule 13    command -> PLAY TWOPOINTS playcontent
Rule 14    playcontent -> LBRACKET seqexp RBRACKET
Rule 15    playcontent -> ID
Rule 16    assignation -> VAR ID TWOPOINTS exp
Rule 17    exp -> LBRACKET seqsound RBRACKET rec_op
Rule 18    exp -> nota rec_op
Rule 19    exp -> acc rec_op
Rule 20    seqexp -> exp COMMA seqexp
Rule 21    seqexp -> exp
Rule 22    rec_op -> <empty>
Rule 23    rec_op -> SUM exp
Rule 24    rec_op -> MINUS exp
Rule 25    rec_op -> AMPERSAND exp
Rule 26    seqsound -> sound COMMA seqsound
Rule 27    seqsound -> sound
Rule 28    sound -> acc
Rule 29    sound -> nota
Rule 30    acc -> LPAREN seqnotas RPAREN
Rule 31    seqnotas -> nota
Rule 32    seqnotas -> nota COMMA seqnotas
Rule 33    nota -> INT
Rule 34    nota -> ID
Rule 35    loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

Terminals, with rules where they appear

AMP                  : 8
AMPERSAND            : 25
COMMA                : 12 20 26 32
DUR                  : 9
END                  : 1
ENDREPEAT            : 35
ID                   : 15 16 34
INSTR                : 10
INT                  : 8 9 10 11 33 35
LBRACKET             : 14 17
LPAREN               : 30
MINUS                : 24
MULTIPLY             : 
NEWLINE              : 1 2 3 35
PLAY                 : 13
RBRACKET             : 14 17
REPEAT               : 35
RPAREN               : 30
START                : 1
SUM                  : 23
TONE                 : 11
TWOPOINTS            : 8 9 10 11 13 16 35
VAR                  : 16
error                : 

Nonterminals, with rules where they appear

acc                  : 19 28
assignation          : 6
command              : 4 12
exp                  : 16 20 21 23 24 25
loop                 : 7
nota                 : 18 29 31 32
param                : 5 12
playcontent          : 13
program              : 1 3 35
program2             : 0
rec_op               : 17 18 19
seqexp               : 14 20
seqnotas             : 30 32
seqsound             : 17 26
sound                : 26 27
statement            : 2 3

Parsing method: LALR

state 0

    (0) S' -> . program2
    (1) program2 -> . START NEWLINE program END

    START           shift and go to state 1

    program2                       shift and go to state 2

state 1

    (1) program2 -> START . NEWLINE program END

    NEWLINE         shift and go to state 3


state 2

    (0) S' -> program2 .



state 3

    (1) program2 -> START NEWLINE . program END
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (12) command -> . command COMMA param
    (13) command -> . PLAY TWOPOINTS playcontent
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT
    (11) param -> . TONE TWOPOINTS INT
    (16) assignation -> . VAR ID TWOPOINTS exp
    (35) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

    PLAY            shift and go to state 4
    AMP             shift and go to state 5
    DUR             shift and go to state 12
    INSTR           shift and go to state 16
    TONE            shift and go to state 15
    VAR             shift and go to state 7
    REPEAT          shift and go to state 9

    statement                      shift and go to state 13
    command                        shift and go to state 8
    param                          shift and go to state 11
    loop                           shift and go to state 6
    assignation                    shift and go to state 10
    program                        shift and go to state 14

state 4

    (13) command -> PLAY . TWOPOINTS playcontent

    TWOPOINTS       shift and go to state 17


state 5

    (8) param -> AMP . TWOPOINTS INT

    TWOPOINTS       shift and go to state 18


state 6

    (7) statement -> loop .

    NEWLINE         reduce using rule 7 (statement -> loop .)


state 7

    (16) assignation -> VAR . ID TWOPOINTS exp

    ID              shift and go to state 19


state 8

    (4) statement -> command .
    (12) command -> command . COMMA param

    NEWLINE         reduce using rule 4 (statement -> command .)
    COMMA           shift and go to state 20


state 9

    (35) loop -> REPEAT . INT TWOPOINTS NEWLINE program ENDREPEAT

    INT             shift and go to state 21


state 10

    (6) statement -> assignation .

    NEWLINE         reduce using rule 6 (statement -> assignation .)


state 11

    (5) statement -> param .

    NEWLINE         reduce using rule 5 (statement -> param .)


state 12

    (9) param -> DUR . TWOPOINTS INT

    TWOPOINTS       shift and go to state 22


state 13

    (2) program -> statement . NEWLINE
    (3) program -> statement . NEWLINE program

    NEWLINE         shift and go to state 23


state 14

    (1) program2 -> START NEWLINE program . END

    END             shift and go to state 24


state 15

    (11) param -> TONE . TWOPOINTS INT

    TWOPOINTS       shift and go to state 25


state 16

    (10) param -> INSTR . TWOPOINTS INT

    TWOPOINTS       shift and go to state 26


state 17

    (13) command -> PLAY TWOPOINTS . playcontent
    (14) playcontent -> . LBRACKET seqexp RBRACKET
    (15) playcontent -> . ID

    LBRACKET        shift and go to state 28
    ID              shift and go to state 29

    playcontent                    shift and go to state 27

state 18

    (8) param -> AMP TWOPOINTS . INT

    INT             shift and go to state 30


state 19

    (16) assignation -> VAR ID . TWOPOINTS exp

    TWOPOINTS       shift and go to state 31


state 20

    (12) command -> command COMMA . param
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT
    (11) param -> . TONE TWOPOINTS INT

    AMP             shift and go to state 5
    DUR             shift and go to state 12
    INSTR           shift and go to state 16
    TONE            shift and go to state 15

    param                          shift and go to state 32

state 21

    (35) loop -> REPEAT INT . TWOPOINTS NEWLINE program ENDREPEAT

    TWOPOINTS       shift and go to state 33


state 22

    (9) param -> DUR TWOPOINTS . INT

    INT             shift and go to state 34


state 23

    (2) program -> statement NEWLINE .
    (3) program -> statement NEWLINE . program
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (12) command -> . command COMMA param
    (13) command -> . PLAY TWOPOINTS playcontent
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT
    (11) param -> . TONE TWOPOINTS INT
    (16) assignation -> . VAR ID TWOPOINTS exp
    (35) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

    ENDREPEAT       reduce using rule 2 (program -> statement NEWLINE .)
    END             reduce using rule 2 (program -> statement NEWLINE .)
    PLAY            shift and go to state 4
    AMP             shift and go to state 5
    DUR             shift and go to state 12
    INSTR           shift and go to state 16
    TONE            shift and go to state 15
    VAR             shift and go to state 7
    REPEAT          shift and go to state 9

    statement                      shift and go to state 13
    command                        shift and go to state 8
    param                          shift and go to state 11
    loop                           shift and go to state 6
    assignation                    shift and go to state 10
    program                        shift and go to state 35

state 24

    (1) program2 -> START NEWLINE program END .

    $end            reduce using rule 1 (program2 -> START NEWLINE program END .)


state 25

    (11) param -> TONE TWOPOINTS . INT

    INT             shift and go to state 36


state 26

    (10) param -> INSTR TWOPOINTS . INT

    INT             shift and go to state 37


state 27

    (13) command -> PLAY TWOPOINTS playcontent .

    COMMA           reduce using rule 13 (command -> PLAY TWOPOINTS playcontent .)
    NEWLINE         reduce using rule 13 (command -> PLAY TWOPOINTS playcontent .)


state 28

    (14) playcontent -> LBRACKET . seqexp RBRACKET
    (20) seqexp -> . exp COMMA seqexp
    (21) seqexp -> . exp
    (17) exp -> . LBRACKET seqsound RBRACKET rec_op
    (18) exp -> . nota rec_op
    (19) exp -> . acc rec_op
    (33) nota -> . INT
    (34) nota -> . ID
    (30) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 43
    INT             shift and go to state 45
    ID              shift and go to state 40
    LPAREN          shift and go to state 38

    nota                           shift and go to state 44
    acc                            shift and go to state 39
    exp                            shift and go to state 41
    seqexp                         shift and go to state 42

state 29

    (15) playcontent -> ID .

    COMMA           reduce using rule 15 (playcontent -> ID .)
    NEWLINE         reduce using rule 15 (playcontent -> ID .)


state 30

    (8) param -> AMP TWOPOINTS INT .

    NEWLINE         reduce using rule 8 (param -> AMP TWOPOINTS INT .)
    COMMA           reduce using rule 8 (param -> AMP TWOPOINTS INT .)


state 31

    (16) assignation -> VAR ID TWOPOINTS . exp
    (17) exp -> . LBRACKET seqsound RBRACKET rec_op
    (18) exp -> . nota rec_op
    (19) exp -> . acc rec_op
    (33) nota -> . INT
    (34) nota -> . ID
    (30) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 43
    INT             shift and go to state 45
    ID              shift and go to state 40
    LPAREN          shift and go to state 38

    nota                           shift and go to state 44
    acc                            shift and go to state 39
    exp                            shift and go to state 46

state 32

    (12) command -> command COMMA param .

    COMMA           reduce using rule 12 (command -> command COMMA param .)
    NEWLINE         reduce using rule 12 (command -> command COMMA param .)


state 33

    (35) loop -> REPEAT INT TWOPOINTS . NEWLINE program ENDREPEAT

    NEWLINE         shift and go to state 47


state 34

    (9) param -> DUR TWOPOINTS INT .

    NEWLINE         reduce using rule 9 (param -> DUR TWOPOINTS INT .)
    COMMA           reduce using rule 9 (param -> DUR TWOPOINTS INT .)


state 35

    (3) program -> statement NEWLINE program .

    ENDREPEAT       reduce using rule 3 (program -> statement NEWLINE program .)
    END             reduce using rule 3 (program -> statement NEWLINE program .)


state 36

    (11) param -> TONE TWOPOINTS INT .

    NEWLINE         reduce using rule 11 (param -> TONE TWOPOINTS INT .)
    COMMA           reduce using rule 11 (param -> TONE TWOPOINTS INT .)


state 37

    (10) param -> INSTR TWOPOINTS INT .

    NEWLINE         reduce using rule 10 (param -> INSTR TWOPOINTS INT .)
    COMMA           reduce using rule 10 (param -> INSTR TWOPOINTS INT .)


state 38

    (30) acc -> LPAREN . seqnotas RPAREN
    (31) seqnotas -> . nota
    (32) seqnotas -> . nota COMMA seqnotas
    (33) nota -> . INT
    (34) nota -> . ID

    INT             shift and go to state 45
    ID              shift and go to state 40

    nota                           shift and go to state 49
    seqnotas                       shift and go to state 48

state 39

    (19) exp -> acc . rec_op
    (22) rec_op -> .
    (23) rec_op -> . SUM exp
    (24) rec_op -> . MINUS exp
    (25) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 22 (rec_op -> .)
    RBRACKET        reduce using rule 22 (rec_op -> .)
    NEWLINE         reduce using rule 22 (rec_op -> .)
    SUM             shift and go to state 51
    MINUS           shift and go to state 53
    AMPERSAND       shift and go to state 52

    rec_op                         shift and go to state 50

state 40

    (34) nota -> ID .

    COMMA           reduce using rule 34 (nota -> ID .)
    RBRACKET        reduce using rule 34 (nota -> ID .)
    SUM             reduce using rule 34 (nota -> ID .)
    MINUS           reduce using rule 34 (nota -> ID .)
    AMPERSAND       reduce using rule 34 (nota -> ID .)
    NEWLINE         reduce using rule 34 (nota -> ID .)
    RPAREN          reduce using rule 34 (nota -> ID .)


state 41

    (20) seqexp -> exp . COMMA seqexp
    (21) seqexp -> exp .

    COMMA           shift and go to state 54
    RBRACKET        reduce using rule 21 (seqexp -> exp .)


state 42

    (14) playcontent -> LBRACKET seqexp . RBRACKET

    RBRACKET        shift and go to state 55


state 43

    (17) exp -> LBRACKET . seqsound RBRACKET rec_op
    (26) seqsound -> . sound COMMA seqsound
    (27) seqsound -> . sound
    (28) sound -> . acc
    (29) sound -> . nota
    (30) acc -> . LPAREN seqnotas RPAREN
    (33) nota -> . INT
    (34) nota -> . ID

    LPAREN          shift and go to state 38
    INT             shift and go to state 45
    ID              shift and go to state 40

    seqsound                       shift and go to state 56
    sound                          shift and go to state 58
    nota                           shift and go to state 59
    acc                            shift and go to state 57

state 44

    (18) exp -> nota . rec_op
    (22) rec_op -> .
    (23) rec_op -> . SUM exp
    (24) rec_op -> . MINUS exp
    (25) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 22 (rec_op -> .)
    RBRACKET        reduce using rule 22 (rec_op -> .)
    NEWLINE         reduce using rule 22 (rec_op -> .)
    SUM             shift and go to state 51
    MINUS           shift and go to state 53
    AMPERSAND       shift and go to state 52

    rec_op                         shift and go to state 60

state 45

    (33) nota -> INT .

    COMMA           reduce using rule 33 (nota -> INT .)
    RBRACKET        reduce using rule 33 (nota -> INT .)
    SUM             reduce using rule 33 (nota -> INT .)
    MINUS           reduce using rule 33 (nota -> INT .)
    AMPERSAND       reduce using rule 33 (nota -> INT .)
    NEWLINE         reduce using rule 33 (nota -> INT .)
    RPAREN          reduce using rule 33 (nota -> INT .)


state 46

    (16) assignation -> VAR ID TWOPOINTS exp .

    NEWLINE         reduce using rule 16 (assignation -> VAR ID TWOPOINTS exp .)


state 47

    (35) loop -> REPEAT INT TWOPOINTS NEWLINE . program ENDREPEAT
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (12) command -> . command COMMA param
    (13) command -> . PLAY TWOPOINTS playcontent
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT
    (11) param -> . TONE TWOPOINTS INT
    (16) assignation -> . VAR ID TWOPOINTS exp
    (35) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

    PLAY            shift and go to state 4
    AMP             shift and go to state 5
    DUR             shift and go to state 12
    INSTR           shift and go to state 16
    TONE            shift and go to state 15
    VAR             shift and go to state 7
    REPEAT          shift and go to state 9

    statement                      shift and go to state 13
    command                        shift and go to state 8
    param                          shift and go to state 11
    loop                           shift and go to state 6
    assignation                    shift and go to state 10
    program                        shift and go to state 61

state 48

    (30) acc -> LPAREN seqnotas . RPAREN

    RPAREN          shift and go to state 62


state 49

    (31) seqnotas -> nota .
    (32) seqnotas -> nota . COMMA seqnotas

    RPAREN          reduce using rule 31 (seqnotas -> nota .)
    COMMA           shift and go to state 63


state 50

    (19) exp -> acc rec_op .

    NEWLINE         reduce using rule 19 (exp -> acc rec_op .)
    COMMA           reduce using rule 19 (exp -> acc rec_op .)
    RBRACKET        reduce using rule 19 (exp -> acc rec_op .)


state 51

    (23) rec_op -> SUM . exp
    (17) exp -> . LBRACKET seqsound RBRACKET rec_op
    (18) exp -> . nota rec_op
    (19) exp -> . acc rec_op
    (33) nota -> . INT
    (34) nota -> . ID
    (30) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 43
    INT             shift and go to state 45
    ID              shift and go to state 40
    LPAREN          shift and go to state 38

    nota                           shift and go to state 44
    acc                            shift and go to state 39
    exp                            shift and go to state 64

state 52

    (25) rec_op -> AMPERSAND . exp
    (17) exp -> . LBRACKET seqsound RBRACKET rec_op
    (18) exp -> . nota rec_op
    (19) exp -> . acc rec_op
    (33) nota -> . INT
    (34) nota -> . ID
    (30) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 43
    INT             shift and go to state 45
    ID              shift and go to state 40
    LPAREN          shift and go to state 38

    nota                           shift and go to state 44
    acc                            shift and go to state 39
    exp                            shift and go to state 65

state 53

    (24) rec_op -> MINUS . exp
    (17) exp -> . LBRACKET seqsound RBRACKET rec_op
    (18) exp -> . nota rec_op
    (19) exp -> . acc rec_op
    (33) nota -> . INT
    (34) nota -> . ID
    (30) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 43
    INT             shift and go to state 45
    ID              shift and go to state 40
    LPAREN          shift and go to state 38

    nota                           shift and go to state 44
    acc                            shift and go to state 39
    exp                            shift and go to state 66

state 54

    (20) seqexp -> exp COMMA . seqexp
    (20) seqexp -> . exp COMMA seqexp
    (21) seqexp -> . exp
    (17) exp -> . LBRACKET seqsound RBRACKET rec_op
    (18) exp -> . nota rec_op
    (19) exp -> . acc rec_op
    (33) nota -> . INT
    (34) nota -> . ID
    (30) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 43
    INT             shift and go to state 45
    ID              shift and go to state 40
    LPAREN          shift and go to state 38

    nota                           shift and go to state 44
    acc                            shift and go to state 39
    exp                            shift and go to state 41
    seqexp                         shift and go to state 67

state 55

    (14) playcontent -> LBRACKET seqexp RBRACKET .

    COMMA           reduce using rule 14 (playcontent -> LBRACKET seqexp RBRACKET .)
    NEWLINE         reduce using rule 14 (playcontent -> LBRACKET seqexp RBRACKET .)


state 56

    (17) exp -> LBRACKET seqsound . RBRACKET rec_op

    RBRACKET        shift and go to state 68


state 57

    (28) sound -> acc .

    COMMA           reduce using rule 28 (sound -> acc .)
    RBRACKET        reduce using rule 28 (sound -> acc .)


state 58

    (26) seqsound -> sound . COMMA seqsound
    (27) seqsound -> sound .

    COMMA           shift and go to state 69
    RBRACKET        reduce using rule 27 (seqsound -> sound .)


state 59

    (29) sound -> nota .

    COMMA           reduce using rule 29 (sound -> nota .)
    RBRACKET        reduce using rule 29 (sound -> nota .)


state 60

    (18) exp -> nota rec_op .

    NEWLINE         reduce using rule 18 (exp -> nota rec_op .)
    COMMA           reduce using rule 18 (exp -> nota rec_op .)
    RBRACKET        reduce using rule 18 (exp -> nota rec_op .)


state 61

    (35) loop -> REPEAT INT TWOPOINTS NEWLINE program . ENDREPEAT

    ENDREPEAT       shift and go to state 70


state 62

    (30) acc -> LPAREN seqnotas RPAREN .

    SUM             reduce using rule 30 (acc -> LPAREN seqnotas RPAREN .)
    MINUS           reduce using rule 30 (acc -> LPAREN seqnotas RPAREN .)
    AMPERSAND       reduce using rule 30 (acc -> LPAREN seqnotas RPAREN .)
    COMMA           reduce using rule 30 (acc -> LPAREN seqnotas RPAREN .)
    RBRACKET        reduce using rule 30 (acc -> LPAREN seqnotas RPAREN .)
    NEWLINE         reduce using rule 30 (acc -> LPAREN seqnotas RPAREN .)


state 63

    (32) seqnotas -> nota COMMA . seqnotas
    (31) seqnotas -> . nota
    (32) seqnotas -> . nota COMMA seqnotas
    (33) nota -> . INT
    (34) nota -> . ID

    INT             shift and go to state 45
    ID              shift and go to state 40

    nota                           shift and go to state 49
    seqnotas                       shift and go to state 71

state 64

    (23) rec_op -> SUM exp .

    COMMA           reduce using rule 23 (rec_op -> SUM exp .)
    RBRACKET        reduce using rule 23 (rec_op -> SUM exp .)
    NEWLINE         reduce using rule 23 (rec_op -> SUM exp .)


state 65

    (25) rec_op -> AMPERSAND exp .

    COMMA           reduce using rule 25 (rec_op -> AMPERSAND exp .)
    RBRACKET        reduce using rule 25 (rec_op -> AMPERSAND exp .)
    NEWLINE         reduce using rule 25 (rec_op -> AMPERSAND exp .)


state 66

    (24) rec_op -> MINUS exp .

    COMMA           reduce using rule 24 (rec_op -> MINUS exp .)
    RBRACKET        reduce using rule 24 (rec_op -> MINUS exp .)
    NEWLINE         reduce using rule 24 (rec_op -> MINUS exp .)


state 67

    (20) seqexp -> exp COMMA seqexp .

    RBRACKET        reduce using rule 20 (seqexp -> exp COMMA seqexp .)


state 68

    (17) exp -> LBRACKET seqsound RBRACKET . rec_op
    (22) rec_op -> .
    (23) rec_op -> . SUM exp
    (24) rec_op -> . MINUS exp
    (25) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 22 (rec_op -> .)
    RBRACKET        reduce using rule 22 (rec_op -> .)
    NEWLINE         reduce using rule 22 (rec_op -> .)
    SUM             shift and go to state 51
    MINUS           shift and go to state 53
    AMPERSAND       shift and go to state 52

    rec_op                         shift and go to state 72

state 69

    (26) seqsound -> sound COMMA . seqsound
    (26) seqsound -> . sound COMMA seqsound
    (27) seqsound -> . sound
    (28) sound -> . acc
    (29) sound -> . nota
    (30) acc -> . LPAREN seqnotas RPAREN
    (33) nota -> . INT
    (34) nota -> . ID

    LPAREN          shift and go to state 38
    INT             shift and go to state 45
    ID              shift and go to state 40

    seqsound                       shift and go to state 73
    nota                           shift and go to state 59
    acc                            shift and go to state 57
    sound                          shift and go to state 58

state 70

    (35) loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .

    NEWLINE         reduce using rule 35 (loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .)


state 71

    (32) seqnotas -> nota COMMA seqnotas .

    RPAREN          reduce using rule 32 (seqnotas -> nota COMMA seqnotas .)


state 72

    (17) exp -> LBRACKET seqsound RBRACKET rec_op .

    NEWLINE         reduce using rule 17 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    COMMA           reduce using rule 17 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    RBRACKET        reduce using rule 17 (exp -> LBRACKET seqsound RBRACKET rec_op .)


state 73

    (26) seqsound -> sound COMMA seqsound .

    RBRACKET        reduce using rule 26 (seqsound -> sound COMMA seqsound .)

