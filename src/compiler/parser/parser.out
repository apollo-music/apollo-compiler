Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MULTIPLY

Grammar

Rule 0     S' -> program2
Rule 1     program2 -> START NEWLINE program END
Rule 2     program -> statement NEWLINE
Rule 3     program -> statement NEWLINE program
Rule 4     statement -> command
Rule 5     statement -> param
Rule 6     statement -> assignation
Rule 7     statement -> loop
Rule 8     param -> AMP TWOPOINTS INT
Rule 9     param -> DUR TWOPOINTS INT
Rule 10    param -> INSTR TWOPOINTS INT
Rule 11    param -> TONE TWOPOINTS INT
Rule 12    command -> command COMMA param
Rule 13    command -> PLAY TWOPOINTS playcontent
Rule 14    playcontent -> LBRACKET seqexp RBRACKET
Rule 15    playcontent -> ID
Rule 16    playcontent -> acc
Rule 17    assignation -> VAR ID TWOPOINTS exp
Rule 18    exp -> LBRACKET seqsound RBRACKET rec_op
Rule 19    exp -> nota rec_op
Rule 20    exp -> acc rec_op
Rule 21    seqexp -> exp COMMA seqexp
Rule 22    seqexp -> exp
Rule 23    rec_op -> <empty>
Rule 24    rec_op -> SUM exp
Rule 25    rec_op -> MINUS exp
Rule 26    rec_op -> AMPERSAND exp
Rule 27    seqsound -> sound COMMA seqsound
Rule 28    seqsound -> sound
Rule 29    sound -> acc
Rule 30    sound -> nota
Rule 31    acc -> LPAREN seqnotas RPAREN
Rule 32    seqnotas -> nota
Rule 33    seqnotas -> nota COMMA seqnotas
Rule 34    nota -> INT
Rule 35    nota -> ID
Rule 36    loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

Terminals, with rules where they appear

AMP                  : 8
AMPERSAND            : 26
COMMA                : 12 21 27 33
DUR                  : 9
END                  : 1
ENDREPEAT            : 36
ID                   : 15 17 35
INSTR                : 10
INT                  : 8 9 10 11 34 36
LBRACKET             : 14 18
LPAREN               : 31
MINUS                : 25
MULTIPLY             : 
NEWLINE              : 1 2 3 36
PLAY                 : 13
RBRACKET             : 14 18
REPEAT               : 36
RPAREN               : 31
START                : 1
SUM                  : 24
TONE                 : 11
TWOPOINTS            : 8 9 10 11 13 17 36
VAR                  : 17
error                : 

Nonterminals, with rules where they appear

acc                  : 16 20 29
assignation          : 6
command              : 4 12
exp                  : 17 21 22 24 25 26
loop                 : 7
nota                 : 19 30 32 33
param                : 5 12
playcontent          : 13
program              : 1 3 36
program2             : 0
rec_op               : 18 19 20
seqexp               : 14 21
seqnotas             : 31 33
seqsound             : 18 27
sound                : 27 28
statement            : 2 3

Parsing method: LALR

state 0

    (0) S' -> . program2
    (1) program2 -> . START NEWLINE program END

    START           shift and go to state 1

    program2                       shift and go to state 2

state 1

    (1) program2 -> START . NEWLINE program END

    NEWLINE         shift and go to state 3


state 2

    (0) S' -> program2 .



state 3

    (1) program2 -> START NEWLINE . program END
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (12) command -> . command COMMA param
    (13) command -> . PLAY TWOPOINTS playcontent
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT
    (11) param -> . TONE TWOPOINTS INT
    (17) assignation -> . VAR ID TWOPOINTS exp
    (36) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

    PLAY            shift and go to state 12
    AMP             shift and go to state 4
    DUR             shift and go to state 5
    INSTR           shift and go to state 6
    TONE            shift and go to state 16
    VAR             shift and go to state 15
    REPEAT          shift and go to state 10

    program                        shift and go to state 7
    command                        shift and go to state 8
    statement                      shift and go to state 9
    assignation                    shift and go to state 11
    param                          shift and go to state 13
    loop                           shift and go to state 14

state 4

    (8) param -> AMP . TWOPOINTS INT

    TWOPOINTS       shift and go to state 17


state 5

    (9) param -> DUR . TWOPOINTS INT

    TWOPOINTS       shift and go to state 18


state 6

    (10) param -> INSTR . TWOPOINTS INT

    TWOPOINTS       shift and go to state 19


state 7

    (1) program2 -> START NEWLINE program . END

    END             shift and go to state 20


state 8

    (4) statement -> command .
    (12) command -> command . COMMA param

    NEWLINE         reduce using rule 4 (statement -> command .)
    COMMA           shift and go to state 21


state 9

    (2) program -> statement . NEWLINE
    (3) program -> statement . NEWLINE program

    NEWLINE         shift and go to state 22


state 10

    (36) loop -> REPEAT . INT TWOPOINTS NEWLINE program ENDREPEAT

    INT             shift and go to state 23


state 11

    (6) statement -> assignation .

    NEWLINE         reduce using rule 6 (statement -> assignation .)


state 12

    (13) command -> PLAY . TWOPOINTS playcontent

    TWOPOINTS       shift and go to state 24


state 13

    (5) statement -> param .

    NEWLINE         reduce using rule 5 (statement -> param .)


state 14

    (7) statement -> loop .

    NEWLINE         reduce using rule 7 (statement -> loop .)


state 15

    (17) assignation -> VAR . ID TWOPOINTS exp

    ID              shift and go to state 25


state 16

    (11) param -> TONE . TWOPOINTS INT

    TWOPOINTS       shift and go to state 26


state 17

    (8) param -> AMP TWOPOINTS . INT

    INT             shift and go to state 27


state 18

    (9) param -> DUR TWOPOINTS . INT

    INT             shift and go to state 28


state 19

    (10) param -> INSTR TWOPOINTS . INT

    INT             shift and go to state 29


state 20

    (1) program2 -> START NEWLINE program END .

    $end            reduce using rule 1 (program2 -> START NEWLINE program END .)


state 21

    (12) command -> command COMMA . param
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT
    (11) param -> . TONE TWOPOINTS INT

    AMP             shift and go to state 4
    DUR             shift and go to state 5
    INSTR           shift and go to state 6
    TONE            shift and go to state 16

    param                          shift and go to state 30

state 22

    (2) program -> statement NEWLINE .
    (3) program -> statement NEWLINE . program
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (12) command -> . command COMMA param
    (13) command -> . PLAY TWOPOINTS playcontent
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT
    (11) param -> . TONE TWOPOINTS INT
    (17) assignation -> . VAR ID TWOPOINTS exp
    (36) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

    END             reduce using rule 2 (program -> statement NEWLINE .)
    ENDREPEAT       reduce using rule 2 (program -> statement NEWLINE .)
    PLAY            shift and go to state 12
    AMP             shift and go to state 4
    DUR             shift and go to state 5
    INSTR           shift and go to state 6
    TONE            shift and go to state 16
    VAR             shift and go to state 15
    REPEAT          shift and go to state 10

    program                        shift and go to state 31
    command                        shift and go to state 8
    statement                      shift and go to state 9
    assignation                    shift and go to state 11
    param                          shift and go to state 13
    loop                           shift and go to state 14

state 23

    (36) loop -> REPEAT INT . TWOPOINTS NEWLINE program ENDREPEAT

    TWOPOINTS       shift and go to state 32


state 24

    (13) command -> PLAY TWOPOINTS . playcontent
    (14) playcontent -> . LBRACKET seqexp RBRACKET
    (15) playcontent -> . ID
    (16) playcontent -> . acc
    (31) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 36
    ID              shift and go to state 35
    LPAREN          shift and go to state 34

    playcontent                    shift and go to state 37
    acc                            shift and go to state 33

state 25

    (17) assignation -> VAR ID . TWOPOINTS exp

    TWOPOINTS       shift and go to state 38


state 26

    (11) param -> TONE TWOPOINTS . INT

    INT             shift and go to state 39


state 27

    (8) param -> AMP TWOPOINTS INT .

    NEWLINE         reduce using rule 8 (param -> AMP TWOPOINTS INT .)
    COMMA           reduce using rule 8 (param -> AMP TWOPOINTS INT .)


state 28

    (9) param -> DUR TWOPOINTS INT .

    NEWLINE         reduce using rule 9 (param -> DUR TWOPOINTS INT .)
    COMMA           reduce using rule 9 (param -> DUR TWOPOINTS INT .)


state 29

    (10) param -> INSTR TWOPOINTS INT .

    NEWLINE         reduce using rule 10 (param -> INSTR TWOPOINTS INT .)
    COMMA           reduce using rule 10 (param -> INSTR TWOPOINTS INT .)


state 30

    (12) command -> command COMMA param .

    COMMA           reduce using rule 12 (command -> command COMMA param .)
    NEWLINE         reduce using rule 12 (command -> command COMMA param .)


state 31

    (3) program -> statement NEWLINE program .

    END             reduce using rule 3 (program -> statement NEWLINE program .)
    ENDREPEAT       reduce using rule 3 (program -> statement NEWLINE program .)


state 32

    (36) loop -> REPEAT INT TWOPOINTS . NEWLINE program ENDREPEAT

    NEWLINE         shift and go to state 40


state 33

    (16) playcontent -> acc .

    COMMA           reduce using rule 16 (playcontent -> acc .)
    NEWLINE         reduce using rule 16 (playcontent -> acc .)


state 34

    (31) acc -> LPAREN . seqnotas RPAREN
    (32) seqnotas -> . nota
    (33) seqnotas -> . nota COMMA seqnotas
    (34) nota -> . INT
    (35) nota -> . ID

    INT             shift and go to state 41
    ID              shift and go to state 44

    seqnotas                       shift and go to state 42
    nota                           shift and go to state 43

state 35

    (15) playcontent -> ID .

    COMMA           reduce using rule 15 (playcontent -> ID .)
    NEWLINE         reduce using rule 15 (playcontent -> ID .)


state 36

    (14) playcontent -> LBRACKET . seqexp RBRACKET
    (21) seqexp -> . exp COMMA seqexp
    (22) seqexp -> . exp
    (18) exp -> . LBRACKET seqsound RBRACKET rec_op
    (19) exp -> . nota rec_op
    (20) exp -> . acc rec_op
    (34) nota -> . INT
    (35) nota -> . ID
    (31) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 48
    INT             shift and go to state 41
    ID              shift and go to state 44
    LPAREN          shift and go to state 34

    seqexp                         shift and go to state 45
    nota                           shift and go to state 47
    exp                            shift and go to state 46
    acc                            shift and go to state 49

state 37

    (13) command -> PLAY TWOPOINTS playcontent .

    COMMA           reduce using rule 13 (command -> PLAY TWOPOINTS playcontent .)
    NEWLINE         reduce using rule 13 (command -> PLAY TWOPOINTS playcontent .)


state 38

    (17) assignation -> VAR ID TWOPOINTS . exp
    (18) exp -> . LBRACKET seqsound RBRACKET rec_op
    (19) exp -> . nota rec_op
    (20) exp -> . acc rec_op
    (34) nota -> . INT
    (35) nota -> . ID
    (31) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 48
    INT             shift and go to state 41
    ID              shift and go to state 44
    LPAREN          shift and go to state 34

    nota                           shift and go to state 47
    exp                            shift and go to state 50
    acc                            shift and go to state 49

state 39

    (11) param -> TONE TWOPOINTS INT .

    NEWLINE         reduce using rule 11 (param -> TONE TWOPOINTS INT .)
    COMMA           reduce using rule 11 (param -> TONE TWOPOINTS INT .)


state 40

    (36) loop -> REPEAT INT TWOPOINTS NEWLINE . program ENDREPEAT
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (12) command -> . command COMMA param
    (13) command -> . PLAY TWOPOINTS playcontent
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT
    (11) param -> . TONE TWOPOINTS INT
    (17) assignation -> . VAR ID TWOPOINTS exp
    (36) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

    PLAY            shift and go to state 12
    AMP             shift and go to state 4
    DUR             shift and go to state 5
    INSTR           shift and go to state 6
    TONE            shift and go to state 16
    VAR             shift and go to state 15
    REPEAT          shift and go to state 10

    program                        shift and go to state 51
    command                        shift and go to state 8
    statement                      shift and go to state 9
    assignation                    shift and go to state 11
    param                          shift and go to state 13
    loop                           shift and go to state 14

state 41

    (34) nota -> INT .

    COMMA           reduce using rule 34 (nota -> INT .)
    RBRACKET        reduce using rule 34 (nota -> INT .)
    RPAREN          reduce using rule 34 (nota -> INT .)
    SUM             reduce using rule 34 (nota -> INT .)
    MINUS           reduce using rule 34 (nota -> INT .)
    AMPERSAND       reduce using rule 34 (nota -> INT .)
    NEWLINE         reduce using rule 34 (nota -> INT .)


state 42

    (31) acc -> LPAREN seqnotas . RPAREN

    RPAREN          shift and go to state 52


state 43

    (32) seqnotas -> nota .
    (33) seqnotas -> nota . COMMA seqnotas

    RPAREN          reduce using rule 32 (seqnotas -> nota .)
    COMMA           shift and go to state 53


state 44

    (35) nota -> ID .

    COMMA           reduce using rule 35 (nota -> ID .)
    RBRACKET        reduce using rule 35 (nota -> ID .)
    RPAREN          reduce using rule 35 (nota -> ID .)
    SUM             reduce using rule 35 (nota -> ID .)
    MINUS           reduce using rule 35 (nota -> ID .)
    AMPERSAND       reduce using rule 35 (nota -> ID .)
    NEWLINE         reduce using rule 35 (nota -> ID .)


state 45

    (14) playcontent -> LBRACKET seqexp . RBRACKET

    RBRACKET        shift and go to state 54


state 46

    (21) seqexp -> exp . COMMA seqexp
    (22) seqexp -> exp .

    COMMA           shift and go to state 55
    RBRACKET        reduce using rule 22 (seqexp -> exp .)


state 47

    (19) exp -> nota . rec_op
    (23) rec_op -> .
    (24) rec_op -> . SUM exp
    (25) rec_op -> . MINUS exp
    (26) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 23 (rec_op -> .)
    RBRACKET        reduce using rule 23 (rec_op -> .)
    NEWLINE         reduce using rule 23 (rec_op -> .)
    SUM             shift and go to state 56
    MINUS           shift and go to state 58
    AMPERSAND       shift and go to state 57

    rec_op                         shift and go to state 59

state 48

    (18) exp -> LBRACKET . seqsound RBRACKET rec_op
    (27) seqsound -> . sound COMMA seqsound
    (28) seqsound -> . sound
    (29) sound -> . acc
    (30) sound -> . nota
    (31) acc -> . LPAREN seqnotas RPAREN
    (34) nota -> . INT
    (35) nota -> . ID

    LPAREN          shift and go to state 34
    INT             shift and go to state 41
    ID              shift and go to state 44

    seqsound                       shift and go to state 61
    nota                           shift and go to state 60
    acc                            shift and go to state 63
    sound                          shift and go to state 62

state 49

    (20) exp -> acc . rec_op
    (23) rec_op -> .
    (24) rec_op -> . SUM exp
    (25) rec_op -> . MINUS exp
    (26) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 23 (rec_op -> .)
    RBRACKET        reduce using rule 23 (rec_op -> .)
    NEWLINE         reduce using rule 23 (rec_op -> .)
    SUM             shift and go to state 56
    MINUS           shift and go to state 58
    AMPERSAND       shift and go to state 57

    rec_op                         shift and go to state 64

state 50

    (17) assignation -> VAR ID TWOPOINTS exp .

    NEWLINE         reduce using rule 17 (assignation -> VAR ID TWOPOINTS exp .)


state 51

    (36) loop -> REPEAT INT TWOPOINTS NEWLINE program . ENDREPEAT

    ENDREPEAT       shift and go to state 65


state 52

    (31) acc -> LPAREN seqnotas RPAREN .

    COMMA           reduce using rule 31 (acc -> LPAREN seqnotas RPAREN .)
    NEWLINE         reduce using rule 31 (acc -> LPAREN seqnotas RPAREN .)
    RBRACKET        reduce using rule 31 (acc -> LPAREN seqnotas RPAREN .)
    SUM             reduce using rule 31 (acc -> LPAREN seqnotas RPAREN .)
    MINUS           reduce using rule 31 (acc -> LPAREN seqnotas RPAREN .)
    AMPERSAND       reduce using rule 31 (acc -> LPAREN seqnotas RPAREN .)


state 53

    (33) seqnotas -> nota COMMA . seqnotas
    (32) seqnotas -> . nota
    (33) seqnotas -> . nota COMMA seqnotas
    (34) nota -> . INT
    (35) nota -> . ID

    INT             shift and go to state 41
    ID              shift and go to state 44

    seqnotas                       shift and go to state 66
    nota                           shift and go to state 43

state 54

    (14) playcontent -> LBRACKET seqexp RBRACKET .

    COMMA           reduce using rule 14 (playcontent -> LBRACKET seqexp RBRACKET .)
    NEWLINE         reduce using rule 14 (playcontent -> LBRACKET seqexp RBRACKET .)


state 55

    (21) seqexp -> exp COMMA . seqexp
    (21) seqexp -> . exp COMMA seqexp
    (22) seqexp -> . exp
    (18) exp -> . LBRACKET seqsound RBRACKET rec_op
    (19) exp -> . nota rec_op
    (20) exp -> . acc rec_op
    (34) nota -> . INT
    (35) nota -> . ID
    (31) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 48
    INT             shift and go to state 41
    ID              shift and go to state 44
    LPAREN          shift and go to state 34

    seqexp                         shift and go to state 67
    nota                           shift and go to state 47
    exp                            shift and go to state 46
    acc                            shift and go to state 49

state 56

    (24) rec_op -> SUM . exp
    (18) exp -> . LBRACKET seqsound RBRACKET rec_op
    (19) exp -> . nota rec_op
    (20) exp -> . acc rec_op
    (34) nota -> . INT
    (35) nota -> . ID
    (31) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 48
    INT             shift and go to state 41
    ID              shift and go to state 44
    LPAREN          shift and go to state 34

    nota                           shift and go to state 47
    exp                            shift and go to state 68
    acc                            shift and go to state 49

state 57

    (26) rec_op -> AMPERSAND . exp
    (18) exp -> . LBRACKET seqsound RBRACKET rec_op
    (19) exp -> . nota rec_op
    (20) exp -> . acc rec_op
    (34) nota -> . INT
    (35) nota -> . ID
    (31) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 48
    INT             shift and go to state 41
    ID              shift and go to state 44
    LPAREN          shift and go to state 34

    nota                           shift and go to state 47
    exp                            shift and go to state 69
    acc                            shift and go to state 49

state 58

    (25) rec_op -> MINUS . exp
    (18) exp -> . LBRACKET seqsound RBRACKET rec_op
    (19) exp -> . nota rec_op
    (20) exp -> . acc rec_op
    (34) nota -> . INT
    (35) nota -> . ID
    (31) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 48
    INT             shift and go to state 41
    ID              shift and go to state 44
    LPAREN          shift and go to state 34

    nota                           shift and go to state 47
    exp                            shift and go to state 70
    acc                            shift and go to state 49

state 59

    (19) exp -> nota rec_op .

    COMMA           reduce using rule 19 (exp -> nota rec_op .)
    RBRACKET        reduce using rule 19 (exp -> nota rec_op .)
    NEWLINE         reduce using rule 19 (exp -> nota rec_op .)


state 60

    (30) sound -> nota .

    COMMA           reduce using rule 30 (sound -> nota .)
    RBRACKET        reduce using rule 30 (sound -> nota .)


state 61

    (18) exp -> LBRACKET seqsound . RBRACKET rec_op

    RBRACKET        shift and go to state 71


state 62

    (27) seqsound -> sound . COMMA seqsound
    (28) seqsound -> sound .

    COMMA           shift and go to state 72
    RBRACKET        reduce using rule 28 (seqsound -> sound .)


state 63

    (29) sound -> acc .

    COMMA           reduce using rule 29 (sound -> acc .)
    RBRACKET        reduce using rule 29 (sound -> acc .)


state 64

    (20) exp -> acc rec_op .

    COMMA           reduce using rule 20 (exp -> acc rec_op .)
    RBRACKET        reduce using rule 20 (exp -> acc rec_op .)
    NEWLINE         reduce using rule 20 (exp -> acc rec_op .)


state 65

    (36) loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .

    NEWLINE         reduce using rule 36 (loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .)


state 66

    (33) seqnotas -> nota COMMA seqnotas .

    RPAREN          reduce using rule 33 (seqnotas -> nota COMMA seqnotas .)


state 67

    (21) seqexp -> exp COMMA seqexp .

    RBRACKET        reduce using rule 21 (seqexp -> exp COMMA seqexp .)


state 68

    (24) rec_op -> SUM exp .

    COMMA           reduce using rule 24 (rec_op -> SUM exp .)
    RBRACKET        reduce using rule 24 (rec_op -> SUM exp .)
    NEWLINE         reduce using rule 24 (rec_op -> SUM exp .)


state 69

    (26) rec_op -> AMPERSAND exp .

    COMMA           reduce using rule 26 (rec_op -> AMPERSAND exp .)
    RBRACKET        reduce using rule 26 (rec_op -> AMPERSAND exp .)
    NEWLINE         reduce using rule 26 (rec_op -> AMPERSAND exp .)


state 70

    (25) rec_op -> MINUS exp .

    COMMA           reduce using rule 25 (rec_op -> MINUS exp .)
    RBRACKET        reduce using rule 25 (rec_op -> MINUS exp .)
    NEWLINE         reduce using rule 25 (rec_op -> MINUS exp .)


state 71

    (18) exp -> LBRACKET seqsound RBRACKET . rec_op
    (23) rec_op -> .
    (24) rec_op -> . SUM exp
    (25) rec_op -> . MINUS exp
    (26) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 23 (rec_op -> .)
    RBRACKET        reduce using rule 23 (rec_op -> .)
    NEWLINE         reduce using rule 23 (rec_op -> .)
    SUM             shift and go to state 56
    MINUS           shift and go to state 58
    AMPERSAND       shift and go to state 57

    rec_op                         shift and go to state 73

state 72

    (27) seqsound -> sound COMMA . seqsound
    (27) seqsound -> . sound COMMA seqsound
    (28) seqsound -> . sound
    (29) sound -> . acc
    (30) sound -> . nota
    (31) acc -> . LPAREN seqnotas RPAREN
    (34) nota -> . INT
    (35) nota -> . ID

    LPAREN          shift and go to state 34
    INT             shift and go to state 41
    ID              shift and go to state 44

    nota                           shift and go to state 60
    seqsound                       shift and go to state 74
    acc                            shift and go to state 63
    sound                          shift and go to state 62

state 73

    (18) exp -> LBRACKET seqsound RBRACKET rec_op .

    COMMA           reduce using rule 18 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    RBRACKET        reduce using rule 18 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    NEWLINE         reduce using rule 18 (exp -> LBRACKET seqsound RBRACKET rec_op .)


state 74

    (27) seqsound -> sound COMMA seqsound .

    RBRACKET        reduce using rule 27 (seqsound -> sound COMMA seqsound .)

