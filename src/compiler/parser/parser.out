Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program2
Rule 1     program2 -> START NEWLINE program END
Rule 2     program -> statement NEWLINE
Rule 3     program -> statement NEWLINE program
Rule 4     statement -> command
Rule 5     statement -> param
Rule 6     statement -> assignation
Rule 7     param -> AMP TWOPOINTS INT
Rule 8     param -> DUR TWOPOINTS INT
Rule 9     param -> INSTR TWOPOINTS INT
Rule 10    command -> command COMMA param
Rule 11    command -> PLAY TWOPOINTS LBRACKET expression RBRACKET
Rule 12    assignation -> VAR ID TWOPOINTS LBRACKET expression RBRACKET
Rule 13    assignation -> VAR ID TWOPOINTS acc
Rule 14    expression -> acc
Rule 15    expression -> acc COMMA expression
Rule 16    acc -> LPAREN seqnotas RPAREN
Rule 17    acc -> nota
Rule 18    seqnotas -> nota
Rule 19    seqnotas -> nota COMMA seqnotas
Rule 20    nota -> nota SUM nota
Rule 21    nota -> nota MINUS nota
Rule 22    nota -> nota MULTIPLY nota
Rule 23    nota -> INT
Rule 24    nota -> ID

Terminals, with rules where they appear

AMP                  : 7
COMMA                : 10 15 19
DUR                  : 8
END                  : 1
ID                   : 12 13 24
INSTR                : 9
INT                  : 7 8 9 23
LBRACKET             : 11 12
LPAREN               : 16
MINUS                : 21
MULTIPLY             : 22
NEWLINE              : 1 2 3
PLAY                 : 11
RBRACKET             : 11 12
RPAREN               : 16
START                : 1
SUM                  : 20
TWOPOINTS            : 7 8 9 11 12 13
VAR                  : 12 13
error                : 

Nonterminals, with rules where they appear

acc                  : 13 14 15
assignation          : 6
command              : 4 10
expression           : 11 12 15
nota                 : 17 18 19 20 20 21 21 22 22
param                : 5 10
program              : 1 3
program2             : 0
seqnotas             : 16 19
statement            : 2 3

Parsing method: LALR

state 0

    (0) S' -> . program2
    (1) program2 -> . START NEWLINE program END

    START           shift and go to state 2

    program2                       shift and go to state 1

state 1

    (0) S' -> program2 .



state 2

    (1) program2 -> START . NEWLINE program END

    NEWLINE         shift and go to state 3


state 3

    (1) program2 -> START NEWLINE . program END
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (10) command -> . command COMMA param
    (11) command -> . PLAY TWOPOINTS LBRACKET expression RBRACKET
    (7) param -> . AMP TWOPOINTS INT
    (8) param -> . DUR TWOPOINTS INT
    (9) param -> . INSTR TWOPOINTS INT
    (12) assignation -> . VAR ID TWOPOINTS LBRACKET expression RBRACKET
    (13) assignation -> . VAR ID TWOPOINTS acc

    PLAY            shift and go to state 9
    AMP             shift and go to state 10
    DUR             shift and go to state 11
    INSTR           shift and go to state 12
    VAR             shift and go to state 13

    program                        shift and go to state 4
    statement                      shift and go to state 5
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8

state 4

    (1) program2 -> START NEWLINE program . END

    END             shift and go to state 14


state 5

    (2) program -> statement . NEWLINE
    (3) program -> statement . NEWLINE program

    NEWLINE         shift and go to state 15


state 6

    (4) statement -> command .
    (10) command -> command . COMMA param

    NEWLINE         reduce using rule 4 (statement -> command .)
    COMMA           shift and go to state 16


state 7

    (5) statement -> param .

    NEWLINE         reduce using rule 5 (statement -> param .)


state 8

    (6) statement -> assignation .

    NEWLINE         reduce using rule 6 (statement -> assignation .)


state 9

    (11) command -> PLAY . TWOPOINTS LBRACKET expression RBRACKET

    TWOPOINTS       shift and go to state 17


state 10

    (7) param -> AMP . TWOPOINTS INT

    TWOPOINTS       shift and go to state 18


state 11

    (8) param -> DUR . TWOPOINTS INT

    TWOPOINTS       shift and go to state 19


state 12

    (9) param -> INSTR . TWOPOINTS INT

    TWOPOINTS       shift and go to state 20


state 13

    (12) assignation -> VAR . ID TWOPOINTS LBRACKET expression RBRACKET
    (13) assignation -> VAR . ID TWOPOINTS acc

    ID              shift and go to state 21


state 14

    (1) program2 -> START NEWLINE program END .

    $end            reduce using rule 1 (program2 -> START NEWLINE program END .)


state 15

    (2) program -> statement NEWLINE .
    (3) program -> statement NEWLINE . program
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (10) command -> . command COMMA param
    (11) command -> . PLAY TWOPOINTS LBRACKET expression RBRACKET
    (7) param -> . AMP TWOPOINTS INT
    (8) param -> . DUR TWOPOINTS INT
    (9) param -> . INSTR TWOPOINTS INT
    (12) assignation -> . VAR ID TWOPOINTS LBRACKET expression RBRACKET
    (13) assignation -> . VAR ID TWOPOINTS acc

    END             reduce using rule 2 (program -> statement NEWLINE .)
    PLAY            shift and go to state 9
    AMP             shift and go to state 10
    DUR             shift and go to state 11
    INSTR           shift and go to state 12
    VAR             shift and go to state 13

    statement                      shift and go to state 5
    program                        shift and go to state 22
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8

state 16

    (10) command -> command COMMA . param
    (7) param -> . AMP TWOPOINTS INT
    (8) param -> . DUR TWOPOINTS INT
    (9) param -> . INSTR TWOPOINTS INT

    AMP             shift and go to state 10
    DUR             shift and go to state 11
    INSTR           shift and go to state 12

    param                          shift and go to state 23

state 17

    (11) command -> PLAY TWOPOINTS . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 24


state 18

    (7) param -> AMP TWOPOINTS . INT

    INT             shift and go to state 25


state 19

    (8) param -> DUR TWOPOINTS . INT

    INT             shift and go to state 26


state 20

    (9) param -> INSTR TWOPOINTS . INT

    INT             shift and go to state 27


state 21

    (12) assignation -> VAR ID . TWOPOINTS LBRACKET expression RBRACKET
    (13) assignation -> VAR ID . TWOPOINTS acc

    TWOPOINTS       shift and go to state 28


state 22

    (3) program -> statement NEWLINE program .

    END             reduce using rule 3 (program -> statement NEWLINE program .)


state 23

    (10) command -> command COMMA param .

    COMMA           reduce using rule 10 (command -> command COMMA param .)
    NEWLINE         reduce using rule 10 (command -> command COMMA param .)


state 24

    (11) command -> PLAY TWOPOINTS LBRACKET . expression RBRACKET
    (14) expression -> . acc
    (15) expression -> . acc COMMA expression
    (16) acc -> . LPAREN seqnotas RPAREN
    (17) acc -> . nota
    (20) nota -> . nota SUM nota
    (21) nota -> . nota MINUS nota
    (22) nota -> . nota MULTIPLY nota
    (23) nota -> . INT
    (24) nota -> . ID

    LPAREN          shift and go to state 31
    INT             shift and go to state 33
    ID              shift and go to state 34

    expression                     shift and go to state 29
    acc                            shift and go to state 30
    nota                           shift and go to state 32

state 25

    (7) param -> AMP TWOPOINTS INT .

    NEWLINE         reduce using rule 7 (param -> AMP TWOPOINTS INT .)
    COMMA           reduce using rule 7 (param -> AMP TWOPOINTS INT .)


state 26

    (8) param -> DUR TWOPOINTS INT .

    NEWLINE         reduce using rule 8 (param -> DUR TWOPOINTS INT .)
    COMMA           reduce using rule 8 (param -> DUR TWOPOINTS INT .)


state 27

    (9) param -> INSTR TWOPOINTS INT .

    NEWLINE         reduce using rule 9 (param -> INSTR TWOPOINTS INT .)
    COMMA           reduce using rule 9 (param -> INSTR TWOPOINTS INT .)


state 28

    (12) assignation -> VAR ID TWOPOINTS . LBRACKET expression RBRACKET
    (13) assignation -> VAR ID TWOPOINTS . acc
    (16) acc -> . LPAREN seqnotas RPAREN
    (17) acc -> . nota
    (20) nota -> . nota SUM nota
    (21) nota -> . nota MINUS nota
    (22) nota -> . nota MULTIPLY nota
    (23) nota -> . INT
    (24) nota -> . ID

    LBRACKET        shift and go to state 35
    LPAREN          shift and go to state 31
    INT             shift and go to state 33
    ID              shift and go to state 34

    acc                            shift and go to state 36
    nota                           shift and go to state 32

state 29

    (11) command -> PLAY TWOPOINTS LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 37


state 30

    (14) expression -> acc .
    (15) expression -> acc . COMMA expression

    RBRACKET        reduce using rule 14 (expression -> acc .)
    COMMA           shift and go to state 38


state 31

    (16) acc -> LPAREN . seqnotas RPAREN
    (18) seqnotas -> . nota
    (19) seqnotas -> . nota COMMA seqnotas
    (20) nota -> . nota SUM nota
    (21) nota -> . nota MINUS nota
    (22) nota -> . nota MULTIPLY nota
    (23) nota -> . INT
    (24) nota -> . ID

    INT             shift and go to state 33
    ID              shift and go to state 34

    seqnotas                       shift and go to state 39
    nota                           shift and go to state 40

state 32

    (17) acc -> nota .
    (20) nota -> nota . SUM nota
    (21) nota -> nota . MINUS nota
    (22) nota -> nota . MULTIPLY nota

    COMMA           reduce using rule 17 (acc -> nota .)
    RBRACKET        reduce using rule 17 (acc -> nota .)
    NEWLINE         reduce using rule 17 (acc -> nota .)
    SUM             shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43


state 33

    (23) nota -> INT .

    SUM             reduce using rule 23 (nota -> INT .)
    MINUS           reduce using rule 23 (nota -> INT .)
    MULTIPLY        reduce using rule 23 (nota -> INT .)
    COMMA           reduce using rule 23 (nota -> INT .)
    RBRACKET        reduce using rule 23 (nota -> INT .)
    NEWLINE         reduce using rule 23 (nota -> INT .)
    RPAREN          reduce using rule 23 (nota -> INT .)


state 34

    (24) nota -> ID .

    SUM             reduce using rule 24 (nota -> ID .)
    MINUS           reduce using rule 24 (nota -> ID .)
    MULTIPLY        reduce using rule 24 (nota -> ID .)
    COMMA           reduce using rule 24 (nota -> ID .)
    RBRACKET        reduce using rule 24 (nota -> ID .)
    NEWLINE         reduce using rule 24 (nota -> ID .)
    RPAREN          reduce using rule 24 (nota -> ID .)


state 35

    (12) assignation -> VAR ID TWOPOINTS LBRACKET . expression RBRACKET
    (14) expression -> . acc
    (15) expression -> . acc COMMA expression
    (16) acc -> . LPAREN seqnotas RPAREN
    (17) acc -> . nota
    (20) nota -> . nota SUM nota
    (21) nota -> . nota MINUS nota
    (22) nota -> . nota MULTIPLY nota
    (23) nota -> . INT
    (24) nota -> . ID

    LPAREN          shift and go to state 31
    INT             shift and go to state 33
    ID              shift and go to state 34

    expression                     shift and go to state 44
    acc                            shift and go to state 30
    nota                           shift and go to state 32

state 36

    (13) assignation -> VAR ID TWOPOINTS acc .

    NEWLINE         reduce using rule 13 (assignation -> VAR ID TWOPOINTS acc .)


state 37

    (11) command -> PLAY TWOPOINTS LBRACKET expression RBRACKET .

    COMMA           reduce using rule 11 (command -> PLAY TWOPOINTS LBRACKET expression RBRACKET .)
    NEWLINE         reduce using rule 11 (command -> PLAY TWOPOINTS LBRACKET expression RBRACKET .)


state 38

    (15) expression -> acc COMMA . expression
    (14) expression -> . acc
    (15) expression -> . acc COMMA expression
    (16) acc -> . LPAREN seqnotas RPAREN
    (17) acc -> . nota
    (20) nota -> . nota SUM nota
    (21) nota -> . nota MINUS nota
    (22) nota -> . nota MULTIPLY nota
    (23) nota -> . INT
    (24) nota -> . ID

    LPAREN          shift and go to state 31
    INT             shift and go to state 33
    ID              shift and go to state 34

    acc                            shift and go to state 30
    expression                     shift and go to state 45
    nota                           shift and go to state 32

state 39

    (16) acc -> LPAREN seqnotas . RPAREN

    RPAREN          shift and go to state 46


state 40

    (18) seqnotas -> nota .
    (19) seqnotas -> nota . COMMA seqnotas
    (20) nota -> nota . SUM nota
    (21) nota -> nota . MINUS nota
    (22) nota -> nota . MULTIPLY nota

    RPAREN          reduce using rule 18 (seqnotas -> nota .)
    COMMA           shift and go to state 47
    SUM             shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43


state 41

    (20) nota -> nota SUM . nota
    (20) nota -> . nota SUM nota
    (21) nota -> . nota MINUS nota
    (22) nota -> . nota MULTIPLY nota
    (23) nota -> . INT
    (24) nota -> . ID

    INT             shift and go to state 33
    ID              shift and go to state 34

    nota                           shift and go to state 48

state 42

    (21) nota -> nota MINUS . nota
    (20) nota -> . nota SUM nota
    (21) nota -> . nota MINUS nota
    (22) nota -> . nota MULTIPLY nota
    (23) nota -> . INT
    (24) nota -> . ID

    INT             shift and go to state 33
    ID              shift and go to state 34

    nota                           shift and go to state 49

state 43

    (22) nota -> nota MULTIPLY . nota
    (20) nota -> . nota SUM nota
    (21) nota -> . nota MINUS nota
    (22) nota -> . nota MULTIPLY nota
    (23) nota -> . INT
    (24) nota -> . ID

    INT             shift and go to state 33
    ID              shift and go to state 34

    nota                           shift and go to state 50

state 44

    (12) assignation -> VAR ID TWOPOINTS LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 51


state 45

    (15) expression -> acc COMMA expression .

    RBRACKET        reduce using rule 15 (expression -> acc COMMA expression .)


state 46

    (16) acc -> LPAREN seqnotas RPAREN .

    COMMA           reduce using rule 16 (acc -> LPAREN seqnotas RPAREN .)
    RBRACKET        reduce using rule 16 (acc -> LPAREN seqnotas RPAREN .)
    NEWLINE         reduce using rule 16 (acc -> LPAREN seqnotas RPAREN .)


state 47

    (19) seqnotas -> nota COMMA . seqnotas
    (18) seqnotas -> . nota
    (19) seqnotas -> . nota COMMA seqnotas
    (20) nota -> . nota SUM nota
    (21) nota -> . nota MINUS nota
    (22) nota -> . nota MULTIPLY nota
    (23) nota -> . INT
    (24) nota -> . ID

    INT             shift and go to state 33
    ID              shift and go to state 34

    nota                           shift and go to state 40
    seqnotas                       shift and go to state 52

state 48

    (20) nota -> nota SUM nota .
    (20) nota -> nota . SUM nota
    (21) nota -> nota . MINUS nota
    (22) nota -> nota . MULTIPLY nota

  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    COMMA           reduce using rule 20 (nota -> nota SUM nota .)
    RBRACKET        reduce using rule 20 (nota -> nota SUM nota .)
    NEWLINE         reduce using rule 20 (nota -> nota SUM nota .)
    RPAREN          reduce using rule 20 (nota -> nota SUM nota .)
    SUM             shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43

  ! SUM             [ reduce using rule 20 (nota -> nota SUM nota .) ]
  ! MINUS           [ reduce using rule 20 (nota -> nota SUM nota .) ]
  ! MULTIPLY        [ reduce using rule 20 (nota -> nota SUM nota .) ]


state 49

    (21) nota -> nota MINUS nota .
    (20) nota -> nota . SUM nota
    (21) nota -> nota . MINUS nota
    (22) nota -> nota . MULTIPLY nota

  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    COMMA           reduce using rule 21 (nota -> nota MINUS nota .)
    RBRACKET        reduce using rule 21 (nota -> nota MINUS nota .)
    NEWLINE         reduce using rule 21 (nota -> nota MINUS nota .)
    RPAREN          reduce using rule 21 (nota -> nota MINUS nota .)
    SUM             shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43

  ! SUM             [ reduce using rule 21 (nota -> nota MINUS nota .) ]
  ! MINUS           [ reduce using rule 21 (nota -> nota MINUS nota .) ]
  ! MULTIPLY        [ reduce using rule 21 (nota -> nota MINUS nota .) ]


state 50

    (22) nota -> nota MULTIPLY nota .
    (20) nota -> nota . SUM nota
    (21) nota -> nota . MINUS nota
    (22) nota -> nota . MULTIPLY nota

  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    COMMA           reduce using rule 22 (nota -> nota MULTIPLY nota .)
    RBRACKET        reduce using rule 22 (nota -> nota MULTIPLY nota .)
    NEWLINE         reduce using rule 22 (nota -> nota MULTIPLY nota .)
    RPAREN          reduce using rule 22 (nota -> nota MULTIPLY nota .)
    SUM             shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43

  ! SUM             [ reduce using rule 22 (nota -> nota MULTIPLY nota .) ]
  ! MINUS           [ reduce using rule 22 (nota -> nota MULTIPLY nota .) ]
  ! MULTIPLY        [ reduce using rule 22 (nota -> nota MULTIPLY nota .) ]


state 51

    (12) assignation -> VAR ID TWOPOINTS LBRACKET expression RBRACKET .

    NEWLINE         reduce using rule 12 (assignation -> VAR ID TWOPOINTS LBRACKET expression RBRACKET .)


state 52

    (19) seqnotas -> nota COMMA seqnotas .

    RPAREN          reduce using rule 19 (seqnotas -> nota COMMA seqnotas .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SUM in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 48 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 48 resolved as shift
WARNING: shift/reduce conflict for SUM in state 49 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 49 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 49 resolved as shift
WARNING: shift/reduce conflict for SUM in state 50 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 50 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 50 resolved as shift
