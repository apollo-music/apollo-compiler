Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CUE
    ENDTRACK
    MULTIPLY
    SYNC
    TRACK

Grammar

Rule 0     S' -> program2
Rule 1     program2 -> START NEWLINE program END
Rule 2     program -> statement NEWLINE
Rule 3     program -> statement NEWLINE program
Rule 4     statement -> command
Rule 5     statement -> param
Rule 6     statement -> assignation
Rule 7     statement -> loop
Rule 8     statement -> label
Rule 9     param -> AMP EQUAL exp2
Rule 10    param -> DUR EQUAL exp2
Rule 11    param -> INSTR EQUAL exp2
Rule 12    param -> TONE EQUAL exp2
Rule 13    param -> SLEEP EQUAL exp2
Rule 14    param -> CALL TWOPOINTS ID
Rule 15    command -> command COMMA param
Rule 16    command -> PLAY TWOPOINTS playcontent
Rule 17    playcontent -> LBRACKET seqexp RBRACKET
Rule 18    playcontent -> ID
Rule 19    playcontent -> acc
Rule 20    assignation -> VAR ID EQUAL exp
Rule 21    exp -> LBRACKET seqsound RBRACKET rec_op
Rule 22    exp -> nota rec_op
Rule 23    exp -> acc rec_op
Rule 24    seqexp -> exp COMMA seqexp
Rule 25    seqexp -> exp
Rule 26    rec_op -> <empty>
Rule 27    rec_op -> SUM exp
Rule 28    rec_op -> MINUS exp
Rule 29    rec_op -> AMPERSAND exp
Rule 30    exp2 -> nota rec_op2
Rule 31    rec_op2 -> <empty>
Rule 32    rec_op2 -> SUM exp2
Rule 33    rec_op2 -> MINUS exp2
Rule 34    seqsound -> sound COMMA seqsound
Rule 35    seqsound -> sound
Rule 36    sound -> acc
Rule 37    sound -> nota
Rule 38    acc -> LPAREN seqnotas RPAREN
Rule 39    seqnotas -> nota
Rule 40    seqnotas -> nota COMMA seqnotas
Rule 41    nota -> INT
Rule 42    nota -> ID
Rule 43    loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
Rule 44    label -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

Terminals, with rules where they appear

AMP                  : 9
AMPERSAND            : 29
CALL                 : 14
COMMA                : 15 24 34 40
CUE                  : 
DUR                  : 10
END                  : 1
ENDREPEAT            : 43
ENDSEQUENCE          : 44
ENDTRACK             : 
EQUAL                : 9 10 11 12 13 20
ID                   : 14 18 20 42 44
INSTR                : 11
INT                  : 41 43
LBRACKET             : 17 21
LPAREN               : 38
MINUS                : 28 33
MULTIPLY             : 
NEWLINE              : 1 2 3 43 44
PLAY                 : 16
RBRACKET             : 17 21
REPEAT               : 43
RPAREN               : 38
SEQUENCE             : 44
SLEEP                : 13
START                : 1
SUM                  : 27 32
SYNC                 : 
TONE                 : 12
TRACK                : 
TWOPOINTS            : 14 16 43 44
VAR                  : 20
error                : 

Nonterminals, with rules where they appear

acc                  : 19 23 36
assignation          : 6
command              : 4 15
exp                  : 20 24 25 27 28 29
exp2                 : 9 10 11 12 13 32 33
label                : 8
loop                 : 7
nota                 : 22 30 37 39 40
param                : 5 15
playcontent          : 16
program              : 1 3 43 44
program2             : 0
rec_op               : 21 22 23
rec_op2              : 30
seqexp               : 17 24
seqnotas             : 38 40
seqsound             : 21 34
sound                : 34 35
statement            : 2 3

Parsing method: LALR

state 0

    (0) S' -> . program2
    (1) program2 -> . START NEWLINE program END

    START           shift and go to state 2

    program2                       shift and go to state 1

state 1

    (0) S' -> program2 .



state 2

    (1) program2 -> START . NEWLINE program END

    NEWLINE         shift and go to state 3


state 3

    (1) program2 -> START NEWLINE . program END
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . label
    (15) command -> . command COMMA param
    (16) command -> . PLAY TWOPOINTS playcontent
    (9) param -> . AMP EQUAL exp2
    (10) param -> . DUR EQUAL exp2
    (11) param -> . INSTR EQUAL exp2
    (12) param -> . TONE EQUAL exp2
    (13) param -> . SLEEP EQUAL exp2
    (14) param -> . CALL TWOPOINTS ID
    (20) assignation -> . VAR ID EQUAL exp
    (43) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (44) label -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

    PLAY            shift and go to state 11
    AMP             shift and go to state 12
    DUR             shift and go to state 13
    INSTR           shift and go to state 14
    TONE            shift and go to state 15
    SLEEP           shift and go to state 16
    CALL            shift and go to state 17
    VAR             shift and go to state 18
    REPEAT          shift and go to state 19
    SEQUENCE        shift and go to state 20

    program                        shift and go to state 4
    statement                      shift and go to state 5
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    label                          shift and go to state 10

state 4

    (1) program2 -> START NEWLINE program . END

    END             shift and go to state 21


state 5

    (2) program -> statement . NEWLINE
    (3) program -> statement . NEWLINE program

    NEWLINE         shift and go to state 22


state 6

    (4) statement -> command .
    (15) command -> command . COMMA param

    NEWLINE         reduce using rule 4 (statement -> command .)
    COMMA           shift and go to state 23


state 7

    (5) statement -> param .

    NEWLINE         reduce using rule 5 (statement -> param .)


state 8

    (6) statement -> assignation .

    NEWLINE         reduce using rule 6 (statement -> assignation .)


state 9

    (7) statement -> loop .

    NEWLINE         reduce using rule 7 (statement -> loop .)


state 10

    (8) statement -> label .

    NEWLINE         reduce using rule 8 (statement -> label .)


state 11

    (16) command -> PLAY . TWOPOINTS playcontent

    TWOPOINTS       shift and go to state 24


state 12

    (9) param -> AMP . EQUAL exp2

    EQUAL           shift and go to state 25


state 13

    (10) param -> DUR . EQUAL exp2

    EQUAL           shift and go to state 26


state 14

    (11) param -> INSTR . EQUAL exp2

    EQUAL           shift and go to state 27


state 15

    (12) param -> TONE . EQUAL exp2

    EQUAL           shift and go to state 28


state 16

    (13) param -> SLEEP . EQUAL exp2

    EQUAL           shift and go to state 29


state 17

    (14) param -> CALL . TWOPOINTS ID

    TWOPOINTS       shift and go to state 30


state 18

    (20) assignation -> VAR . ID EQUAL exp

    ID              shift and go to state 31


state 19

    (43) loop -> REPEAT . INT TWOPOINTS NEWLINE program ENDREPEAT

    INT             shift and go to state 32


state 20

    (44) label -> SEQUENCE . ID TWOPOINTS NEWLINE program ENDSEQUENCE

    ID              shift and go to state 33


state 21

    (1) program2 -> START NEWLINE program END .

    $end            reduce using rule 1 (program2 -> START NEWLINE program END .)


state 22

    (2) program -> statement NEWLINE .
    (3) program -> statement NEWLINE . program
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . label
    (15) command -> . command COMMA param
    (16) command -> . PLAY TWOPOINTS playcontent
    (9) param -> . AMP EQUAL exp2
    (10) param -> . DUR EQUAL exp2
    (11) param -> . INSTR EQUAL exp2
    (12) param -> . TONE EQUAL exp2
    (13) param -> . SLEEP EQUAL exp2
    (14) param -> . CALL TWOPOINTS ID
    (20) assignation -> . VAR ID EQUAL exp
    (43) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (44) label -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

    END             reduce using rule 2 (program -> statement NEWLINE .)
    ENDREPEAT       reduce using rule 2 (program -> statement NEWLINE .)
    ENDSEQUENCE     reduce using rule 2 (program -> statement NEWLINE .)
    PLAY            shift and go to state 11
    AMP             shift and go to state 12
    DUR             shift and go to state 13
    INSTR           shift and go to state 14
    TONE            shift and go to state 15
    SLEEP           shift and go to state 16
    CALL            shift and go to state 17
    VAR             shift and go to state 18
    REPEAT          shift and go to state 19
    SEQUENCE        shift and go to state 20

    statement                      shift and go to state 5
    program                        shift and go to state 34
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    label                          shift and go to state 10

state 23

    (15) command -> command COMMA . param
    (9) param -> . AMP EQUAL exp2
    (10) param -> . DUR EQUAL exp2
    (11) param -> . INSTR EQUAL exp2
    (12) param -> . TONE EQUAL exp2
    (13) param -> . SLEEP EQUAL exp2
    (14) param -> . CALL TWOPOINTS ID

    AMP             shift and go to state 12
    DUR             shift and go to state 13
    INSTR           shift and go to state 14
    TONE            shift and go to state 15
    SLEEP           shift and go to state 16
    CALL            shift and go to state 17

    param                          shift and go to state 35

state 24

    (16) command -> PLAY TWOPOINTS . playcontent
    (17) playcontent -> . LBRACKET seqexp RBRACKET
    (18) playcontent -> . ID
    (19) playcontent -> . acc
    (38) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 40

    playcontent                    shift and go to state 36
    acc                            shift and go to state 39

state 25

    (9) param -> AMP EQUAL . exp2
    (30) exp2 -> . nota rec_op2
    (41) nota -> . INT
    (42) nota -> . ID

    INT             shift and go to state 43
    ID              shift and go to state 44

    exp2                           shift and go to state 41
    nota                           shift and go to state 42

state 26

    (10) param -> DUR EQUAL . exp2
    (30) exp2 -> . nota rec_op2
    (41) nota -> . INT
    (42) nota -> . ID

    INT             shift and go to state 43
    ID              shift and go to state 44

    exp2                           shift and go to state 45
    nota                           shift and go to state 42

state 27

    (11) param -> INSTR EQUAL . exp2
    (30) exp2 -> . nota rec_op2
    (41) nota -> . INT
    (42) nota -> . ID

    INT             shift and go to state 43
    ID              shift and go to state 44

    exp2                           shift and go to state 46
    nota                           shift and go to state 42

state 28

    (12) param -> TONE EQUAL . exp2
    (30) exp2 -> . nota rec_op2
    (41) nota -> . INT
    (42) nota -> . ID

    INT             shift and go to state 43
    ID              shift and go to state 44

    exp2                           shift and go to state 47
    nota                           shift and go to state 42

state 29

    (13) param -> SLEEP EQUAL . exp2
    (30) exp2 -> . nota rec_op2
    (41) nota -> . INT
    (42) nota -> . ID

    INT             shift and go to state 43
    ID              shift and go to state 44

    exp2                           shift and go to state 48
    nota                           shift and go to state 42

state 30

    (14) param -> CALL TWOPOINTS . ID

    ID              shift and go to state 49


state 31

    (20) assignation -> VAR ID . EQUAL exp

    EQUAL           shift and go to state 50


state 32

    (43) loop -> REPEAT INT . TWOPOINTS NEWLINE program ENDREPEAT

    TWOPOINTS       shift and go to state 51


state 33

    (44) label -> SEQUENCE ID . TWOPOINTS NEWLINE program ENDSEQUENCE

    TWOPOINTS       shift and go to state 52


state 34

    (3) program -> statement NEWLINE program .

    END             reduce using rule 3 (program -> statement NEWLINE program .)
    ENDREPEAT       reduce using rule 3 (program -> statement NEWLINE program .)
    ENDSEQUENCE     reduce using rule 3 (program -> statement NEWLINE program .)


state 35

    (15) command -> command COMMA param .

    COMMA           reduce using rule 15 (command -> command COMMA param .)
    NEWLINE         reduce using rule 15 (command -> command COMMA param .)


state 36

    (16) command -> PLAY TWOPOINTS playcontent .

    COMMA           reduce using rule 16 (command -> PLAY TWOPOINTS playcontent .)
    NEWLINE         reduce using rule 16 (command -> PLAY TWOPOINTS playcontent .)


state 37

    (17) playcontent -> LBRACKET . seqexp RBRACKET
    (24) seqexp -> . exp COMMA seqexp
    (25) seqexp -> . exp
    (21) exp -> . LBRACKET seqsound RBRACKET rec_op
    (22) exp -> . nota rec_op
    (23) exp -> . acc rec_op
    (41) nota -> . INT
    (42) nota -> . ID
    (38) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 53
    INT             shift and go to state 43
    ID              shift and go to state 44
    LPAREN          shift and go to state 40

    seqexp                         shift and go to state 54
    exp                            shift and go to state 55
    nota                           shift and go to state 56
    acc                            shift and go to state 57

state 38

    (18) playcontent -> ID .

    COMMA           reduce using rule 18 (playcontent -> ID .)
    NEWLINE         reduce using rule 18 (playcontent -> ID .)


state 39

    (19) playcontent -> acc .

    COMMA           reduce using rule 19 (playcontent -> acc .)
    NEWLINE         reduce using rule 19 (playcontent -> acc .)


state 40

    (38) acc -> LPAREN . seqnotas RPAREN
    (39) seqnotas -> . nota
    (40) seqnotas -> . nota COMMA seqnotas
    (41) nota -> . INT
    (42) nota -> . ID

    INT             shift and go to state 43
    ID              shift and go to state 44

    seqnotas                       shift and go to state 58
    nota                           shift and go to state 59

state 41

    (9) param -> AMP EQUAL exp2 .

    NEWLINE         reduce using rule 9 (param -> AMP EQUAL exp2 .)
    COMMA           reduce using rule 9 (param -> AMP EQUAL exp2 .)


state 42

    (30) exp2 -> nota . rec_op2
    (31) rec_op2 -> .
    (32) rec_op2 -> . SUM exp2
    (33) rec_op2 -> . MINUS exp2

    NEWLINE         reduce using rule 31 (rec_op2 -> .)
    COMMA           reduce using rule 31 (rec_op2 -> .)
    SUM             shift and go to state 61
    MINUS           shift and go to state 62

    rec_op2                        shift and go to state 60

state 43

    (41) nota -> INT .

    SUM             reduce using rule 41 (nota -> INT .)
    MINUS           reduce using rule 41 (nota -> INT .)
    NEWLINE         reduce using rule 41 (nota -> INT .)
    COMMA           reduce using rule 41 (nota -> INT .)
    AMPERSAND       reduce using rule 41 (nota -> INT .)
    RBRACKET        reduce using rule 41 (nota -> INT .)
    RPAREN          reduce using rule 41 (nota -> INT .)


state 44

    (42) nota -> ID .

    SUM             reduce using rule 42 (nota -> ID .)
    MINUS           reduce using rule 42 (nota -> ID .)
    NEWLINE         reduce using rule 42 (nota -> ID .)
    COMMA           reduce using rule 42 (nota -> ID .)
    AMPERSAND       reduce using rule 42 (nota -> ID .)
    RBRACKET        reduce using rule 42 (nota -> ID .)
    RPAREN          reduce using rule 42 (nota -> ID .)


state 45

    (10) param -> DUR EQUAL exp2 .

    NEWLINE         reduce using rule 10 (param -> DUR EQUAL exp2 .)
    COMMA           reduce using rule 10 (param -> DUR EQUAL exp2 .)


state 46

    (11) param -> INSTR EQUAL exp2 .

    NEWLINE         reduce using rule 11 (param -> INSTR EQUAL exp2 .)
    COMMA           reduce using rule 11 (param -> INSTR EQUAL exp2 .)


state 47

    (12) param -> TONE EQUAL exp2 .

    NEWLINE         reduce using rule 12 (param -> TONE EQUAL exp2 .)
    COMMA           reduce using rule 12 (param -> TONE EQUAL exp2 .)


state 48

    (13) param -> SLEEP EQUAL exp2 .

    NEWLINE         reduce using rule 13 (param -> SLEEP EQUAL exp2 .)
    COMMA           reduce using rule 13 (param -> SLEEP EQUAL exp2 .)


state 49

    (14) param -> CALL TWOPOINTS ID .

    NEWLINE         reduce using rule 14 (param -> CALL TWOPOINTS ID .)
    COMMA           reduce using rule 14 (param -> CALL TWOPOINTS ID .)


state 50

    (20) assignation -> VAR ID EQUAL . exp
    (21) exp -> . LBRACKET seqsound RBRACKET rec_op
    (22) exp -> . nota rec_op
    (23) exp -> . acc rec_op
    (41) nota -> . INT
    (42) nota -> . ID
    (38) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 53
    INT             shift and go to state 43
    ID              shift and go to state 44
    LPAREN          shift and go to state 40

    exp                            shift and go to state 63
    nota                           shift and go to state 56
    acc                            shift and go to state 57

state 51

    (43) loop -> REPEAT INT TWOPOINTS . NEWLINE program ENDREPEAT

    NEWLINE         shift and go to state 64


state 52

    (44) label -> SEQUENCE ID TWOPOINTS . NEWLINE program ENDSEQUENCE

    NEWLINE         shift and go to state 65


state 53

    (21) exp -> LBRACKET . seqsound RBRACKET rec_op
    (34) seqsound -> . sound COMMA seqsound
    (35) seqsound -> . sound
    (36) sound -> . acc
    (37) sound -> . nota
    (38) acc -> . LPAREN seqnotas RPAREN
    (41) nota -> . INT
    (42) nota -> . ID

    LPAREN          shift and go to state 40
    INT             shift and go to state 43
    ID              shift and go to state 44

    seqsound                       shift and go to state 66
    sound                          shift and go to state 67
    acc                            shift and go to state 68
    nota                           shift and go to state 69

state 54

    (17) playcontent -> LBRACKET seqexp . RBRACKET

    RBRACKET        shift and go to state 70


state 55

    (24) seqexp -> exp . COMMA seqexp
    (25) seqexp -> exp .

    COMMA           shift and go to state 71
    RBRACKET        reduce using rule 25 (seqexp -> exp .)


state 56

    (22) exp -> nota . rec_op
    (26) rec_op -> .
    (27) rec_op -> . SUM exp
    (28) rec_op -> . MINUS exp
    (29) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 26 (rec_op -> .)
    RBRACKET        reduce using rule 26 (rec_op -> .)
    NEWLINE         reduce using rule 26 (rec_op -> .)
    SUM             shift and go to state 73
    MINUS           shift and go to state 74
    AMPERSAND       shift and go to state 75

    rec_op                         shift and go to state 72

state 57

    (23) exp -> acc . rec_op
    (26) rec_op -> .
    (27) rec_op -> . SUM exp
    (28) rec_op -> . MINUS exp
    (29) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 26 (rec_op -> .)
    RBRACKET        reduce using rule 26 (rec_op -> .)
    NEWLINE         reduce using rule 26 (rec_op -> .)
    SUM             shift and go to state 73
    MINUS           shift and go to state 74
    AMPERSAND       shift and go to state 75

    rec_op                         shift and go to state 76

state 58

    (38) acc -> LPAREN seqnotas . RPAREN

    RPAREN          shift and go to state 77


state 59

    (39) seqnotas -> nota .
    (40) seqnotas -> nota . COMMA seqnotas

    RPAREN          reduce using rule 39 (seqnotas -> nota .)
    COMMA           shift and go to state 78


state 60

    (30) exp2 -> nota rec_op2 .

    NEWLINE         reduce using rule 30 (exp2 -> nota rec_op2 .)
    COMMA           reduce using rule 30 (exp2 -> nota rec_op2 .)


state 61

    (32) rec_op2 -> SUM . exp2
    (30) exp2 -> . nota rec_op2
    (41) nota -> . INT
    (42) nota -> . ID

    INT             shift and go to state 43
    ID              shift and go to state 44

    exp2                           shift and go to state 79
    nota                           shift and go to state 42

state 62

    (33) rec_op2 -> MINUS . exp2
    (30) exp2 -> . nota rec_op2
    (41) nota -> . INT
    (42) nota -> . ID

    INT             shift and go to state 43
    ID              shift and go to state 44

    exp2                           shift and go to state 80
    nota                           shift and go to state 42

state 63

    (20) assignation -> VAR ID EQUAL exp .

    NEWLINE         reduce using rule 20 (assignation -> VAR ID EQUAL exp .)


state 64

    (43) loop -> REPEAT INT TWOPOINTS NEWLINE . program ENDREPEAT
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . label
    (15) command -> . command COMMA param
    (16) command -> . PLAY TWOPOINTS playcontent
    (9) param -> . AMP EQUAL exp2
    (10) param -> . DUR EQUAL exp2
    (11) param -> . INSTR EQUAL exp2
    (12) param -> . TONE EQUAL exp2
    (13) param -> . SLEEP EQUAL exp2
    (14) param -> . CALL TWOPOINTS ID
    (20) assignation -> . VAR ID EQUAL exp
    (43) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (44) label -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

    PLAY            shift and go to state 11
    AMP             shift and go to state 12
    DUR             shift and go to state 13
    INSTR           shift and go to state 14
    TONE            shift and go to state 15
    SLEEP           shift and go to state 16
    CALL            shift and go to state 17
    VAR             shift and go to state 18
    REPEAT          shift and go to state 19
    SEQUENCE        shift and go to state 20

    program                        shift and go to state 81
    statement                      shift and go to state 5
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    label                          shift and go to state 10

state 65

    (44) label -> SEQUENCE ID TWOPOINTS NEWLINE . program ENDSEQUENCE
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . label
    (15) command -> . command COMMA param
    (16) command -> . PLAY TWOPOINTS playcontent
    (9) param -> . AMP EQUAL exp2
    (10) param -> . DUR EQUAL exp2
    (11) param -> . INSTR EQUAL exp2
    (12) param -> . TONE EQUAL exp2
    (13) param -> . SLEEP EQUAL exp2
    (14) param -> . CALL TWOPOINTS ID
    (20) assignation -> . VAR ID EQUAL exp
    (43) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (44) label -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

    PLAY            shift and go to state 11
    AMP             shift and go to state 12
    DUR             shift and go to state 13
    INSTR           shift and go to state 14
    TONE            shift and go to state 15
    SLEEP           shift and go to state 16
    CALL            shift and go to state 17
    VAR             shift and go to state 18
    REPEAT          shift and go to state 19
    SEQUENCE        shift and go to state 20

    program                        shift and go to state 82
    statement                      shift and go to state 5
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    label                          shift and go to state 10

state 66

    (21) exp -> LBRACKET seqsound . RBRACKET rec_op

    RBRACKET        shift and go to state 83


state 67

    (34) seqsound -> sound . COMMA seqsound
    (35) seqsound -> sound .

    COMMA           shift and go to state 84
    RBRACKET        reduce using rule 35 (seqsound -> sound .)


state 68

    (36) sound -> acc .

    COMMA           reduce using rule 36 (sound -> acc .)
    RBRACKET        reduce using rule 36 (sound -> acc .)


state 69

    (37) sound -> nota .

    COMMA           reduce using rule 37 (sound -> nota .)
    RBRACKET        reduce using rule 37 (sound -> nota .)


state 70

    (17) playcontent -> LBRACKET seqexp RBRACKET .

    COMMA           reduce using rule 17 (playcontent -> LBRACKET seqexp RBRACKET .)
    NEWLINE         reduce using rule 17 (playcontent -> LBRACKET seqexp RBRACKET .)


state 71

    (24) seqexp -> exp COMMA . seqexp
    (24) seqexp -> . exp COMMA seqexp
    (25) seqexp -> . exp
    (21) exp -> . LBRACKET seqsound RBRACKET rec_op
    (22) exp -> . nota rec_op
    (23) exp -> . acc rec_op
    (41) nota -> . INT
    (42) nota -> . ID
    (38) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 53
    INT             shift and go to state 43
    ID              shift and go to state 44
    LPAREN          shift and go to state 40

    exp                            shift and go to state 55
    seqexp                         shift and go to state 85
    nota                           shift and go to state 56
    acc                            shift and go to state 57

state 72

    (22) exp -> nota rec_op .

    COMMA           reduce using rule 22 (exp -> nota rec_op .)
    RBRACKET        reduce using rule 22 (exp -> nota rec_op .)
    NEWLINE         reduce using rule 22 (exp -> nota rec_op .)


state 73

    (27) rec_op -> SUM . exp
    (21) exp -> . LBRACKET seqsound RBRACKET rec_op
    (22) exp -> . nota rec_op
    (23) exp -> . acc rec_op
    (41) nota -> . INT
    (42) nota -> . ID
    (38) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 53
    INT             shift and go to state 43
    ID              shift and go to state 44
    LPAREN          shift and go to state 40

    exp                            shift and go to state 86
    nota                           shift and go to state 56
    acc                            shift and go to state 57

state 74

    (28) rec_op -> MINUS . exp
    (21) exp -> . LBRACKET seqsound RBRACKET rec_op
    (22) exp -> . nota rec_op
    (23) exp -> . acc rec_op
    (41) nota -> . INT
    (42) nota -> . ID
    (38) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 53
    INT             shift and go to state 43
    ID              shift and go to state 44
    LPAREN          shift and go to state 40

    exp                            shift and go to state 87
    nota                           shift and go to state 56
    acc                            shift and go to state 57

state 75

    (29) rec_op -> AMPERSAND . exp
    (21) exp -> . LBRACKET seqsound RBRACKET rec_op
    (22) exp -> . nota rec_op
    (23) exp -> . acc rec_op
    (41) nota -> . INT
    (42) nota -> . ID
    (38) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 53
    INT             shift and go to state 43
    ID              shift and go to state 44
    LPAREN          shift and go to state 40

    exp                            shift and go to state 88
    nota                           shift and go to state 56
    acc                            shift and go to state 57

state 76

    (23) exp -> acc rec_op .

    COMMA           reduce using rule 23 (exp -> acc rec_op .)
    RBRACKET        reduce using rule 23 (exp -> acc rec_op .)
    NEWLINE         reduce using rule 23 (exp -> acc rec_op .)


state 77

    (38) acc -> LPAREN seqnotas RPAREN .

    COMMA           reduce using rule 38 (acc -> LPAREN seqnotas RPAREN .)
    NEWLINE         reduce using rule 38 (acc -> LPAREN seqnotas RPAREN .)
    SUM             reduce using rule 38 (acc -> LPAREN seqnotas RPAREN .)
    MINUS           reduce using rule 38 (acc -> LPAREN seqnotas RPAREN .)
    AMPERSAND       reduce using rule 38 (acc -> LPAREN seqnotas RPAREN .)
    RBRACKET        reduce using rule 38 (acc -> LPAREN seqnotas RPAREN .)


state 78

    (40) seqnotas -> nota COMMA . seqnotas
    (39) seqnotas -> . nota
    (40) seqnotas -> . nota COMMA seqnotas
    (41) nota -> . INT
    (42) nota -> . ID

    INT             shift and go to state 43
    ID              shift and go to state 44

    nota                           shift and go to state 59
    seqnotas                       shift and go to state 89

state 79

    (32) rec_op2 -> SUM exp2 .

    NEWLINE         reduce using rule 32 (rec_op2 -> SUM exp2 .)
    COMMA           reduce using rule 32 (rec_op2 -> SUM exp2 .)


state 80

    (33) rec_op2 -> MINUS exp2 .

    NEWLINE         reduce using rule 33 (rec_op2 -> MINUS exp2 .)
    COMMA           reduce using rule 33 (rec_op2 -> MINUS exp2 .)


state 81

    (43) loop -> REPEAT INT TWOPOINTS NEWLINE program . ENDREPEAT

    ENDREPEAT       shift and go to state 90


state 82

    (44) label -> SEQUENCE ID TWOPOINTS NEWLINE program . ENDSEQUENCE

    ENDSEQUENCE     shift and go to state 91


state 83

    (21) exp -> LBRACKET seqsound RBRACKET . rec_op
    (26) rec_op -> .
    (27) rec_op -> . SUM exp
    (28) rec_op -> . MINUS exp
    (29) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 26 (rec_op -> .)
    RBRACKET        reduce using rule 26 (rec_op -> .)
    NEWLINE         reduce using rule 26 (rec_op -> .)
    SUM             shift and go to state 73
    MINUS           shift and go to state 74
    AMPERSAND       shift and go to state 75

    rec_op                         shift and go to state 92

state 84

    (34) seqsound -> sound COMMA . seqsound
    (34) seqsound -> . sound COMMA seqsound
    (35) seqsound -> . sound
    (36) sound -> . acc
    (37) sound -> . nota
    (38) acc -> . LPAREN seqnotas RPAREN
    (41) nota -> . INT
    (42) nota -> . ID

    LPAREN          shift and go to state 40
    INT             shift and go to state 43
    ID              shift and go to state 44

    sound                          shift and go to state 67
    seqsound                       shift and go to state 93
    acc                            shift and go to state 68
    nota                           shift and go to state 69

state 85

    (24) seqexp -> exp COMMA seqexp .

    RBRACKET        reduce using rule 24 (seqexp -> exp COMMA seqexp .)


state 86

    (27) rec_op -> SUM exp .

    COMMA           reduce using rule 27 (rec_op -> SUM exp .)
    RBRACKET        reduce using rule 27 (rec_op -> SUM exp .)
    NEWLINE         reduce using rule 27 (rec_op -> SUM exp .)


state 87

    (28) rec_op -> MINUS exp .

    COMMA           reduce using rule 28 (rec_op -> MINUS exp .)
    RBRACKET        reduce using rule 28 (rec_op -> MINUS exp .)
    NEWLINE         reduce using rule 28 (rec_op -> MINUS exp .)


state 88

    (29) rec_op -> AMPERSAND exp .

    COMMA           reduce using rule 29 (rec_op -> AMPERSAND exp .)
    RBRACKET        reduce using rule 29 (rec_op -> AMPERSAND exp .)
    NEWLINE         reduce using rule 29 (rec_op -> AMPERSAND exp .)


state 89

    (40) seqnotas -> nota COMMA seqnotas .

    RPAREN          reduce using rule 40 (seqnotas -> nota COMMA seqnotas .)


state 90

    (43) loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .

    NEWLINE         reduce using rule 43 (loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .)


state 91

    (44) label -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE .

    NEWLINE         reduce using rule 44 (label -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE .)


state 92

    (21) exp -> LBRACKET seqsound RBRACKET rec_op .

    COMMA           reduce using rule 21 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    RBRACKET        reduce using rule 21 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    NEWLINE         reduce using rule 21 (exp -> LBRACKET seqsound RBRACKET rec_op .)


state 93

    (34) seqsound -> sound COMMA seqsound .

    RBRACKET        reduce using rule 34 (seqsound -> sound COMMA seqsound .)

