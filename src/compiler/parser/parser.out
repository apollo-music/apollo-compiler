Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MULTIPLY

Grammar

Rule 0     S' -> program2
Rule 1     program2 -> START NEWLINE program END
Rule 2     program -> statement NEWLINE
Rule 3     program -> statement NEWLINE program
Rule 4     statement -> command
Rule 5     statement -> param
Rule 6     statement -> assignation
Rule 7     statement -> loop
Rule 8     param -> AMP TWOPOINTS INT
Rule 9     param -> DUR TWOPOINTS INT
Rule 10    param -> INSTR TWOPOINTS INT
Rule 11    command -> command COMMA param
Rule 12    command -> PLAY TWOPOINTS LBRACKET seqexp RBRACKET
Rule 13    assignation -> VAR ID TWOPOINTS exp
Rule 14    exp -> LBRACKET seqsound RBRACKET rec_op
Rule 15    exp -> nota rec_op
Rule 16    exp -> acc rec_op
Rule 17    seqexp -> exp COMMA seqexp
Rule 18    seqexp -> exp
Rule 19    rec_op -> <empty>
Rule 20    rec_op -> SUM exp
Rule 21    rec_op -> MINUS exp
Rule 22    rec_op -> AMPERSAND exp
Rule 23    seqsound -> sound COMMA seqsound
Rule 24    seqsound -> sound
Rule 25    sound -> acc
Rule 26    sound -> nota
Rule 27    acc -> LPAREN seqnotas RPAREN
Rule 28    seqnotas -> nota
Rule 29    seqnotas -> nota COMMA seqnotas
Rule 30    nota -> INT
Rule 31    nota -> ID
Rule 32    loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

Terminals, with rules where they appear

AMP                  : 8
AMPERSAND            : 22
COMMA                : 11 17 23 29
DUR                  : 9
END                  : 1
ENDREPEAT            : 32
ID                   : 13 31
INSTR                : 10
INT                  : 8 9 10 30 32
LBRACKET             : 12 14
LPAREN               : 27
MINUS                : 21
MULTIPLY             : 
NEWLINE              : 1 2 3 32
PLAY                 : 12
RBRACKET             : 12 14
REPEAT               : 32
RPAREN               : 27
START                : 1
SUM                  : 20
TWOPOINTS            : 8 9 10 12 13 32
VAR                  : 13
error                : 

Nonterminals, with rules where they appear

acc                  : 16 25
assignation          : 6
command              : 4 11
exp                  : 13 17 18 20 21 22
loop                 : 7
nota                 : 15 26 28 29
param                : 5 11
program              : 1 3 32
program2             : 0
rec_op               : 14 15 16
seqexp               : 12 17
seqnotas             : 27 29
seqsound             : 14 23
sound                : 23 24
statement            : 2 3

Parsing method: LALR

state 0

    (0) S' -> . program2
    (1) program2 -> . START NEWLINE program END

    START           shift and go to state 2

    program2                       shift and go to state 1

state 1

    (0) S' -> program2 .



state 2

    (1) program2 -> START . NEWLINE program END

    NEWLINE         shift and go to state 3


state 3

    (1) program2 -> START NEWLINE . program END
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (11) command -> . command COMMA param
    (12) command -> . PLAY TWOPOINTS LBRACKET seqexp RBRACKET
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT
    (13) assignation -> . VAR ID TWOPOINTS exp
    (32) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

    PLAY            shift and go to state 9
    AMP             shift and go to state 12
    DUR             shift and go to state 15
    INSTR           shift and go to state 13
    VAR             shift and go to state 5
    REPEAT          shift and go to state 7

    program                        shift and go to state 11
    command                        shift and go to state 4
    statement                      shift and go to state 8
    param                          shift and go to state 10
    loop                           shift and go to state 14
    assignation                    shift and go to state 6

state 4

    (4) statement -> command .
    (11) command -> command . COMMA param

    NEWLINE         reduce using rule 4 (statement -> command .)
    COMMA           shift and go to state 16


state 5

    (13) assignation -> VAR . ID TWOPOINTS exp

    ID              shift and go to state 17


state 6

    (6) statement -> assignation .

    NEWLINE         reduce using rule 6 (statement -> assignation .)


state 7

    (32) loop -> REPEAT . INT TWOPOINTS NEWLINE program ENDREPEAT

    INT             shift and go to state 18


state 8

    (2) program -> statement . NEWLINE
    (3) program -> statement . NEWLINE program

    NEWLINE         shift and go to state 19


state 9

    (12) command -> PLAY . TWOPOINTS LBRACKET seqexp RBRACKET

    TWOPOINTS       shift and go to state 20


state 10

    (5) statement -> param .

    NEWLINE         reduce using rule 5 (statement -> param .)


state 11

    (1) program2 -> START NEWLINE program . END

    END             shift and go to state 21


state 12

    (8) param -> AMP . TWOPOINTS INT

    TWOPOINTS       shift and go to state 22


state 13

    (10) param -> INSTR . TWOPOINTS INT

    TWOPOINTS       shift and go to state 23


state 14

    (7) statement -> loop .

    NEWLINE         reduce using rule 7 (statement -> loop .)


state 15

    (9) param -> DUR . TWOPOINTS INT

    TWOPOINTS       shift and go to state 24


state 16

    (11) command -> command COMMA . param
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT

    AMP             shift and go to state 12
    DUR             shift and go to state 15
    INSTR           shift and go to state 13

    param                          shift and go to state 25

state 17

    (13) assignation -> VAR ID . TWOPOINTS exp

    TWOPOINTS       shift and go to state 26


state 18

    (32) loop -> REPEAT INT . TWOPOINTS NEWLINE program ENDREPEAT

    TWOPOINTS       shift and go to state 27


state 19

    (2) program -> statement NEWLINE .
    (3) program -> statement NEWLINE . program
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (11) command -> . command COMMA param
    (12) command -> . PLAY TWOPOINTS LBRACKET seqexp RBRACKET
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT
    (13) assignation -> . VAR ID TWOPOINTS exp
    (32) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

    END             reduce using rule 2 (program -> statement NEWLINE .)
    ENDREPEAT       reduce using rule 2 (program -> statement NEWLINE .)
    PLAY            shift and go to state 9
    AMP             shift and go to state 12
    DUR             shift and go to state 15
    INSTR           shift and go to state 13
    VAR             shift and go to state 5
    REPEAT          shift and go to state 7

    program                        shift and go to state 28
    command                        shift and go to state 4
    statement                      shift and go to state 8
    param                          shift and go to state 10
    loop                           shift and go to state 14
    assignation                    shift and go to state 6

state 20

    (12) command -> PLAY TWOPOINTS . LBRACKET seqexp RBRACKET

    LBRACKET        shift and go to state 29


state 21

    (1) program2 -> START NEWLINE program END .

    $end            reduce using rule 1 (program2 -> START NEWLINE program END .)


state 22

    (8) param -> AMP TWOPOINTS . INT

    INT             shift and go to state 30


state 23

    (10) param -> INSTR TWOPOINTS . INT

    INT             shift and go to state 31


state 24

    (9) param -> DUR TWOPOINTS . INT

    INT             shift and go to state 32


state 25

    (11) command -> command COMMA param .

    COMMA           reduce using rule 11 (command -> command COMMA param .)
    NEWLINE         reduce using rule 11 (command -> command COMMA param .)


state 26

    (13) assignation -> VAR ID TWOPOINTS . exp
    (14) exp -> . LBRACKET seqsound RBRACKET rec_op
    (15) exp -> . nota rec_op
    (16) exp -> . acc rec_op
    (30) nota -> . INT
    (31) nota -> . ID
    (27) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 39
    INT             shift and go to state 35
    ID              shift and go to state 33
    LPAREN          shift and go to state 34

    acc                            shift and go to state 37
    exp                            shift and go to state 36
    nota                           shift and go to state 38

state 27

    (32) loop -> REPEAT INT TWOPOINTS . NEWLINE program ENDREPEAT

    NEWLINE         shift and go to state 40


state 28

    (3) program -> statement NEWLINE program .

    END             reduce using rule 3 (program -> statement NEWLINE program .)
    ENDREPEAT       reduce using rule 3 (program -> statement NEWLINE program .)


state 29

    (12) command -> PLAY TWOPOINTS LBRACKET . seqexp RBRACKET
    (17) seqexp -> . exp COMMA seqexp
    (18) seqexp -> . exp
    (14) exp -> . LBRACKET seqsound RBRACKET rec_op
    (15) exp -> . nota rec_op
    (16) exp -> . acc rec_op
    (30) nota -> . INT
    (31) nota -> . ID
    (27) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 39
    INT             shift and go to state 35
    ID              shift and go to state 33
    LPAREN          shift and go to state 34

    acc                            shift and go to state 37
    exp                            shift and go to state 41
    seqexp                         shift and go to state 42
    nota                           shift and go to state 38

state 30

    (8) param -> AMP TWOPOINTS INT .

    NEWLINE         reduce using rule 8 (param -> AMP TWOPOINTS INT .)
    COMMA           reduce using rule 8 (param -> AMP TWOPOINTS INT .)


state 31

    (10) param -> INSTR TWOPOINTS INT .

    NEWLINE         reduce using rule 10 (param -> INSTR TWOPOINTS INT .)
    COMMA           reduce using rule 10 (param -> INSTR TWOPOINTS INT .)


state 32

    (9) param -> DUR TWOPOINTS INT .

    NEWLINE         reduce using rule 9 (param -> DUR TWOPOINTS INT .)
    COMMA           reduce using rule 9 (param -> DUR TWOPOINTS INT .)


state 33

    (31) nota -> ID .

    COMMA           reduce using rule 31 (nota -> ID .)
    RBRACKET        reduce using rule 31 (nota -> ID .)
    SUM             reduce using rule 31 (nota -> ID .)
    MINUS           reduce using rule 31 (nota -> ID .)
    AMPERSAND       reduce using rule 31 (nota -> ID .)
    NEWLINE         reduce using rule 31 (nota -> ID .)
    RPAREN          reduce using rule 31 (nota -> ID .)


state 34

    (27) acc -> LPAREN . seqnotas RPAREN
    (28) seqnotas -> . nota
    (29) seqnotas -> . nota COMMA seqnotas
    (30) nota -> . INT
    (31) nota -> . ID

    INT             shift and go to state 35
    ID              shift and go to state 33

    seqnotas                       shift and go to state 43
    nota                           shift and go to state 44

state 35

    (30) nota -> INT .

    COMMA           reduce using rule 30 (nota -> INT .)
    RBRACKET        reduce using rule 30 (nota -> INT .)
    SUM             reduce using rule 30 (nota -> INT .)
    MINUS           reduce using rule 30 (nota -> INT .)
    AMPERSAND       reduce using rule 30 (nota -> INT .)
    NEWLINE         reduce using rule 30 (nota -> INT .)
    RPAREN          reduce using rule 30 (nota -> INT .)


state 36

    (13) assignation -> VAR ID TWOPOINTS exp .

    NEWLINE         reduce using rule 13 (assignation -> VAR ID TWOPOINTS exp .)


state 37

    (16) exp -> acc . rec_op
    (19) rec_op -> .
    (20) rec_op -> . SUM exp
    (21) rec_op -> . MINUS exp
    (22) rec_op -> . AMPERSAND exp

    NEWLINE         reduce using rule 19 (rec_op -> .)
    COMMA           reduce using rule 19 (rec_op -> .)
    RBRACKET        reduce using rule 19 (rec_op -> .)
    SUM             shift and go to state 47
    MINUS           shift and go to state 48
    AMPERSAND       shift and go to state 46

    rec_op                         shift and go to state 45

state 38

    (15) exp -> nota . rec_op
    (19) rec_op -> .
    (20) rec_op -> . SUM exp
    (21) rec_op -> . MINUS exp
    (22) rec_op -> . AMPERSAND exp

    NEWLINE         reduce using rule 19 (rec_op -> .)
    COMMA           reduce using rule 19 (rec_op -> .)
    RBRACKET        reduce using rule 19 (rec_op -> .)
    SUM             shift and go to state 47
    MINUS           shift and go to state 48
    AMPERSAND       shift and go to state 46

    rec_op                         shift and go to state 49

state 39

    (14) exp -> LBRACKET . seqsound RBRACKET rec_op
    (23) seqsound -> . sound COMMA seqsound
    (24) seqsound -> . sound
    (25) sound -> . acc
    (26) sound -> . nota
    (27) acc -> . LPAREN seqnotas RPAREN
    (30) nota -> . INT
    (31) nota -> . ID

    LPAREN          shift and go to state 34
    INT             shift and go to state 35
    ID              shift and go to state 33

    sound                          shift and go to state 50
    acc                            shift and go to state 51
    seqsound                       shift and go to state 53
    nota                           shift and go to state 52

state 40

    (32) loop -> REPEAT INT TWOPOINTS NEWLINE . program ENDREPEAT
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (11) command -> . command COMMA param
    (12) command -> . PLAY TWOPOINTS LBRACKET seqexp RBRACKET
    (8) param -> . AMP TWOPOINTS INT
    (9) param -> . DUR TWOPOINTS INT
    (10) param -> . INSTR TWOPOINTS INT
    (13) assignation -> . VAR ID TWOPOINTS exp
    (32) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT

    PLAY            shift and go to state 9
    AMP             shift and go to state 12
    DUR             shift and go to state 15
    INSTR           shift and go to state 13
    VAR             shift and go to state 5
    REPEAT          shift and go to state 7

    program                        shift and go to state 54
    command                        shift and go to state 4
    statement                      shift and go to state 8
    param                          shift and go to state 10
    loop                           shift and go to state 14
    assignation                    shift and go to state 6

state 41

    (17) seqexp -> exp . COMMA seqexp
    (18) seqexp -> exp .

    COMMA           shift and go to state 55
    RBRACKET        reduce using rule 18 (seqexp -> exp .)


state 42

    (12) command -> PLAY TWOPOINTS LBRACKET seqexp . RBRACKET

    RBRACKET        shift and go to state 56


state 43

    (27) acc -> LPAREN seqnotas . RPAREN

    RPAREN          shift and go to state 57


state 44

    (28) seqnotas -> nota .
    (29) seqnotas -> nota . COMMA seqnotas

    RPAREN          reduce using rule 28 (seqnotas -> nota .)
    COMMA           shift and go to state 58


state 45

    (16) exp -> acc rec_op .

    COMMA           reduce using rule 16 (exp -> acc rec_op .)
    RBRACKET        reduce using rule 16 (exp -> acc rec_op .)
    NEWLINE         reduce using rule 16 (exp -> acc rec_op .)


state 46

    (22) rec_op -> AMPERSAND . exp
    (14) exp -> . LBRACKET seqsound RBRACKET rec_op
    (15) exp -> . nota rec_op
    (16) exp -> . acc rec_op
    (30) nota -> . INT
    (31) nota -> . ID
    (27) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 39
    INT             shift and go to state 35
    ID              shift and go to state 33
    LPAREN          shift and go to state 34

    acc                            shift and go to state 37
    exp                            shift and go to state 59
    nota                           shift and go to state 38

state 47

    (20) rec_op -> SUM . exp
    (14) exp -> . LBRACKET seqsound RBRACKET rec_op
    (15) exp -> . nota rec_op
    (16) exp -> . acc rec_op
    (30) nota -> . INT
    (31) nota -> . ID
    (27) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 39
    INT             shift and go to state 35
    ID              shift and go to state 33
    LPAREN          shift and go to state 34

    acc                            shift and go to state 37
    exp                            shift and go to state 60
    nota                           shift and go to state 38

state 48

    (21) rec_op -> MINUS . exp
    (14) exp -> . LBRACKET seqsound RBRACKET rec_op
    (15) exp -> . nota rec_op
    (16) exp -> . acc rec_op
    (30) nota -> . INT
    (31) nota -> . ID
    (27) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 39
    INT             shift and go to state 35
    ID              shift and go to state 33
    LPAREN          shift and go to state 34

    acc                            shift and go to state 37
    exp                            shift and go to state 61
    nota                           shift and go to state 38

state 49

    (15) exp -> nota rec_op .

    COMMA           reduce using rule 15 (exp -> nota rec_op .)
    RBRACKET        reduce using rule 15 (exp -> nota rec_op .)
    NEWLINE         reduce using rule 15 (exp -> nota rec_op .)


state 50

    (23) seqsound -> sound . COMMA seqsound
    (24) seqsound -> sound .

    COMMA           shift and go to state 62
    RBRACKET        reduce using rule 24 (seqsound -> sound .)


state 51

    (25) sound -> acc .

    COMMA           reduce using rule 25 (sound -> acc .)
    RBRACKET        reduce using rule 25 (sound -> acc .)


state 52

    (26) sound -> nota .

    COMMA           reduce using rule 26 (sound -> nota .)
    RBRACKET        reduce using rule 26 (sound -> nota .)


state 53

    (14) exp -> LBRACKET seqsound . RBRACKET rec_op

    RBRACKET        shift and go to state 63


state 54

    (32) loop -> REPEAT INT TWOPOINTS NEWLINE program . ENDREPEAT

    ENDREPEAT       shift and go to state 64


state 55

    (17) seqexp -> exp COMMA . seqexp
    (17) seqexp -> . exp COMMA seqexp
    (18) seqexp -> . exp
    (14) exp -> . LBRACKET seqsound RBRACKET rec_op
    (15) exp -> . nota rec_op
    (16) exp -> . acc rec_op
    (30) nota -> . INT
    (31) nota -> . ID
    (27) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 39
    INT             shift and go to state 35
    ID              shift and go to state 33
    LPAREN          shift and go to state 34

    acc                            shift and go to state 37
    exp                            shift and go to state 41
    seqexp                         shift and go to state 65
    nota                           shift and go to state 38

state 56

    (12) command -> PLAY TWOPOINTS LBRACKET seqexp RBRACKET .

    COMMA           reduce using rule 12 (command -> PLAY TWOPOINTS LBRACKET seqexp RBRACKET .)
    NEWLINE         reduce using rule 12 (command -> PLAY TWOPOINTS LBRACKET seqexp RBRACKET .)


state 57

    (27) acc -> LPAREN seqnotas RPAREN .

    COMMA           reduce using rule 27 (acc -> LPAREN seqnotas RPAREN .)
    RBRACKET        reduce using rule 27 (acc -> LPAREN seqnotas RPAREN .)
    SUM             reduce using rule 27 (acc -> LPAREN seqnotas RPAREN .)
    MINUS           reduce using rule 27 (acc -> LPAREN seqnotas RPAREN .)
    AMPERSAND       reduce using rule 27 (acc -> LPAREN seqnotas RPAREN .)
    NEWLINE         reduce using rule 27 (acc -> LPAREN seqnotas RPAREN .)


state 58

    (29) seqnotas -> nota COMMA . seqnotas
    (28) seqnotas -> . nota
    (29) seqnotas -> . nota COMMA seqnotas
    (30) nota -> . INT
    (31) nota -> . ID

    INT             shift and go to state 35
    ID              shift and go to state 33

    seqnotas                       shift and go to state 66
    nota                           shift and go to state 44

state 59

    (22) rec_op -> AMPERSAND exp .

    NEWLINE         reduce using rule 22 (rec_op -> AMPERSAND exp .)
    COMMA           reduce using rule 22 (rec_op -> AMPERSAND exp .)
    RBRACKET        reduce using rule 22 (rec_op -> AMPERSAND exp .)


state 60

    (20) rec_op -> SUM exp .

    NEWLINE         reduce using rule 20 (rec_op -> SUM exp .)
    COMMA           reduce using rule 20 (rec_op -> SUM exp .)
    RBRACKET        reduce using rule 20 (rec_op -> SUM exp .)


state 61

    (21) rec_op -> MINUS exp .

    NEWLINE         reduce using rule 21 (rec_op -> MINUS exp .)
    COMMA           reduce using rule 21 (rec_op -> MINUS exp .)
    RBRACKET        reduce using rule 21 (rec_op -> MINUS exp .)


state 62

    (23) seqsound -> sound COMMA . seqsound
    (23) seqsound -> . sound COMMA seqsound
    (24) seqsound -> . sound
    (25) sound -> . acc
    (26) sound -> . nota
    (27) acc -> . LPAREN seqnotas RPAREN
    (30) nota -> . INT
    (31) nota -> . ID

    LPAREN          shift and go to state 34
    INT             shift and go to state 35
    ID              shift and go to state 33

    seqsound                       shift and go to state 67
    sound                          shift and go to state 50
    nota                           shift and go to state 52
    acc                            shift and go to state 51

state 63

    (14) exp -> LBRACKET seqsound RBRACKET . rec_op
    (19) rec_op -> .
    (20) rec_op -> . SUM exp
    (21) rec_op -> . MINUS exp
    (22) rec_op -> . AMPERSAND exp

    NEWLINE         reduce using rule 19 (rec_op -> .)
    COMMA           reduce using rule 19 (rec_op -> .)
    RBRACKET        reduce using rule 19 (rec_op -> .)
    SUM             shift and go to state 47
    MINUS           shift and go to state 48
    AMPERSAND       shift and go to state 46

    rec_op                         shift and go to state 68

state 64

    (32) loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .

    NEWLINE         reduce using rule 32 (loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .)


state 65

    (17) seqexp -> exp COMMA seqexp .

    RBRACKET        reduce using rule 17 (seqexp -> exp COMMA seqexp .)


state 66

    (29) seqnotas -> nota COMMA seqnotas .

    RPAREN          reduce using rule 29 (seqnotas -> nota COMMA seqnotas .)


state 67

    (23) seqsound -> sound COMMA seqsound .

    RBRACKET        reduce using rule 23 (seqsound -> sound COMMA seqsound .)


state 68

    (14) exp -> LBRACKET seqsound RBRACKET rec_op .

    COMMA           reduce using rule 14 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    RBRACKET        reduce using rule 14 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    NEWLINE         reduce using rule 14 (exp -> LBRACKET seqsound RBRACKET rec_op .)

