Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CUE
    ENDTRACK
    MULTIPLY
    SYNC
    TRACK

Grammar

Rule 0     S' -> program2
Rule 1     program2 -> START NEWLINE program END
Rule 2     program -> statement NEWLINE
Rule 3     program -> statement NEWLINE program
Rule 4     statement -> command
Rule 5     statement -> param
Rule 6     statement -> assignation
Rule 7     statement -> loop
Rule 8     statement -> label
Rule 9     param -> AMP EQUAL INT
Rule 10    param -> AMP EQUAL ID
Rule 11    param -> DUR EQUAL INT
Rule 12    param -> DUR EQUAL ID
Rule 13    param -> INSTR EQUAL INT
Rule 14    param -> TONE EQUAL INT
Rule 15    param -> TONE EQUAL ID
Rule 16    param -> SLEEP EQUAL INT
Rule 17    param -> SLEEP EQUAL ID
Rule 18    param -> CALL TWOPOINTS ID
Rule 19    command -> command COMMA param
Rule 20    command -> PLAY TWOPOINTS playcontent
Rule 21    playcontent -> LBRACKET seqexp RBRACKET
Rule 22    playcontent -> ID
Rule 23    playcontent -> acc
Rule 24    assignation -> VAR ID EQUAL exp
Rule 25    exp -> LBRACKET seqsound RBRACKET rec_op
Rule 26    exp -> nota rec_op
Rule 27    exp -> acc rec_op
Rule 28    seqexp -> exp COMMA seqexp
Rule 29    seqexp -> exp
Rule 30    rec_op -> <empty>
Rule 31    rec_op -> SUM exp
Rule 32    rec_op -> MINUS exp
Rule 33    rec_op -> AMPERSAND exp
Rule 34    seqsound -> sound COMMA seqsound
Rule 35    seqsound -> sound
Rule 36    sound -> acc
Rule 37    sound -> nota
Rule 38    acc -> LPAREN seqnotas RPAREN
Rule 39    seqnotas -> nota
Rule 40    seqnotas -> nota COMMA seqnotas
Rule 41    nota -> INT
Rule 42    nota -> ID
Rule 43    loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
Rule 44    label -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

Terminals, with rules where they appear

AMP                  : 9 10
AMPERSAND            : 33
CALL                 : 18
COMMA                : 19 28 34 40
CUE                  : 
DUR                  : 11 12
END                  : 1
ENDREPEAT            : 43
ENDSEQUENCE          : 44
ENDTRACK             : 
EQUAL                : 9 10 11 12 13 14 15 16 17 24
ID                   : 10 12 15 17 18 22 24 42 44
INSTR                : 13
INT                  : 9 11 13 14 16 41 43
LBRACKET             : 21 25
LPAREN               : 38
MINUS                : 32
MULTIPLY             : 
NEWLINE              : 1 2 3 43 44
PLAY                 : 20
RBRACKET             : 21 25
REPEAT               : 43
RPAREN               : 38
SEQUENCE             : 44
SLEEP                : 16 17
START                : 1
SUM                  : 31
SYNC                 : 
TONE                 : 14 15
TRACK                : 
TWOPOINTS            : 18 20 43 44
VAR                  : 24
error                : 

Nonterminals, with rules where they appear

acc                  : 23 27 36
assignation          : 6
command              : 4 19
exp                  : 24 28 29 31 32 33
label                : 8
loop                 : 7
nota                 : 26 37 39 40
param                : 5 19
playcontent          : 20
program              : 1 3 43 44
program2             : 0
rec_op               : 25 26 27
seqexp               : 21 28
seqnotas             : 38 40
seqsound             : 25 34
sound                : 34 35
statement            : 2 3

Parsing method: LALR

state 0

    (0) S' -> . program2
    (1) program2 -> . START NEWLINE program END

    START           shift and go to state 2

    program2                       shift and go to state 1

state 1

    (0) S' -> program2 .



state 2

    (1) program2 -> START . NEWLINE program END

    NEWLINE         shift and go to state 3


state 3

    (1) program2 -> START NEWLINE . program END
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . label
    (19) command -> . command COMMA param
    (20) command -> . PLAY TWOPOINTS playcontent
    (9) param -> . AMP EQUAL INT
    (10) param -> . AMP EQUAL ID
    (11) param -> . DUR EQUAL INT
    (12) param -> . DUR EQUAL ID
    (13) param -> . INSTR EQUAL INT
    (14) param -> . TONE EQUAL INT
    (15) param -> . TONE EQUAL ID
    (16) param -> . SLEEP EQUAL INT
    (17) param -> . SLEEP EQUAL ID
    (18) param -> . CALL TWOPOINTS ID
    (24) assignation -> . VAR ID EQUAL exp
    (43) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (44) label -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

    PLAY            shift and go to state 11
    AMP             shift and go to state 12
    DUR             shift and go to state 13
    INSTR           shift and go to state 14
    TONE            shift and go to state 15
    SLEEP           shift and go to state 16
    CALL            shift and go to state 17
    VAR             shift and go to state 18
    REPEAT          shift and go to state 19
    SEQUENCE        shift and go to state 20

    program                        shift and go to state 4
    statement                      shift and go to state 5
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    label                          shift and go to state 10

state 4

    (1) program2 -> START NEWLINE program . END

    END             shift and go to state 21


state 5

    (2) program -> statement . NEWLINE
    (3) program -> statement . NEWLINE program

    NEWLINE         shift and go to state 22


state 6

    (4) statement -> command .
    (19) command -> command . COMMA param

    NEWLINE         reduce using rule 4 (statement -> command .)
    COMMA           shift and go to state 23


state 7

    (5) statement -> param .

    NEWLINE         reduce using rule 5 (statement -> param .)


state 8

    (6) statement -> assignation .

    NEWLINE         reduce using rule 6 (statement -> assignation .)


state 9

    (7) statement -> loop .

    NEWLINE         reduce using rule 7 (statement -> loop .)


state 10

    (8) statement -> label .

    NEWLINE         reduce using rule 8 (statement -> label .)


state 11

    (20) command -> PLAY . TWOPOINTS playcontent

    TWOPOINTS       shift and go to state 24


state 12

    (9) param -> AMP . EQUAL INT
    (10) param -> AMP . EQUAL ID

    EQUAL           shift and go to state 25


state 13

    (11) param -> DUR . EQUAL INT
    (12) param -> DUR . EQUAL ID

    EQUAL           shift and go to state 26


state 14

    (13) param -> INSTR . EQUAL INT

    EQUAL           shift and go to state 27


state 15

    (14) param -> TONE . EQUAL INT
    (15) param -> TONE . EQUAL ID

    EQUAL           shift and go to state 28


state 16

    (16) param -> SLEEP . EQUAL INT
    (17) param -> SLEEP . EQUAL ID

    EQUAL           shift and go to state 29


state 17

    (18) param -> CALL . TWOPOINTS ID

    TWOPOINTS       shift and go to state 30


state 18

    (24) assignation -> VAR . ID EQUAL exp

    ID              shift and go to state 31


state 19

    (43) loop -> REPEAT . INT TWOPOINTS NEWLINE program ENDREPEAT

    INT             shift and go to state 32


state 20

    (44) label -> SEQUENCE . ID TWOPOINTS NEWLINE program ENDSEQUENCE

    ID              shift and go to state 33


state 21

    (1) program2 -> START NEWLINE program END .

    $end            reduce using rule 1 (program2 -> START NEWLINE program END .)


state 22

    (2) program -> statement NEWLINE .
    (3) program -> statement NEWLINE . program
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . label
    (19) command -> . command COMMA param
    (20) command -> . PLAY TWOPOINTS playcontent
    (9) param -> . AMP EQUAL INT
    (10) param -> . AMP EQUAL ID
    (11) param -> . DUR EQUAL INT
    (12) param -> . DUR EQUAL ID
    (13) param -> . INSTR EQUAL INT
    (14) param -> . TONE EQUAL INT
    (15) param -> . TONE EQUAL ID
    (16) param -> . SLEEP EQUAL INT
    (17) param -> . SLEEP EQUAL ID
    (18) param -> . CALL TWOPOINTS ID
    (24) assignation -> . VAR ID EQUAL exp
    (43) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (44) label -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

    END             reduce using rule 2 (program -> statement NEWLINE .)
    ENDREPEAT       reduce using rule 2 (program -> statement NEWLINE .)
    ENDSEQUENCE     reduce using rule 2 (program -> statement NEWLINE .)
    PLAY            shift and go to state 11
    AMP             shift and go to state 12
    DUR             shift and go to state 13
    INSTR           shift and go to state 14
    TONE            shift and go to state 15
    SLEEP           shift and go to state 16
    CALL            shift and go to state 17
    VAR             shift and go to state 18
    REPEAT          shift and go to state 19
    SEQUENCE        shift and go to state 20

    statement                      shift and go to state 5
    program                        shift and go to state 34
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    label                          shift and go to state 10

state 23

    (19) command -> command COMMA . param
    (9) param -> . AMP EQUAL INT
    (10) param -> . AMP EQUAL ID
    (11) param -> . DUR EQUAL INT
    (12) param -> . DUR EQUAL ID
    (13) param -> . INSTR EQUAL INT
    (14) param -> . TONE EQUAL INT
    (15) param -> . TONE EQUAL ID
    (16) param -> . SLEEP EQUAL INT
    (17) param -> . SLEEP EQUAL ID
    (18) param -> . CALL TWOPOINTS ID

    AMP             shift and go to state 12
    DUR             shift and go to state 13
    INSTR           shift and go to state 14
    TONE            shift and go to state 15
    SLEEP           shift and go to state 16
    CALL            shift and go to state 17

    param                          shift and go to state 35

state 24

    (20) command -> PLAY TWOPOINTS . playcontent
    (21) playcontent -> . LBRACKET seqexp RBRACKET
    (22) playcontent -> . ID
    (23) playcontent -> . acc
    (38) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 37
    ID              shift and go to state 38
    LPAREN          shift and go to state 40

    playcontent                    shift and go to state 36
    acc                            shift and go to state 39

state 25

    (9) param -> AMP EQUAL . INT
    (10) param -> AMP EQUAL . ID

    INT             shift and go to state 41
    ID              shift and go to state 42


state 26

    (11) param -> DUR EQUAL . INT
    (12) param -> DUR EQUAL . ID

    INT             shift and go to state 43
    ID              shift and go to state 44


state 27

    (13) param -> INSTR EQUAL . INT

    INT             shift and go to state 45


state 28

    (14) param -> TONE EQUAL . INT
    (15) param -> TONE EQUAL . ID

    INT             shift and go to state 46
    ID              shift and go to state 47


state 29

    (16) param -> SLEEP EQUAL . INT
    (17) param -> SLEEP EQUAL . ID

    INT             shift and go to state 48
    ID              shift and go to state 49


state 30

    (18) param -> CALL TWOPOINTS . ID

    ID              shift and go to state 50


state 31

    (24) assignation -> VAR ID . EQUAL exp

    EQUAL           shift and go to state 51


state 32

    (43) loop -> REPEAT INT . TWOPOINTS NEWLINE program ENDREPEAT

    TWOPOINTS       shift and go to state 52


state 33

    (44) label -> SEQUENCE ID . TWOPOINTS NEWLINE program ENDSEQUENCE

    TWOPOINTS       shift and go to state 53


state 34

    (3) program -> statement NEWLINE program .

    END             reduce using rule 3 (program -> statement NEWLINE program .)
    ENDREPEAT       reduce using rule 3 (program -> statement NEWLINE program .)
    ENDSEQUENCE     reduce using rule 3 (program -> statement NEWLINE program .)


state 35

    (19) command -> command COMMA param .

    COMMA           reduce using rule 19 (command -> command COMMA param .)
    NEWLINE         reduce using rule 19 (command -> command COMMA param .)


state 36

    (20) command -> PLAY TWOPOINTS playcontent .

    COMMA           reduce using rule 20 (command -> PLAY TWOPOINTS playcontent .)
    NEWLINE         reduce using rule 20 (command -> PLAY TWOPOINTS playcontent .)


state 37

    (21) playcontent -> LBRACKET . seqexp RBRACKET
    (28) seqexp -> . exp COMMA seqexp
    (29) seqexp -> . exp
    (25) exp -> . LBRACKET seqsound RBRACKET rec_op
    (26) exp -> . nota rec_op
    (27) exp -> . acc rec_op
    (41) nota -> . INT
    (42) nota -> . ID
    (38) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 54
    INT             shift and go to state 59
    ID              shift and go to state 60
    LPAREN          shift and go to state 40

    seqexp                         shift and go to state 55
    exp                            shift and go to state 56
    nota                           shift and go to state 57
    acc                            shift and go to state 58

state 38

    (22) playcontent -> ID .

    COMMA           reduce using rule 22 (playcontent -> ID .)
    NEWLINE         reduce using rule 22 (playcontent -> ID .)


state 39

    (23) playcontent -> acc .

    COMMA           reduce using rule 23 (playcontent -> acc .)
    NEWLINE         reduce using rule 23 (playcontent -> acc .)


state 40

    (38) acc -> LPAREN . seqnotas RPAREN
    (39) seqnotas -> . nota
    (40) seqnotas -> . nota COMMA seqnotas
    (41) nota -> . INT
    (42) nota -> . ID

    INT             shift and go to state 59
    ID              shift and go to state 60

    seqnotas                       shift and go to state 61
    nota                           shift and go to state 62

state 41

    (9) param -> AMP EQUAL INT .

    NEWLINE         reduce using rule 9 (param -> AMP EQUAL INT .)
    COMMA           reduce using rule 9 (param -> AMP EQUAL INT .)


state 42

    (10) param -> AMP EQUAL ID .

    NEWLINE         reduce using rule 10 (param -> AMP EQUAL ID .)
    COMMA           reduce using rule 10 (param -> AMP EQUAL ID .)


state 43

    (11) param -> DUR EQUAL INT .

    NEWLINE         reduce using rule 11 (param -> DUR EQUAL INT .)
    COMMA           reduce using rule 11 (param -> DUR EQUAL INT .)


state 44

    (12) param -> DUR EQUAL ID .

    NEWLINE         reduce using rule 12 (param -> DUR EQUAL ID .)
    COMMA           reduce using rule 12 (param -> DUR EQUAL ID .)


state 45

    (13) param -> INSTR EQUAL INT .

    NEWLINE         reduce using rule 13 (param -> INSTR EQUAL INT .)
    COMMA           reduce using rule 13 (param -> INSTR EQUAL INT .)


state 46

    (14) param -> TONE EQUAL INT .

    NEWLINE         reduce using rule 14 (param -> TONE EQUAL INT .)
    COMMA           reduce using rule 14 (param -> TONE EQUAL INT .)


state 47

    (15) param -> TONE EQUAL ID .

    NEWLINE         reduce using rule 15 (param -> TONE EQUAL ID .)
    COMMA           reduce using rule 15 (param -> TONE EQUAL ID .)


state 48

    (16) param -> SLEEP EQUAL INT .

    NEWLINE         reduce using rule 16 (param -> SLEEP EQUAL INT .)
    COMMA           reduce using rule 16 (param -> SLEEP EQUAL INT .)


state 49

    (17) param -> SLEEP EQUAL ID .

    NEWLINE         reduce using rule 17 (param -> SLEEP EQUAL ID .)
    COMMA           reduce using rule 17 (param -> SLEEP EQUAL ID .)


state 50

    (18) param -> CALL TWOPOINTS ID .

    NEWLINE         reduce using rule 18 (param -> CALL TWOPOINTS ID .)
    COMMA           reduce using rule 18 (param -> CALL TWOPOINTS ID .)


state 51

    (24) assignation -> VAR ID EQUAL . exp
    (25) exp -> . LBRACKET seqsound RBRACKET rec_op
    (26) exp -> . nota rec_op
    (27) exp -> . acc rec_op
    (41) nota -> . INT
    (42) nota -> . ID
    (38) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 54
    INT             shift and go to state 59
    ID              shift and go to state 60
    LPAREN          shift and go to state 40

    exp                            shift and go to state 63
    nota                           shift and go to state 57
    acc                            shift and go to state 58

state 52

    (43) loop -> REPEAT INT TWOPOINTS . NEWLINE program ENDREPEAT

    NEWLINE         shift and go to state 64


state 53

    (44) label -> SEQUENCE ID TWOPOINTS . NEWLINE program ENDSEQUENCE

    NEWLINE         shift and go to state 65


state 54

    (25) exp -> LBRACKET . seqsound RBRACKET rec_op
    (34) seqsound -> . sound COMMA seqsound
    (35) seqsound -> . sound
    (36) sound -> . acc
    (37) sound -> . nota
    (38) acc -> . LPAREN seqnotas RPAREN
    (41) nota -> . INT
    (42) nota -> . ID

    LPAREN          shift and go to state 40
    INT             shift and go to state 59
    ID              shift and go to state 60

    seqsound                       shift and go to state 66
    sound                          shift and go to state 67
    acc                            shift and go to state 68
    nota                           shift and go to state 69

state 55

    (21) playcontent -> LBRACKET seqexp . RBRACKET

    RBRACKET        shift and go to state 70


state 56

    (28) seqexp -> exp . COMMA seqexp
    (29) seqexp -> exp .

    COMMA           shift and go to state 71
    RBRACKET        reduce using rule 29 (seqexp -> exp .)


state 57

    (26) exp -> nota . rec_op
    (30) rec_op -> .
    (31) rec_op -> . SUM exp
    (32) rec_op -> . MINUS exp
    (33) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 30 (rec_op -> .)
    RBRACKET        reduce using rule 30 (rec_op -> .)
    NEWLINE         reduce using rule 30 (rec_op -> .)
    SUM             shift and go to state 73
    MINUS           shift and go to state 74
    AMPERSAND       shift and go to state 75

    rec_op                         shift and go to state 72

state 58

    (27) exp -> acc . rec_op
    (30) rec_op -> .
    (31) rec_op -> . SUM exp
    (32) rec_op -> . MINUS exp
    (33) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 30 (rec_op -> .)
    RBRACKET        reduce using rule 30 (rec_op -> .)
    NEWLINE         reduce using rule 30 (rec_op -> .)
    SUM             shift and go to state 73
    MINUS           shift and go to state 74
    AMPERSAND       shift and go to state 75

    rec_op                         shift and go to state 76

state 59

    (41) nota -> INT .

    SUM             reduce using rule 41 (nota -> INT .)
    MINUS           reduce using rule 41 (nota -> INT .)
    AMPERSAND       reduce using rule 41 (nota -> INT .)
    COMMA           reduce using rule 41 (nota -> INT .)
    RBRACKET        reduce using rule 41 (nota -> INT .)
    RPAREN          reduce using rule 41 (nota -> INT .)
    NEWLINE         reduce using rule 41 (nota -> INT .)


state 60

    (42) nota -> ID .

    SUM             reduce using rule 42 (nota -> ID .)
    MINUS           reduce using rule 42 (nota -> ID .)
    AMPERSAND       reduce using rule 42 (nota -> ID .)
    COMMA           reduce using rule 42 (nota -> ID .)
    RBRACKET        reduce using rule 42 (nota -> ID .)
    RPAREN          reduce using rule 42 (nota -> ID .)
    NEWLINE         reduce using rule 42 (nota -> ID .)


state 61

    (38) acc -> LPAREN seqnotas . RPAREN

    RPAREN          shift and go to state 77


state 62

    (39) seqnotas -> nota .
    (40) seqnotas -> nota . COMMA seqnotas

    RPAREN          reduce using rule 39 (seqnotas -> nota .)
    COMMA           shift and go to state 78


state 63

    (24) assignation -> VAR ID EQUAL exp .

    NEWLINE         reduce using rule 24 (assignation -> VAR ID EQUAL exp .)


state 64

    (43) loop -> REPEAT INT TWOPOINTS NEWLINE . program ENDREPEAT
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . label
    (19) command -> . command COMMA param
    (20) command -> . PLAY TWOPOINTS playcontent
    (9) param -> . AMP EQUAL INT
    (10) param -> . AMP EQUAL ID
    (11) param -> . DUR EQUAL INT
    (12) param -> . DUR EQUAL ID
    (13) param -> . INSTR EQUAL INT
    (14) param -> . TONE EQUAL INT
    (15) param -> . TONE EQUAL ID
    (16) param -> . SLEEP EQUAL INT
    (17) param -> . SLEEP EQUAL ID
    (18) param -> . CALL TWOPOINTS ID
    (24) assignation -> . VAR ID EQUAL exp
    (43) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (44) label -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

    PLAY            shift and go to state 11
    AMP             shift and go to state 12
    DUR             shift and go to state 13
    INSTR           shift and go to state 14
    TONE            shift and go to state 15
    SLEEP           shift and go to state 16
    CALL            shift and go to state 17
    VAR             shift and go to state 18
    REPEAT          shift and go to state 19
    SEQUENCE        shift and go to state 20

    program                        shift and go to state 79
    statement                      shift and go to state 5
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    label                          shift and go to state 10

state 65

    (44) label -> SEQUENCE ID TWOPOINTS NEWLINE . program ENDSEQUENCE
    (2) program -> . statement NEWLINE
    (3) program -> . statement NEWLINE program
    (4) statement -> . command
    (5) statement -> . param
    (6) statement -> . assignation
    (7) statement -> . loop
    (8) statement -> . label
    (19) command -> . command COMMA param
    (20) command -> . PLAY TWOPOINTS playcontent
    (9) param -> . AMP EQUAL INT
    (10) param -> . AMP EQUAL ID
    (11) param -> . DUR EQUAL INT
    (12) param -> . DUR EQUAL ID
    (13) param -> . INSTR EQUAL INT
    (14) param -> . TONE EQUAL INT
    (15) param -> . TONE EQUAL ID
    (16) param -> . SLEEP EQUAL INT
    (17) param -> . SLEEP EQUAL ID
    (18) param -> . CALL TWOPOINTS ID
    (24) assignation -> . VAR ID EQUAL exp
    (43) loop -> . REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT
    (44) label -> . SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE

    PLAY            shift and go to state 11
    AMP             shift and go to state 12
    DUR             shift and go to state 13
    INSTR           shift and go to state 14
    TONE            shift and go to state 15
    SLEEP           shift and go to state 16
    CALL            shift and go to state 17
    VAR             shift and go to state 18
    REPEAT          shift and go to state 19
    SEQUENCE        shift and go to state 20

    program                        shift and go to state 80
    statement                      shift and go to state 5
    command                        shift and go to state 6
    param                          shift and go to state 7
    assignation                    shift and go to state 8
    loop                           shift and go to state 9
    label                          shift and go to state 10

state 66

    (25) exp -> LBRACKET seqsound . RBRACKET rec_op

    RBRACKET        shift and go to state 81


state 67

    (34) seqsound -> sound . COMMA seqsound
    (35) seqsound -> sound .

    COMMA           shift and go to state 82
    RBRACKET        reduce using rule 35 (seqsound -> sound .)


state 68

    (36) sound -> acc .

    COMMA           reduce using rule 36 (sound -> acc .)
    RBRACKET        reduce using rule 36 (sound -> acc .)


state 69

    (37) sound -> nota .

    COMMA           reduce using rule 37 (sound -> nota .)
    RBRACKET        reduce using rule 37 (sound -> nota .)


state 70

    (21) playcontent -> LBRACKET seqexp RBRACKET .

    COMMA           reduce using rule 21 (playcontent -> LBRACKET seqexp RBRACKET .)
    NEWLINE         reduce using rule 21 (playcontent -> LBRACKET seqexp RBRACKET .)


state 71

    (28) seqexp -> exp COMMA . seqexp
    (28) seqexp -> . exp COMMA seqexp
    (29) seqexp -> . exp
    (25) exp -> . LBRACKET seqsound RBRACKET rec_op
    (26) exp -> . nota rec_op
    (27) exp -> . acc rec_op
    (41) nota -> . INT
    (42) nota -> . ID
    (38) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 54
    INT             shift and go to state 59
    ID              shift and go to state 60
    LPAREN          shift and go to state 40

    exp                            shift and go to state 56
    seqexp                         shift and go to state 83
    nota                           shift and go to state 57
    acc                            shift and go to state 58

state 72

    (26) exp -> nota rec_op .

    COMMA           reduce using rule 26 (exp -> nota rec_op .)
    RBRACKET        reduce using rule 26 (exp -> nota rec_op .)
    NEWLINE         reduce using rule 26 (exp -> nota rec_op .)


state 73

    (31) rec_op -> SUM . exp
    (25) exp -> . LBRACKET seqsound RBRACKET rec_op
    (26) exp -> . nota rec_op
    (27) exp -> . acc rec_op
    (41) nota -> . INT
    (42) nota -> . ID
    (38) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 54
    INT             shift and go to state 59
    ID              shift and go to state 60
    LPAREN          shift and go to state 40

    exp                            shift and go to state 84
    nota                           shift and go to state 57
    acc                            shift and go to state 58

state 74

    (32) rec_op -> MINUS . exp
    (25) exp -> . LBRACKET seqsound RBRACKET rec_op
    (26) exp -> . nota rec_op
    (27) exp -> . acc rec_op
    (41) nota -> . INT
    (42) nota -> . ID
    (38) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 54
    INT             shift and go to state 59
    ID              shift and go to state 60
    LPAREN          shift and go to state 40

    exp                            shift and go to state 85
    nota                           shift and go to state 57
    acc                            shift and go to state 58

state 75

    (33) rec_op -> AMPERSAND . exp
    (25) exp -> . LBRACKET seqsound RBRACKET rec_op
    (26) exp -> . nota rec_op
    (27) exp -> . acc rec_op
    (41) nota -> . INT
    (42) nota -> . ID
    (38) acc -> . LPAREN seqnotas RPAREN

    LBRACKET        shift and go to state 54
    INT             shift and go to state 59
    ID              shift and go to state 60
    LPAREN          shift and go to state 40

    exp                            shift and go to state 86
    nota                           shift and go to state 57
    acc                            shift and go to state 58

state 76

    (27) exp -> acc rec_op .

    COMMA           reduce using rule 27 (exp -> acc rec_op .)
    RBRACKET        reduce using rule 27 (exp -> acc rec_op .)
    NEWLINE         reduce using rule 27 (exp -> acc rec_op .)


state 77

    (38) acc -> LPAREN seqnotas RPAREN .

    COMMA           reduce using rule 38 (acc -> LPAREN seqnotas RPAREN .)
    NEWLINE         reduce using rule 38 (acc -> LPAREN seqnotas RPAREN .)
    SUM             reduce using rule 38 (acc -> LPAREN seqnotas RPAREN .)
    MINUS           reduce using rule 38 (acc -> LPAREN seqnotas RPAREN .)
    AMPERSAND       reduce using rule 38 (acc -> LPAREN seqnotas RPAREN .)
    RBRACKET        reduce using rule 38 (acc -> LPAREN seqnotas RPAREN .)


state 78

    (40) seqnotas -> nota COMMA . seqnotas
    (39) seqnotas -> . nota
    (40) seqnotas -> . nota COMMA seqnotas
    (41) nota -> . INT
    (42) nota -> . ID

    INT             shift and go to state 59
    ID              shift and go to state 60

    nota                           shift and go to state 62
    seqnotas                       shift and go to state 87

state 79

    (43) loop -> REPEAT INT TWOPOINTS NEWLINE program . ENDREPEAT

    ENDREPEAT       shift and go to state 88


state 80

    (44) label -> SEQUENCE ID TWOPOINTS NEWLINE program . ENDSEQUENCE

    ENDSEQUENCE     shift and go to state 89


state 81

    (25) exp -> LBRACKET seqsound RBRACKET . rec_op
    (30) rec_op -> .
    (31) rec_op -> . SUM exp
    (32) rec_op -> . MINUS exp
    (33) rec_op -> . AMPERSAND exp

    COMMA           reduce using rule 30 (rec_op -> .)
    RBRACKET        reduce using rule 30 (rec_op -> .)
    NEWLINE         reduce using rule 30 (rec_op -> .)
    SUM             shift and go to state 73
    MINUS           shift and go to state 74
    AMPERSAND       shift and go to state 75

    rec_op                         shift and go to state 90

state 82

    (34) seqsound -> sound COMMA . seqsound
    (34) seqsound -> . sound COMMA seqsound
    (35) seqsound -> . sound
    (36) sound -> . acc
    (37) sound -> . nota
    (38) acc -> . LPAREN seqnotas RPAREN
    (41) nota -> . INT
    (42) nota -> . ID

    LPAREN          shift and go to state 40
    INT             shift and go to state 59
    ID              shift and go to state 60

    sound                          shift and go to state 67
    seqsound                       shift and go to state 91
    acc                            shift and go to state 68
    nota                           shift and go to state 69

state 83

    (28) seqexp -> exp COMMA seqexp .

    RBRACKET        reduce using rule 28 (seqexp -> exp COMMA seqexp .)


state 84

    (31) rec_op -> SUM exp .

    COMMA           reduce using rule 31 (rec_op -> SUM exp .)
    RBRACKET        reduce using rule 31 (rec_op -> SUM exp .)
    NEWLINE         reduce using rule 31 (rec_op -> SUM exp .)


state 85

    (32) rec_op -> MINUS exp .

    COMMA           reduce using rule 32 (rec_op -> MINUS exp .)
    RBRACKET        reduce using rule 32 (rec_op -> MINUS exp .)
    NEWLINE         reduce using rule 32 (rec_op -> MINUS exp .)


state 86

    (33) rec_op -> AMPERSAND exp .

    COMMA           reduce using rule 33 (rec_op -> AMPERSAND exp .)
    RBRACKET        reduce using rule 33 (rec_op -> AMPERSAND exp .)
    NEWLINE         reduce using rule 33 (rec_op -> AMPERSAND exp .)


state 87

    (40) seqnotas -> nota COMMA seqnotas .

    RPAREN          reduce using rule 40 (seqnotas -> nota COMMA seqnotas .)


state 88

    (43) loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .

    NEWLINE         reduce using rule 43 (loop -> REPEAT INT TWOPOINTS NEWLINE program ENDREPEAT .)


state 89

    (44) label -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE .

    NEWLINE         reduce using rule 44 (label -> SEQUENCE ID TWOPOINTS NEWLINE program ENDSEQUENCE .)


state 90

    (25) exp -> LBRACKET seqsound RBRACKET rec_op .

    COMMA           reduce using rule 25 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    RBRACKET        reduce using rule 25 (exp -> LBRACKET seqsound RBRACKET rec_op .)
    NEWLINE         reduce using rule 25 (exp -> LBRACKET seqsound RBRACKET rec_op .)


state 91

    (34) seqsound -> sound COMMA seqsound .

    RBRACKET        reduce using rule 34 (seqsound -> sound COMMA seqsound .)

